{"ast":null,"code":"var _jsxFileName = \"/Users/yeungj12/Projects/FrontEnd/ReactJS/frontend014_recipe/src/App.js\";\nimport React, { useEffect, useState } from \"react\";\nimport Recipe from \"./Recipe\";\nimport Nav from \"./Nav\";\nimport PaginationFooter from \"./Pagination\";\nimport Modal from \"react-modal\";\nimport \"typeface-roboto\";\nimport { Formik, Form, useField, FieldArray } from \"formik\";\nimport { green } from \"@material-ui/core/colors\";\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\nimport \"./App.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSearch } from \"@fortawesome/free-solid-svg-icons\";\nimport { TextField, Button, Checkbox, Radio, FormControlLabel, Slider, Grid, RadioGroup } from \"@material-ui/core\";\nimport * as yup from \"yup\";\nModal.setAppElement(\"#root\"); //use Styles\n\nconst useStyles = makeStyles(theme => ({\n  root: { ...theme.typography.button,\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(1),\n    fontSize: \"1.5em\"\n  },\n  input: {\n    width: 42\n  },\n  sliderRoot: {\n    width: \"50%\"\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 240\n  },\n  popover: {\n    pointerEvents: \"none\"\n  },\n  paper: {\n    padding: theme.spacing(1)\n  }\n})); //MyRadio\n\nconst MyRadio = ({\n  label,\n  ...props\n}) => {\n  const [field, meta] = useField(props);\n  return /*#__PURE__*/React.createElement(FormControlLabel, Object.assign({}, props, field, {\n    control: /*#__PURE__*/React.createElement(GreenRadio, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 16\n      }\n    }),\n    label: label,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }));\n}; //Green Radio\n\n\nconst GreenRadio = withStyles({\n  root: {\n    color: green[400],\n    \"&$checked\": {\n      color: green[600]\n    }\n  },\n  checked: {}\n})(props => /*#__PURE__*/React.createElement(Radio, Object.assign({\n  color: \"default\"\n}, props, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 15\n  }\n}))); //My Checkbox\n\nconst MyCheckBox = ({\n  label,\n  ...props\n}) => {\n  const [field, meta] = useField(props);\n  return /*#__PURE__*/React.createElement(FormControlLabel, Object.assign({}, field, props, {\n    control: /*#__PURE__*/React.createElement(GreenCheckbox, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 16\n      }\n    }),\n    label: label,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 5\n    }\n  }));\n}; //Green Checkbox\n\n\nconst GreenCheckbox = withStyles({\n  root: {\n    color: green[400],\n    \"&$checked\": {\n      color: green[600]\n    }\n  },\n  checked: {}\n})(props => /*#__PURE__*/React.createElement(Checkbox, Object.assign({\n  color: \"default\"\n}, props, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 15\n  }\n}))); //Validation Schema\n\nconst validationSchema = yup.object({\n  // || passing validation to search using yup\n  search: yup.string().required().max(10),\n  pets: yup.array().of(yup.object({\n    name: yup.string().required()\n  }))\n}); //Slider Value Text sync function\n\nfunction valuetext(value) {\n  return `${value}`;\n}\n\nconst App = () => {\n  const APP_ID = \"65eff37b\";\n  const APP_KEY = \"013e642e140af7db99a3663be34125e2\";\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [advancedSearch, setAdvancedSearch] = useState(\"\");\n  const [query, setQuery] = useState(\"chicken\");\n  const [isHovered, setIsHovered] = useState(false);\n  const [cards, setCards] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [cardsPerPage, setCardsPerPage] = useState(10);\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n  const [choose, setChoose] = useState(\"\");\n  let indexOfFirstCard = 0;\n  let indexOfLastCard = cardsPerPage;\n  let inputClass = \"search-bar\";\n  let buttonClass = \"search-button\";\n  const [searchRange, setSearchRange] = useState(`&from=${indexOfFirstCard}&to=${indexOfLastCard}`); //use Effect\n\n  useEffect(() => {\n    async function getRecipes() {\n      // get current posts\n      setLoading(true); // || use await for data that doesn't come back instantly\n\n      const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}${searchRange}`);\n      const data = await response.json();\n      setRecipes(data.hits);\n      setCards(data);\n      console.log(data);\n      setLoading(false);\n    }\n\n    getRecipes();\n  }, [query, searchRange]); //executes when detects changes in query or searchRange\n\n  const totalCards = 100; //change page\n\n  const paginate = pageNumber => {\n    setCurrentPage(pageNumber);\n    indexOfLastCard = pageNumber * cardsPerPage;\n    indexOfFirstCard = indexOfLastCard - cardsPerPage;\n    setSearchRange(`&from=${indexOfFirstCard}&to=${indexOfLastCard}`);\n  }; //updates search query string when typing\n\n\n  const updateSearch = e => {\n    setSearch(e.target.value);\n  };\n\n  const getSearch = e => {\n    // || prevent page refresh\n    e.preventDefault();\n\n    if (search.trim() !== \"\") {\n      setQuery(search);\n      setSearch(\"\");\n    }\n  };\n\n  const getAdvancedSearch = e => {\n    if (search.trim() !== \"\") {\n      setQuery(search);\n      setSearch(\"\");\n      setModalIsOpen(false);\n    }\n\n    if (cardsPerPage !== 10) {\n      indexOfLastCard = currentPage * cardsPerPage;\n      indexOfFirstCard = indexOfLastCard - cardsPerPage;\n      setSearchRange(`&from=${indexOfFirstCard}&to=${indexOfLastCard}`);\n    }\n\n    if (choose !== \"\") {\n      console.log(\"advanced:\" + choose);\n    }\n  };\n\n  if (isHovered) {\n    inputClass = \"search-bar-expand search-bar\";\n    buttonClass = \"search-button search-button-expand\";\n  } else {\n    inputClass = \"search-bar\";\n    buttonClass = \"search-button\";\n  }\n\n  const classes = useStyles();\n\n  const handleSliderChange = (event, newValue) => {\n    setCardsPerPage(newValue);\n  };\n\n  const handleInputChange = event => {\n    setCardsPerPage(event.target.value === \"\" ? \"\" : Number(event.target.value));\n    console.log(cardsPerPage);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Nav, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"search-box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 9\n    }\n  }, \"Showing Results for:\"), /*#__PURE__*/React.createElement(\"h4\", {\n    style: {\n      textTransform: \"uppercase\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 9\n    }\n  }, query), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: getSearch,\n    className: \"search-form\",\n    onMouseEnter: () => setIsHovered(true),\n    onMouseLeave: () => setIsHovered(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    className: inputClass,\n    value: search,\n    onChange: updateSearch,\n    placeholder: \"Type to search\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: buttonClass,\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faSearch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(Button, {\n    onClick: () => setModalIsOpen(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 9\n    }\n  }, \"Advanced Search\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"recipes\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 7\n    }\n  }, recipes.map(recipe => /*#__PURE__*/React.createElement(Recipe, {\n    key: recipe.recipe.label + recipe.recipe.calories,\n    title: recipe.recipe.label,\n    calories: recipe.recipe.calories,\n    image: recipe.recipe.image,\n    ingredients: recipe.recipe.ingredients,\n    loading: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(\"footer\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(PaginationFooter, {\n    cardsPerPage: cardsPerPage,\n    totalCards: totalCards,\n    paginate: paginate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Modal, {\n    isOpen: modalIsOpen,\n    onRequestClose: () => setModalIsOpen(false),\n    style: {\n      overlay: {\n        backgroundColor: \"rgba(0,0,0,0.7)\"\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ModalHeader\",\n    style: {\n      display: \"flex\",\n      marginLeft: \"7%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 11\n    }\n  }, \"Advanced Search\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ModalContent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Formik, {\n    initialValues: {\n      search: \"\",\n      cardsPerPage: `${cardsPerPage}`,\n      dishTypes: [\"Bread\", \"Cereals\", \"Condiments and sauces\", \"Drinks\", \"Desserts\", \"Main course\", \"Pancake\", \"Preps\", \"Preserve\", \"Salad\", \"Sandwiches\", \"Side dish\", \"Soup\", \"Starter\", \"Sweets\"],\n      dietLabels: [{\n        name: \"Balanced\",\n        apiName: \"balanced\",\n        description: \"Protein/Fat/Carb values in 15/35/50 ratio\"\n      }, {\n        name: \"High-Fiber\",\n        apiName: \"high-fiber\",\n        description: \"More than 5g fiber per serving\"\n      }, {\n        name: \"High-Protein\",\n        apiName: \"high-protein\",\n        description: \"More than 50% of total calories from proteins\"\n      }, {\n        name: \"Low-Carb\",\n        apiName: \"low-carb\",\n        description: \"Less than 20% of total calories from carbs\"\n      }, {\n        name: \"Low-Fat\",\n        apiName: \"low-fat\",\n        description: \"Less than 15% of total calories from fat\"\n      }, {\n        name: \"Low-Sodium\",\n        apiName: \"low-sodium\",\n        description: \"Less than 140mg Na per serving\"\n      }],\n      cuisineTypes: [\"American\", \"Asian\", \"British\", \"Caribbean\", \"Central Europe\", \"Chinese\", \"Eastern Europe\", \"French\", \"Indian\", \"Italian\", \"Japanese\", \"Kosher\", \"Mediterranean\", \"Mexican\", \"Middle Eastern\", \"Nordic\", \"South American\", \"South East Asian\"],\n      healthLabels: [{\n        name: \"Alcohol-free\",\n        apiName: \"alcohol-free\",\n        description: \"No alcohol used or contained\"\n      }, {\n        name: \"Celery-free\",\n        apiName: \"celery-free\",\n        description: \"does not contain celery or derivatives\"\n      }, {\n        name: \"Crustacean-free\",\n        apiName: \"crustacean-free\",\n        description: \"does not contain crustaceans (shrimp, lobster etc.) or derivatives\"\n      }, {\n        name: \"Dairy\",\n        apiName: \"dairy-free\",\n        description: \"No dairy; no lactose\"\n      }, {\n        name: \"Eggs\",\n        apiName: \"egg-free\",\n        description: \"No eggs or products containing eggs\"\n      }, {\n        name: \"Fish\",\n        apiName: \"fish-free\",\n        description: \"No fish or fish derivatives\"\n      }, {\n        name: \"FODMAP free\",\n        apiName: \"fodmap-free\",\n        description: \"Does not contain FODMAP foods\"\n      }, {\n        name: \"Gluten\",\n        apiName: \"gluten-free\",\n        description: \"No ingredients containing gluten\"\n      }, {\n        name: \"Keto\",\n        apiName: \"keto-friendly\",\n        description: \"Maximum 7 grams of net carbs per serving\"\n      }, {\n        name: \"Kidney friendly\",\n        apiName: \"kidney-friendly\",\n        description: \"per serving – phosphorus less than 250 mg AND potassium less than 500 mg AND sodium: less than 500 mg\"\n      }, {\n        name: \"Kosher\",\n        apiName: \"kosher\",\n        description: \"contains only ingredients allowed by the kosher diet. However it does not guarantee kosher preparation of the ingredients themselves\"\n      }, {\n        name: \"Low potassium\",\n        apiName: \"low-potassium\",\n        description: \"Less than 150mg per serving\"\n      }, {\n        name: \"Lupine-free\",\n        apiName: \"lupine-free\",\n        description: \"does not contain lupine or derivatives\"\n      }, {\n        name: \"Mustard-free\",\n        apiName: \"mustard-free\",\n        description: \"does not contain mustard or derivatives\"\n      }, {\n        name: \"n/a\",\n        apiName: \"low-fat-abs\",\n        description: \"Less than 3g of fat per serving\"\n      }, {\n        name: \"No oil added\",\n        apiName: \"No-oil-added\",\n        description: \"No oil added except to what is contained in the basic ingredients\"\n      }, {\n        name: \"No-sugar\",\n        apiName: \"low-sugar\",\n        description: \"No simple sugars – glucose, dextrose, galactose, fructose, sucrose, lactose, maltose\"\n      }, {\n        name: \"Paleo\",\n        apiName: \"paleo\",\n        description: \"Excludes what are perceived to be agricultural products; grains, legumes, dairy products, potatoes, refined salt, refined sugar, and processed oils\"\n      }, {\n        name: \"Peanuts\",\n        apiName: \"peanut-free\",\n        description: \"No peanuts or products containing peanuts\"\n      }, {\n        name: \"Pescatarian\",\n        apiName: \"pecatarian\",\n        description: \"Does not contain meat or meat based products, can contain dairy and fish\"\n      }, {\n        name: \"Pork-free\",\n        apiName: \"pork-free\",\n        description: \"does not contain pork or derivatives\"\n      }, {\n        name: \"Red meat-free\",\n        apiName: \"red-meat-free\",\n        description: \"does not contain beef, lamb, pork, duck, goose, game, horse, and other types of red meat or products containing red meat.\"\n      }, {\n        name: \"Sesame-free\",\n        apiName: \"sesame-free\",\n        description: \"does not contain sesame seed or derivatives\"\n      }, {\n        name: \"Shellfish\",\n        apiName: \"shellfish-free\",\n        description: \"No shellfish or shellfish derivatives\"\n      }, {\n        name: \"Soy\",\n        apiName: \"soy-free\",\n        description: \"No soy or products containing soy\"\n      }, {\n        name: \"Sugar-conscious\",\n        apiName: \"sugar-conscious\",\n        description: \"Less than 4g of sugar per serving\"\n      }, {\n        name: \"Tree Nuts\",\n        apiName: \"tree-nut-free\",\n        description: \"No tree nuts or products containing tree nuts\"\n      }, {\n        name: \"Vegan\",\n        apiName: \"vegan\",\n        description: \"No meat, poultry, fish, dairy, eggs or honey\"\n      }, {\n        name: \"Vegetarian\",\n        apiName: \"vegetarian\",\n        description: \"No meat, poultry, or fish\"\n      }, {\n        name: \"Wheat-free\",\n        apiName: \"wheat-free\",\n        description: \"No wheat, can have gluten though\"\n      }]\n    } // || validation using yup\n    // validationSchema={validationSchema}\n    ,\n    onSubmit: (data, {\n      setSubmitting,\n      resetForm\n    }) => {\n      setSubmitting(true); // *make async call\n\n      console.log(data.MealType);\n      setChoose(data);\n      getAdvancedSearch();\n      console.log(\"Submit: \", data);\n      setSubmitting(false);\n      resetForm(true);\n    },\n    className: \"advanced-search-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 11\n    }\n  }, ({\n    values,\n    errors,\n    isSubmitting,\n    handleBlur\n  }) => /*#__PURE__*/React.createElement(Form, {\n    style: {\n      margin: \"10px\",\n      marginLeft: \"7%\",\n      marginRight: \"7%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 540,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: \"70%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 543,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 544,\n      columnNumber: 19\n    }\n  }, \"Search: \"), /*#__PURE__*/React.createElement(TextField, {\n    variant: \"outlined\",\n    id: \"search\",\n    label: \"Search\",\n    type: \"search\",\n    placeholder: \"Chicken\",\n    fullWidth: true,\n    onChange: updateSearch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 545,\n      columnNumber: 19\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 556,\n      columnNumber: 17\n    }\n  }, \"Items per Page: \"), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 558,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 9,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 559,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(Slider, {\n    name: \"cardsPerPage\",\n    value: typeof cardsPerPage === \"number\" ? cardsPerPage : 0,\n    onChange: handleSliderChange // defaultValue={cardsPerPage}\n    ,\n    getAriaValueText: valuetext,\n    \"aria-labelledby\": \"item-slider\",\n    valueLabelDisplay: \"auto\",\n    step: 1,\n    min: 10,\n    max: 50,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 560,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 575,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(TextField // defaultValue={cardsPerPage}\n  , {\n    name: \"cardsPerPage\",\n    value: cardsPerPage,\n    onChange: handleInputChange,\n    onBlur: handleBlur,\n    type: \"number\",\n    inputProps: {\n      step: 1,\n      min: 10,\n      max: 50,\n      \"aria-labelledby\": \"item-slider\"\n    },\n    InputLabelProps: {\n      shrink: true\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 576,\n      columnNumber: 21\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 597,\n      columnNumber: 17\n    }\n  }, \"Meal Type: \"), /*#__PURE__*/React.createElement(RadioGroup, {\n    row: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 598,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(MyRadio, {\n    name: \"MealType\",\n    type: \"radio\",\n    value: \"Breakfast\",\n    as: Radio,\n    label: \"Breakfast\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 599,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(MyRadio, {\n    name: \"MealType\",\n    type: \"radio\",\n    value: \"Lunch\",\n    as: Radio,\n    label: \"Lunch\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 606,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(MyRadio, {\n    name: \"MealType\",\n    type: \"radio\",\n    value: \"Dinner\",\n    as: Radio,\n    label: \"Dinner\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 613,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(MyRadio, {\n    name: \"MealType\",\n    type: \"radio\",\n    value: \"Snack\",\n    as: Radio,\n    label: \"Snack\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 620,\n      columnNumber: 19\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 631,\n      columnNumber: 17\n    }\n  }, \"Dish Type: \"), /*#__PURE__*/React.createElement(FieldArray, {\n    name: \"Dish Type\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 632,\n      columnNumber: 17\n    }\n  }, arrayHelpers => values.dishTypes.map(dishType => {\n    return /*#__PURE__*/React.createElement(MyCheckBox, {\n      key: dishType,\n      name: \"dishType\",\n      type: \"checkbox\",\n      value: dishType,\n      as: Checkbox,\n      label: dishType,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 636,\n        columnNumber: 25\n      }\n    });\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 650,\n      columnNumber: 17\n    }\n  }, \"Cuisine Type: \"), /*#__PURE__*/React.createElement(FieldArray, {\n    name: \"CuisineTypes\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 651,\n      columnNumber: 17\n    }\n  }, arrayHelpers => values.cuisineTypes.map(cuisineType => {\n    return /*#__PURE__*/React.createElement(MyRadio, {\n      key: cuisineType,\n      name: \"cuisineType\",\n      type: \"radio\",\n      value: cuisineType,\n      as: Radio,\n      label: cuisineType,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 655,\n        columnNumber: 25\n      }\n    });\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 669,\n      columnNumber: 17\n    }\n  }, \"Diet: \"), /*#__PURE__*/React.createElement(FieldArray, {\n    name: \"Diet\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 670,\n      columnNumber: 17\n    }\n  }, arrayHelpers => values.dietLabels.map(dietLabel => {\n    return /*#__PURE__*/React.createElement(MyRadio, {\n      key: dietLabel.apiName,\n      name: \"dietLabel\",\n      type: \"radio\",\n      value: dietLabel.apiName,\n      as: Radio,\n      label: dietLabel.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 674,\n        columnNumber: 25\n      }\n    });\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 688,\n      columnNumber: 17\n    }\n  }, \"Health: \"), /*#__PURE__*/React.createElement(FieldArray, {\n    row: true,\n    name: \"Health\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 689,\n      columnNumber: 17\n    }\n  }, arrayHelpers => values.healthLabels.map(healthLabel => {\n    return /*#__PURE__*/React.createElement(MyCheckBox, {\n      key: healthLabel.apiName,\n      name: \"healthLabel\",\n      type: \"checkbox\",\n      value: healthLabel.apiName,\n      as: Checkbox,\n      label: healthLabel.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 693,\n        columnNumber: 25\n      }\n    });\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 706,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    disabled: isSubmitting,\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 707,\n      columnNumber: 19\n    }\n  }, \"Submit\")), /*#__PURE__*/React.createElement(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 711,\n      columnNumber: 17\n    }\n  }, JSON.stringify(values, null, 2)), /*#__PURE__*/React.createElement(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 712,\n      columnNumber: 17\n    }\n  }, JSON.stringify(errors, null, 2))))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 717,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: () => setModalIsOpen(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 718,\n      columnNumber: 11\n    }\n  }, \"Close\"))));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/yeungj12/Projects/FrontEnd/ReactJS/frontend014_recipe/src/App.js"],"names":["React","useEffect","useState","Recipe","Nav","PaginationFooter","Modal","Formik","Form","useField","FieldArray","green","withStyles","makeStyles","FontAwesomeIcon","faSearch","TextField","Button","Checkbox","Radio","FormControlLabel","Slider","Grid","RadioGroup","yup","setAppElement","useStyles","theme","root","typography","button","backgroundColor","palette","background","paper","padding","spacing","fontSize","input","width","sliderRoot","formControl","margin","minWidth","popover","pointerEvents","MyRadio","label","props","field","meta","GreenRadio","color","checked","MyCheckBox","GreenCheckbox","validationSchema","object","search","string","required","max","pets","array","of","name","valuetext","value","App","APP_ID","APP_KEY","recipes","setRecipes","setSearch","advancedSearch","setAdvancedSearch","query","setQuery","isHovered","setIsHovered","cards","setCards","loading","setLoading","currentPage","setCurrentPage","cardsPerPage","setCardsPerPage","modalIsOpen","setModalIsOpen","choose","setChoose","indexOfFirstCard","indexOfLastCard","inputClass","buttonClass","searchRange","setSearchRange","getRecipes","response","fetch","data","json","hits","console","log","totalCards","paginate","pageNumber","updateSearch","e","target","getSearch","preventDefault","trim","getAdvancedSearch","classes","handleSliderChange","event","newValue","handleInputChange","Number","textTransform","map","recipe","calories","image","ingredients","overlay","display","marginLeft","dishTypes","dietLabels","apiName","description","cuisineTypes","healthLabels","setSubmitting","resetForm","MealType","values","errors","isSubmitting","handleBlur","marginRight","step","min","shrink","arrayHelpers","dishType","cuisineType","dietLabel","healthLabel","JSON","stringify"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nimport Recipe from \"./Recipe\";\nimport Nav from \"./Nav\";\nimport PaginationFooter from \"./Pagination\";\nimport Modal from \"react-modal\";\nimport \"typeface-roboto\";\nimport { Formik, Form, useField, FieldArray } from \"formik\";\nimport { green } from \"@material-ui/core/colors\";\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\n\nimport \"./App.css\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSearch } from \"@fortawesome/free-solid-svg-icons\";\n\nimport {\n  TextField,\n  Button,\n  Checkbox,\n  Radio,\n  FormControlLabel,\n  Slider,\n  Grid,\n  RadioGroup,\n} from \"@material-ui/core\";\nimport * as yup from \"yup\";\n\nModal.setAppElement(\"#root\");\n\n//use Styles\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    ...theme.typography.button,\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(1),\n    fontSize: \"1.5em\",\n  },\n  input: {\n    width: 42,\n  },\n  sliderRoot: {\n    width: \"50%\",\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 240,\n  },\n  popover: {\n    pointerEvents: \"none\",\n  },\n  paper: {\n    padding: theme.spacing(1),\n  },\n}));\n\n//MyRadio\nconst MyRadio = ({ label, ...props }) => {\n  const [field, meta] = useField(props);\n  return (\n    <FormControlLabel\n      {...props}\n      {...field}\n      control={<GreenRadio />}\n      label={label}\n    />\n  );\n};\n\n//Green Radio\nconst GreenRadio = withStyles({\n  root: {\n    color: green[400],\n    \"&$checked\": {\n      color: green[600],\n    },\n  },\n  checked: {},\n})((props) => <Radio color=\"default\" {...props} />);\n\n//My Checkbox\nconst MyCheckBox = ({ label, ...props }) => {\n  const [field, meta] = useField(props);\n\n  return (\n    <FormControlLabel\n      {...field}\n      {...props}\n      control={<GreenCheckbox />}\n      label={label}\n    />\n  );\n};\n\n//Green Checkbox\nconst GreenCheckbox = withStyles({\n  root: {\n    color: green[400],\n    \"&$checked\": {\n      color: green[600],\n    },\n  },\n  checked: {},\n})((props) => <Checkbox color=\"default\" {...props} />);\n\n//Validation Schema\nconst validationSchema = yup.object({\n  // || passing validation to search using yup\n  search: yup.string().required().max(10),\n  pets: yup.array().of(\n    yup.object({\n      name: yup.string().required(),\n    })\n  ),\n});\n\n//Slider Value Text sync function\nfunction valuetext(value) {\n  return `${value}`;\n}\n\nconst App = () => {\n  const APP_ID = \"65eff37b\";\n  const APP_KEY = \"013e642e140af7db99a3663be34125e2\";\n\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [advancedSearch, setAdvancedSearch] = useState(\"\");\n  const [query, setQuery] = useState(\"chicken\");\n  const [isHovered, setIsHovered] = useState(false);\n  const [cards, setCards] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [cardsPerPage, setCardsPerPage] = useState(10);\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n  const [choose, setChoose] = useState(\"\");\n\n  let indexOfFirstCard = 0;\n  let indexOfLastCard = cardsPerPage;\n  let inputClass = \"search-bar\";\n  let buttonClass = \"search-button\";\n\n  const [searchRange, setSearchRange] = useState(\n    `&from=${indexOfFirstCard}&to=${indexOfLastCard}`\n  );\n\n  //use Effect\n  useEffect(() => {\n    async function getRecipes() {\n      // get current posts\n      setLoading(true);\n      // || use await for data that doesn't come back instantly\n      const response = await fetch(\n        `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}${searchRange}`\n      );\n      const data = await response.json();\n      setRecipes(data.hits);\n      setCards(data);\n      console.log(data);\n      setLoading(false);\n    }\n    getRecipes();\n  }, [query, searchRange]); //executes when detects changes in query or searchRange\n\n  const totalCards = 100;\n\n  //change page\n  const paginate = (pageNumber) => {\n    setCurrentPage(pageNumber);\n    indexOfLastCard = pageNumber * cardsPerPage;\n    indexOfFirstCard = indexOfLastCard - cardsPerPage;\n    setSearchRange(`&from=${indexOfFirstCard}&to=${indexOfLastCard}`);\n  };\n\n  //updates search query string when typing\n  const updateSearch = (e) => {\n    setSearch(e.target.value);\n  };\n\n  const getSearch = (e) => {\n    // || prevent page refresh\n    e.preventDefault();\n    if (search.trim() !== \"\") {\n      setQuery(search);\n      setSearch(\"\");\n    }\n  };\n\n  const getAdvancedSearch = (e) => {\n    if (search.trim() !== \"\") {\n      setQuery(search);\n      setSearch(\"\");\n      setModalIsOpen(false);\n    }\n\n    if (cardsPerPage !== 10) {\n      indexOfLastCard = currentPage * cardsPerPage;\n      indexOfFirstCard = indexOfLastCard - cardsPerPage;\n      setSearchRange(`&from=${indexOfFirstCard}&to=${indexOfLastCard}`);\n    }\n    if (choose !== \"\") {\n      console.log(\"advanced:\" + choose);\n    }\n  };\n\n  if (isHovered) {\n    inputClass = \"search-bar-expand search-bar\";\n    buttonClass = \"search-button search-button-expand\";\n  } else {\n    inputClass = \"search-bar\";\n    buttonClass = \"search-button\";\n  }\n\n  const classes = useStyles();\n\n  const handleSliderChange = (event, newValue) => {\n    setCardsPerPage(newValue);\n  };\n\n  const handleInputChange = (event) => {\n    setCardsPerPage(\n      event.target.value === \"\" ? \"\" : Number(event.target.value)\n    );\n    console.log(cardsPerPage);\n  };\n\n  return (\n    <div className=\"App\">\n      <Nav />\n      <div className=\"search-box\">\n        <p>Showing Results for:</p>\n\n        <h4 style={{ textTransform: \"uppercase\" }}>{query}</h4>\n\n        <form\n          onSubmit={getSearch}\n          className=\"search-form\"\n          onMouseEnter={() => setIsHovered(true)}\n          onMouseLeave={() => setIsHovered(false)}\n        >\n          <input\n            type=\"text\"\n            className={inputClass}\n            value={search}\n            onChange={updateSearch}\n            placeholder=\"Type to search\"\n          />\n          <button className={buttonClass} type=\"submit\">\n            <FontAwesomeIcon icon={faSearch} />\n          </button>\n        </form>\n        <Button onClick={() => setModalIsOpen(true)}>Advanced Search</Button>\n      </div>\n\n      <div className=\"recipes\">\n        {/* // || .map function used for looping arrays */}\n        {recipes.map((recipe) => (\n          <Recipe\n            key={recipe.recipe.label + recipe.recipe.calories}\n            title={recipe.recipe.label}\n            calories={recipe.recipe.calories}\n            image={recipe.recipe.image}\n            ingredients={recipe.recipe.ingredients}\n            loading={loading}\n          />\n        ))}\n      </div>\n      <footer>\n        <PaginationFooter\n          cardsPerPage={cardsPerPage}\n          totalCards={totalCards}\n          paginate={paginate}\n        />\n      </footer>\n\n      <Modal\n        isOpen={modalIsOpen}\n        onRequestClose={() => setModalIsOpen(false)}\n        style={{\n          overlay: { backgroundColor: \"rgba(0,0,0,0.7)\" },\n        }}\n      >\n        <div\n          className=\"ModalHeader\"\n          style={{ display: \"flex\", marginLeft: \"7%\" }}\n        >\n          <h2>Advanced Search</h2>\n        </div>\n\n        <div className=\"ModalContent\">\n          <Formik\n            initialValues={{\n              search: \"\",\n              cardsPerPage: `${cardsPerPage}`,\n              dishTypes: [\n                \"Bread\",\n                \"Cereals\",\n                \"Condiments and sauces\",\n                \"Drinks\",\n                \"Desserts\",\n                \"Main course\",\n                \"Pancake\",\n                \"Preps\",\n                \"Preserve\",\n                \"Salad\",\n                \"Sandwiches\",\n                \"Side dish\",\n                \"Soup\",\n                \"Starter\",\n                \"Sweets\",\n              ],\n              dietLabels: [\n                {\n                  name: \"Balanced\",\n                  apiName: \"balanced\",\n                  description: \"Protein/Fat/Carb values in 15/35/50 ratio\",\n                },\n                {\n                  name: \"High-Fiber\",\n                  apiName: \"high-fiber\",\n                  description: \"More than 5g fiber per serving\",\n                },\n                {\n                  name: \"High-Protein\",\n                  apiName: \"high-protein\",\n                  description: \"More than 50% of total calories from proteins\",\n                },\n                {\n                  name: \"Low-Carb\",\n                  apiName: \"low-carb\",\n                  description: \"Less than 20% of total calories from carbs\",\n                },\n                {\n                  name: \"Low-Fat\",\n                  apiName: \"low-fat\",\n                  description: \"Less than 15% of total calories from fat\",\n                },\n                {\n                  name: \"Low-Sodium\",\n                  apiName: \"low-sodium\",\n                  description: \"Less than 140mg Na per serving\",\n                },\n              ],\n              cuisineTypes: [\n                \"American\",\n                \"Asian\",\n                \"British\",\n                \"Caribbean\",\n                \"Central Europe\",\n                \"Chinese\",\n                \"Eastern Europe\",\n                \"French\",\n                \"Indian\",\n                \"Italian\",\n                \"Japanese\",\n                \"Kosher\",\n                \"Mediterranean\",\n                \"Mexican\",\n                \"Middle Eastern\",\n                \"Nordic\",\n                \"South American\",\n                \"South East Asian\",\n              ],\n              healthLabels: [\n                {\n                  name: \"Alcohol-free\",\n                  apiName: \"alcohol-free\",\n                  description: \"No alcohol used or contained\",\n                },\n                {\n                  name: \"Celery-free\",\n                  apiName: \"celery-free\",\n                  description: \"does not contain celery or derivatives\",\n                },\n                {\n                  name: \"Crustacean-free\",\n                  apiName: \"crustacean-free\",\n                  description:\n                    \"does not contain crustaceans (shrimp, lobster etc.) or derivatives\",\n                },\n                {\n                  name: \"Dairy\",\n                  apiName: \"dairy-free\",\n                  description: \"No dairy; no lactose\",\n                },\n                {\n                  name: \"Eggs\",\n                  apiName: \"egg-free\",\n                  description: \"No eggs or products containing eggs\",\n                },\n                {\n                  name: \"Fish\",\n                  apiName: \"fish-free\",\n                  description: \"No fish or fish derivatives\",\n                },\n                {\n                  name: \"FODMAP free\",\n                  apiName: \"fodmap-free\",\n                  description: \"Does not contain FODMAP foods\",\n                },\n                {\n                  name: \"Gluten\",\n                  apiName: \"gluten-free\",\n                  description: \"No ingredients containing gluten\",\n                },\n                {\n                  name: \"Keto\",\n                  apiName: \"keto-friendly\",\n                  description: \"Maximum 7 grams of net carbs per serving\",\n                },\n                {\n                  name: \"Kidney friendly\",\n                  apiName: \"kidney-friendly\",\n                  description:\n                    \"per serving – phosphorus less than 250 mg AND potassium less than 500 mg AND sodium: less than 500 mg\",\n                },\n                {\n                  name: \"Kosher\",\n                  apiName: \"kosher\",\n                  description:\n                    \"contains only ingredients allowed by the kosher diet. However it does not guarantee kosher preparation of the ingredients themselves\",\n                },\n                {\n                  name: \"Low potassium\",\n                  apiName: \"low-potassium\",\n                  description: \"Less than 150mg per serving\",\n                },\n                {\n                  name: \"Lupine-free\",\n                  apiName: \"lupine-free\",\n                  description: \"does not contain lupine or derivatives\",\n                },\n                {\n                  name: \"Mustard-free\",\n                  apiName: \"mustard-free\",\n                  description: \"does not contain mustard or derivatives\",\n                },\n                {\n                  name: \"n/a\",\n                  apiName: \"low-fat-abs\",\n                  description: \"Less than 3g of fat per serving\",\n                },\n                {\n                  name: \"No oil added\",\n                  apiName: \"No-oil-added\",\n                  description:\n                    \"No oil added except to what is contained in the basic ingredients\",\n                },\n                {\n                  name: \"No-sugar\",\n                  apiName: \"low-sugar\",\n                  description:\n                    \"No simple sugars – glucose, dextrose, galactose, fructose, sucrose, lactose, maltose\",\n                },\n                {\n                  name: \"Paleo\",\n                  apiName: \"paleo\",\n                  description:\n                    \"Excludes what are perceived to be agricultural products; grains, legumes, dairy products, potatoes, refined salt, refined sugar, and processed oils\",\n                },\n                {\n                  name: \"Peanuts\",\n                  apiName: \"peanut-free\",\n                  description: \"No peanuts or products containing peanuts\",\n                },\n                {\n                  name: \"Pescatarian\",\n                  apiName: \"pecatarian\",\n                  description:\n                    \"Does not contain meat or meat based products, can contain dairy and fish\",\n                },\n                {\n                  name: \"Pork-free\",\n                  apiName: \"pork-free\",\n                  description: \"does not contain pork or derivatives\",\n                },\n                {\n                  name: \"Red meat-free\",\n                  apiName: \"red-meat-free\",\n                  description:\n                    \"does not contain beef, lamb, pork, duck, goose, game, horse, and other types of red meat or products containing red meat.\",\n                },\n                {\n                  name: \"Sesame-free\",\n                  apiName: \"sesame-free\",\n                  description: \"does not contain sesame seed or derivatives\",\n                },\n                {\n                  name: \"Shellfish\",\n                  apiName: \"shellfish-free\",\n                  description: \"No shellfish or shellfish derivatives\",\n                },\n                {\n                  name: \"Soy\",\n                  apiName: \"soy-free\",\n                  description: \"No soy or products containing soy\",\n                },\n                {\n                  name: \"Sugar-conscious\",\n                  apiName: \"sugar-conscious\",\n                  description: \"Less than 4g of sugar per serving\",\n                },\n                {\n                  name: \"Tree Nuts\",\n                  apiName: \"tree-nut-free\",\n                  description: \"No tree nuts or products containing tree nuts\",\n                },\n                {\n                  name: \"Vegan\",\n                  apiName: \"vegan\",\n                  description: \"No meat, poultry, fish, dairy, eggs or honey\",\n                },\n                {\n                  name: \"Vegetarian\",\n                  apiName: \"vegetarian\",\n                  description: \"No meat, poultry, or fish\",\n                },\n                {\n                  name: \"Wheat-free\",\n                  apiName: \"wheat-free\",\n                  description: \"No wheat, can have gluten though\",\n                },\n              ],\n            }}\n            // || validation using yup\n            // validationSchema={validationSchema}\n            onSubmit={(data, { setSubmitting, resetForm }) => {\n              setSubmitting(true);\n              // *make async call\n              console.log(data.MealType);\n              setChoose(data);\n              getAdvancedSearch();\n              console.log(\"Submit: \", data);\n              setSubmitting(false);\n              resetForm(true);\n            }}\n            className=\"advanced-search-form\"\n          >\n            {({ values, errors, isSubmitting, handleBlur }) => (\n              <Form\n                style={{ margin: \"10px\", marginLeft: \"7%\", marginRight: \"7%\" }}\n              >\n                <div style={{ width: \"70%\" }}>\n                  <div className={classes.root}>{\"Search: \"}</div>\n                  <TextField\n                    variant=\"outlined\"\n                    id=\"search\"\n                    label=\"Search\"\n                    type=\"search\"\n                    placeholder=\"Chicken\"\n                    fullWidth\n                    onChange={updateSearch}\n                  />\n                </div>\n\n                <div className={classes.root}>{\"Items per Page: \"}</div>\n\n                <Grid container spacing={2} alignItems=\"center\">\n                  <Grid item xs={9}>\n                    <Slider\n                      name=\"cardsPerPage\"\n                      value={\n                        typeof cardsPerPage === \"number\" ? cardsPerPage : 0\n                      }\n                      onChange={handleSliderChange}\n                      // defaultValue={cardsPerPage}\n                      getAriaValueText={valuetext}\n                      aria-labelledby=\"item-slider\"\n                      valueLabelDisplay=\"auto\"\n                      step={1}\n                      min={10}\n                      max={50}\n                    />\n                  </Grid>\n                  <Grid item xs={3}>\n                    <TextField\n                      // defaultValue={cardsPerPage}\n                      name=\"cardsPerPage\"\n                      value={cardsPerPage}\n                      onChange={handleInputChange}\n                      onBlur={handleBlur}\n                      type=\"number\"\n                      inputProps={{\n                        step: 1,\n                        min: 10,\n                        max: 50,\n                        \"aria-labelledby\": \"item-slider\",\n                      }}\n                      InputLabelProps={{\n                        shrink: true,\n                      }}\n                    />\n                  </Grid>\n                </Grid>\n\n                {/* Radio Button starts here */}\n                <div className={classes.root}>{\"Meal Type: \"}</div>\n                <RadioGroup row>\n                  <MyRadio\n                    name=\"MealType\"\n                    type=\"radio\"\n                    value=\"Breakfast\"\n                    as={Radio}\n                    label=\"Breakfast\"\n                  />\n                  <MyRadio\n                    name=\"MealType\"\n                    type=\"radio\"\n                    value=\"Lunch\"\n                    as={Radio}\n                    label=\"Lunch\"\n                  />\n                  <MyRadio\n                    name=\"MealType\"\n                    type=\"radio\"\n                    value=\"Dinner\"\n                    as={Radio}\n                    label=\"Dinner\"\n                  />\n                  <MyRadio\n                    name=\"MealType\"\n                    type=\"radio\"\n                    value=\"Snack\"\n                    as={Radio}\n                    label=\"Snack\"\n                  />\n                </RadioGroup>\n\n                {/* Radio Buttons ends here */}\n                {/* multiple checkboxes starts here */}\n                <div className={classes.root}>{\"Dish Type: \"}</div>\n                <FieldArray name=\"Dish Type\">\n                  {(arrayHelpers) =>\n                    values.dishTypes.map((dishType) => {\n                      return (\n                        <MyCheckBox\n                          key={dishType}\n                          name=\"dishType\"\n                          type=\"checkbox\"\n                          value={dishType}\n                          as={Checkbox}\n                          label={dishType}\n                        />\n                      );\n                    })\n                  }\n                </FieldArray>\n                {/* multiple checkboxes ends here */}\n\n                <div className={classes.root}>{\"Cuisine Type: \"}</div>\n                <FieldArray name=\"CuisineTypes\">\n                  {(arrayHelpers) =>\n                    values.cuisineTypes.map((cuisineType) => {\n                      return (\n                        <MyRadio\n                          key={cuisineType}\n                          name=\"cuisineType\"\n                          type=\"radio\"\n                          value={cuisineType}\n                          as={Radio}\n                          label={cuisineType}\n                        />\n                      );\n                    })\n                  }\n                </FieldArray>\n\n                {/* Radio Button starts here */}\n                <div className={classes.root}>{\"Diet: \"}</div>\n                <FieldArray name=\"Diet\">\n                  {(arrayHelpers) =>\n                    values.dietLabels.map((dietLabel) => {\n                      return (\n                        <MyRadio\n                          key={dietLabel.apiName}\n                          name=\"dietLabel\"\n                          type=\"radio\"\n                          value={dietLabel.apiName}\n                          as={Radio}\n                          label={dietLabel.name}\n                        />\n                      );\n                    })\n                  }\n                </FieldArray>\n                {/* Radio Buttons ends here */}\n\n                <div className={classes.root}>{\"Health: \"}</div>\n                <FieldArray row name=\"Health\">\n                  {(arrayHelpers) =>\n                    values.healthLabels.map((healthLabel) => {\n                      return (\n                        <MyCheckBox\n                          key={healthLabel.apiName}\n                          name=\"healthLabel\"\n                          type=\"checkbox\"\n                          value={healthLabel.apiName}\n                          as={Checkbox}\n                          label={healthLabel.name}\n                        />\n                      );\n                    })\n                  }\n                </FieldArray>\n\n                <div>\n                  <Button disabled={isSubmitting} type=\"submit\">\n                    Submit\n                  </Button>\n                </div>\n                <pre>{JSON.stringify(values, null, 2)}</pre>\n                <pre>{JSON.stringify(errors, null, 2)}</pre>\n              </Form>\n            )}\n          </Formik>\n        </div>\n        <div>\n          <Button onClick={() => setModalIsOpen(false)}>Close</Button>\n        </div>\n      </Modal>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}