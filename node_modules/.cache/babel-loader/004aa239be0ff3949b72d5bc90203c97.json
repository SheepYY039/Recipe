{"ast":null,"code":"var _jsxFileName = \"E:\\\\Projects\\\\FrontEnd\\\\ReactJS\\\\frontend014-recipe\\\\src\\\\FormikForm.js\";\nimport React from \"react\";\nimport \"typeface-roboto\";\nimport { Formik, Field, Form, useField, FieldArray } from \"formik\";\nimport { green } from \"@material-ui/core/colors\";\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { TextField, Button, Checkbox, Radio, FormControlLabel, Select, MenuItem, InputLabel, Slider, Grid, FormControl, Popover, FormGroup, RadioGroup } from \"@material-ui/core\";\nimport * as yup from \"yup\";\n\nconst MyRadio = ({\n  label,\n  ...props\n}) => {\n  const [field, meta] = useField(props);\n  return /*#__PURE__*/React.createElement(FormControlLabel, Object.assign({}, props, field, {\n    control: /*#__PURE__*/React.createElement(GreenRadio, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 16\n      }\n    }),\n    label: label,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }));\n};\n\nconst GreenRadio = withStyles({\n  root: {\n    color: green[400],\n    \"&$checked\": {\n      color: green[600]\n    }\n  },\n  checked: {}\n})(props => /*#__PURE__*/React.createElement(Radio, Object.assign({\n  color: \"default\"\n}, props, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 15\n  }\n})));\n\nconst MyCheckBox = ({\n  label,\n  ...props\n}) => {\n  const [field, meta] = useField(props);\n  return /*#__PURE__*/React.createElement(FormControlLabel, Object.assign({}, field, props, {\n    control: /*#__PURE__*/React.createElement(GreenCheckbox, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 16\n      }\n    }),\n    label: label,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }));\n};\n\nconst GreenCheckbox = withStyles({\n  root: {\n    color: green[400],\n    \"&$checked\": {\n      color: green[600]\n    }\n  },\n  checked: {}\n})(props => /*#__PURE__*/React.createElement(Checkbox, Object.assign({\n  color: \"default\"\n}, props, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 15\n  }\n})));\n\nconst MyTextField = ({\n  id,\n  label,\n  placeholder,\n  ...props\n}) => {\n  const [field, meta] = useField(props);\n  const errorText = meta.error && meta.touched ? meta.error : \"\";\n  return /*#__PURE__*/React.createElement(TextField, Object.assign({}, field, {\n    placeholder: placeholder,\n    helperText: errorText,\n    error: !!errorText,\n    id: \"error\",\n    label: label,\n    type: \"search\",\n    variant: \"outlined\",\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  })) // ! error={!!errorText} casting to boolean, if this string is empty--> false\n  ;\n};\n\nconst validationSchema = yup.object({\n  // || passing validation to search using yup\n  search: yup.string().required().max(10),\n  pets: yup.array().of(yup.object({\n    name: yup.string().required()\n  }))\n});\nconst useStyles = makeStyles(theme => ({\n  root: { ...theme.typography.button,\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(1),\n    fontSize: \"1.5em\"\n  },\n  input: {\n    width: 42\n  },\n  sliderRoot: {\n    width: \"50%\"\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 240\n  },\n  popover: {\n    pointerEvents: \"none\"\n  },\n  paper: {\n    padding: theme.spacing(1)\n  }\n}));\n\nfunction valuetext(value) {\n  return `${value}`;\n}\n\nconst FormikForm = ({\n  selectMealTypes,\n  setSelectMealTypes,\n  selectCuisineTypes,\n  setSelectCuisineTypes\n}) => {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(10);\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const open = Boolean(anchorEl);\n\n  const handlePopoverOpen = event => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handlePopoverClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleSliderChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  const handleInputChange = event => {\n    setValue(event.target.value === \"\" ? \"\" : Number(event.target.value));\n  };\n\n  const handleBlur = () => {\n    if (value < 0) {\n      setValue(0);\n    } else if (value > 50) {\n      setValue(50);\n    }\n  };\n\n  const handleChange = event => {\n    setSelectMealTypes(event.target.value);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Formik, {\n    initialValues: {\n      search: \"\",\n      dishTypes: [\"Bread\", \"Cereals\", \"Condiments and sauces\", \"Drinks\", \"Desserts\", \"Main course\", \"Pancake\", \"Preps\", \"Preserve\", \"Salad\", \"Sandwiches\", \"Side dish\", \"Soup\", \"Starter\", \"Sweets\"],\n      dietLabels: [{\n        name: \"Balanced\",\n        apiName: \"balanced\",\n        description: \"Protein/Fat/Carb values in 15/35/50 ratio\"\n      }, {\n        name: \"High-Fiber\",\n        apiName: \"high-fiber\",\n        description: \"More than 5g fiber per serving\"\n      }, {\n        name: \"High-Protein\",\n        apiName: \"high-protein\",\n        description: \"More than 50% of total calories from proteins\"\n      }, {\n        name: \"Low-Carb\",\n        apiName: \"low-carb\",\n        description: \"Less than 20% of total calories from carbs\"\n      }, {\n        name: \"Low-Fat\",\n        apiName: \"low-fat\",\n        description: \"Less than 15% of total calories from fat\"\n      }, {\n        name: \"Low-Sodium\",\n        apiName: \"low-sodium\",\n        description: \"Less than 140mg Na per serving\"\n      }],\n      cuisineTypes: [\"American\", \"Asian\", \"British\", \"Caribbean\", \"Central Europe\", \"Chinese\", \"Eastern Europe\", \"French\", \"Indian\", \"Italian\", \"Japanese\", \"Kosher\", \"Mediterranean\", \"Mexican\", \"Middle Eastern\", \"Nordic\", \"South American\", \"South East Asian\"],\n      healthLabels: [{\n        name: \"Alcohol-free\",\n        apiName: \"alcohol-free\",\n        description: \"No alcohol used or contained\"\n      }, {\n        name: \"Celery-free\",\n        apiName: \"celery-free\",\n        description: \"does not contain celery or derivatives\"\n      }, {\n        name: \"Crustacean-free\",\n        apiName: \"crustacean-free\",\n        description: \"does not contain crustaceans (shrimp, lobster etc.) or derivatives\"\n      }, {\n        name: \"Dairy\",\n        apiName: \"dairy-free\",\n        description: \"No dairy; no lactose\"\n      }, {\n        name: \"Eggs\",\n        apiName: \"egg-free\",\n        description: \"No eggs or products containing eggs\"\n      }, {\n        name: \"Fish\",\n        apiName: \"fish-free\",\n        description: \"No fish or fish derivatives\"\n      }, {\n        name: \"FODMAP free\",\n        apiName: \"fodmap-free\",\n        description: \"Does not contain FODMAP foods\"\n      }, {\n        name: \"Gluten\",\n        apiName: \"gluten-free\",\n        description: \"No ingredients containing gluten\"\n      }, {\n        name: \"Keto\",\n        apiName: \"keto-friendly\",\n        description: \"Maximum 7 grams of net carbs per serving\"\n      }, {\n        name: \"Kidney friendly\",\n        apiName: \"kidney-friendly\",\n        description: \"per serving – phosphorus less than 250 mg AND potassium less than 500 mg AND sodium: less than 500 mg\"\n      }, {\n        name: \"Kosher\",\n        apiName: \"kosher\",\n        description: \"contains only ingredients allowed by the kosher diet. However it does not guarantee kosher preparation of the ingredients themselves\"\n      }, {\n        name: \"Low potassium\",\n        apiName: \"low-potassium\",\n        description: \"Less than 150mg per serving\"\n      }, {\n        name: \"Lupine-free\",\n        apiName: \"lupine-free\",\n        description: \"does not contain lupine or derivatives\"\n      }, {\n        name: \"Mustard-free\",\n        apiName: \"mustard-free\",\n        description: \"does not contain mustard or derivatives\"\n      }, {\n        name: \"n/a\",\n        apiName: \"low-fat-abs\",\n        description: \"Less than 3g of fat per serving\"\n      }, {\n        name: \"No oil added\",\n        apiName: \"No-oil-added\",\n        description: \"No oil added except to what is contained in the basic ingredients\"\n      }, {\n        name: \"No-sugar\",\n        apiName: \"low-sugar\",\n        description: \"No simple sugars – glucose, dextrose, galactose, fructose, sucrose, lactose, maltose\"\n      }, {\n        name: \"Paleo\",\n        apiName: \"paleo\",\n        description: \"Excludes what are perceived to be agricultural products; grains, legumes, dairy products, potatoes, refined salt, refined sugar, and processed oils\"\n      }, {\n        name: \"Peanuts\",\n        apiName: \"peanut-free\",\n        description: \"No peanuts or products containing peanuts\"\n      }, {\n        name: \"Pescatarian\",\n        apiName: \"pecatarian\",\n        description: \"Does not contain meat or meat based products, can contain dairy and fish\"\n      }, {\n        name: \"Pork-free\",\n        apiName: \"pork-free\",\n        description: \"does not contain pork or derivatives\"\n      }, {\n        name: \"Red meat-free\",\n        apiName: \"red-meat-free\",\n        description: \"does not contain beef, lamb, pork, duck, goose, game, horse, and other types of red meat or products containing red meat.\"\n      }, {\n        name: \"Sesame-free\",\n        apiName: \"sesame-free\",\n        description: \"does not contain sesame seed or derivatives\"\n      }, {\n        name: \"Shellfish\",\n        apiName: \"shellfish-free\",\n        description: \"No shellfish or shellfish derivatives\"\n      }, {\n        name: \"Soy\",\n        apiName: \"soy-free\",\n        description: \"No soy or products containing soy\"\n      }, {\n        name: \"Sugar-conscious\",\n        apiName: \"sugar-conscious\",\n        description: \"Less than 4g of sugar per serving\"\n      }, {\n        name: \"Tree Nuts\",\n        apiName: \"tree-nut-free\",\n        description: \"No tree nuts or products containing tree nuts\"\n      }, {\n        name: \"Vegan\",\n        apiName: \"vegan\",\n        description: \"No meat, poultry, fish, dairy, eggs or honey\"\n      }, {\n        name: \"Vegetarian\",\n        apiName: \"vegetarian\",\n        description: \"No meat, poultry, or fish\"\n      }, {\n        name: \"Wheat-free\",\n        apiName: \"wheat-free\",\n        description: \"No wheat, can have gluten though\"\n      }]\n    } // || validation using yup\n    ,\n    validationSchema: validationSchema,\n    onSubmit: (data, {\n      setSubmitting,\n      resetForm\n    }) => {\n      setSubmitting(true); // *make async call\n\n      console.log(\"Submit: \", data);\n      setSubmitting(false);\n      resetForm(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }\n  }, ({\n    values,\n    errors,\n    isSubmitting,\n    handleBlur\n  }) => /*#__PURE__*/React.createElement(Form, {\n    style: {\n      margin: \"10px\",\n      marginLeft: \"7%\",\n      marginRight: \"7%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 414,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: \"70%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 415,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 416,\n      columnNumber: 15\n    }\n  }, \"Search: \"), /*#__PURE__*/React.createElement(TextField, {\n    variant: \"outlined\",\n    id: \"search\",\n    label: \"Search\",\n    type: \"search\",\n    placeholder: \"Chicken\",\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 417,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 427,\n      columnNumber: 13\n    }\n  }, \"Items per Page: \"), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 429,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 9,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 430,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Slider, {\n    value: typeof value === \"number\" ? value : 0,\n    onChange: handleSliderChange,\n    defaultValue: 10,\n    getAriaValueText: valuetext,\n    \"aria-labelledby\": \"item-slider\",\n    valueLabelDisplay: \"auto\",\n    step: 1,\n    min: 10,\n    max: 50,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 431,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 443,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    defaultValue: \"10\",\n    value: value,\n    onChange: handleInputChange,\n    onBlur: handleBlur,\n    type: \"number\",\n    inputProps: {\n      step: 5,\n      min: 10,\n      max: 50,\n      \"aria-labelledby\": \"item-slider\"\n    },\n    InputLabelProps: {\n      shrink: true\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 444,\n      columnNumber: 17\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 463,\n      columnNumber: 13\n    }\n  }, \"Meal Type: \"), /*#__PURE__*/React.createElement(FormControl, {\n    className: classes.formControl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 464,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    id: \"MealTypeLabel\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 465,\n      columnNumber: 15\n    }\n  }, \"Meal Type\"), /*#__PURE__*/React.createElement(Select, {\n    labelId: \"MealTypeSelectLabel\",\n    id: \"MealTypeSelect\",\n    value: selectMealTypes,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 466,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"breakfast\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 472,\n      columnNumber: 17\n    }\n  }, \"Breakfast\"), /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"lunch\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 473,\n      columnNumber: 17\n    }\n  }, \"Lunch\"), /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"dinner\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 474,\n      columnNumber: 17\n    }\n  }, \"Dinner\"), /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"snack\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 475,\n      columnNumber: 17\n    }\n  }, \"Snack\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 480,\n      columnNumber: 13\n    }\n  }, \"Meal Type: \"), /*#__PURE__*/React.createElement(FormControl, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 482,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(MyRadio, {\n    name: \"MealType\",\n    type: \"radio\",\n    value: \"Breakfast\",\n    as: Radio,\n    label: \"Breakfast\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 483,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(MyRadio, {\n    name: \"MealType\",\n    type: \"radio\",\n    value: \"Lunch\",\n    as: Radio,\n    label: \"Lunch\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 490,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(MyRadio, {\n    name: \"MealType\",\n    type: \"radio\",\n    value: \"Dinner\",\n    as: Radio,\n    label: \"Dinner\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 497,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 508,\n      columnNumber: 13\n    }\n  }, \"Dish Type: \"), /*#__PURE__*/React.createElement(FieldArray, {\n    name: \"Dish Type\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 509,\n      columnNumber: 13\n    }\n  }, arrayHelpers => values.dishTypes.map(dishType => {\n    return /*#__PURE__*/React.createElement(MyCheckBox, {\n      key: dishType,\n      name: \"dishType\",\n      type: \"checkbox\",\n      value: dishType,\n      as: Checkbox,\n      label: dishType,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 513,\n        columnNumber: 21\n      }\n    });\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 527,\n      columnNumber: 13\n    }\n  }, \"Cuisine Type: \"), /*#__PURE__*/React.createElement(FieldArray, {\n    name: \"CuisineTypes\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 528,\n      columnNumber: 13\n    }\n  }, arrayHelpers => values.cuisineTypes.map(cuisineType => {\n    return /*#__PURE__*/React.createElement(MyRadio, {\n      key: cuisineType,\n      name: \"cuisineType\",\n      type: \"radio\",\n      value: cuisineType,\n      as: Radio,\n      label: cuisineType,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 532,\n        columnNumber: 21\n      }\n    });\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 546,\n      columnNumber: 13\n    }\n  }, \"Diet: \"), /*#__PURE__*/React.createElement(FieldArray, {\n    name: \"Diet\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 547,\n      columnNumber: 13\n    }\n  }, arrayHelpers => values.dietLabels.map(dietLabel => {\n    return /*#__PURE__*/React.createElement(MyRadio, {\n      name: \"dietLabel\",\n      type: \"radio\",\n      value: dietLabel.apiName,\n      as: Radio,\n      label: dietLabel.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 551,\n        columnNumber: 21\n      }\n    });\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 564,\n      columnNumber: 13\n    }\n  }, \"Health: \"), /*#__PURE__*/React.createElement(FieldArray, {\n    row: true,\n    name: \"Health\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 565,\n      columnNumber: 13\n    }\n  }, arrayHelpers => values.healthLabels.map(healthLabel => {\n    return /*#__PURE__*/React.createElement(MyCheckBox, {\n      name: \"healthLabel\",\n      type: \"checkbox\",\n      value: healthLabel.apiName,\n      as: Checkbox,\n      label: healthLabel.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 569,\n        columnNumber: 21\n      }\n    });\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 581,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    disabled: isSubmitting,\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 582,\n      columnNumber: 15\n    }\n  }, \"Submit\")), /*#__PURE__*/React.createElement(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 586,\n      columnNumber: 13\n    }\n  }, JSON.stringify(values, null, 2)), /*#__PURE__*/React.createElement(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 587,\n      columnNumber: 13\n    }\n  }, JSON.stringify(errors, null, 2)))));\n};\n\nexport default FormikForm;","map":{"version":3,"sources":["E:/Projects/FrontEnd/ReactJS/frontend014-recipe/src/FormikForm.js"],"names":["React","Formik","Field","Form","useField","FieldArray","green","withStyles","makeStyles","Typography","TextField","Button","Checkbox","Radio","FormControlLabel","Select","MenuItem","InputLabel","Slider","Grid","FormControl","Popover","FormGroup","RadioGroup","yup","MyRadio","label","props","field","meta","GreenRadio","root","color","checked","MyCheckBox","GreenCheckbox","MyTextField","id","placeholder","errorText","error","touched","validationSchema","object","search","string","required","max","pets","array","of","name","useStyles","theme","typography","button","backgroundColor","palette","background","paper","padding","spacing","fontSize","input","width","sliderRoot","formControl","margin","minWidth","popover","pointerEvents","valuetext","value","FormikForm","selectMealTypes","setSelectMealTypes","selectCuisineTypes","setSelectCuisineTypes","classes","setValue","useState","anchorEl","setAnchorEl","open","Boolean","handlePopoverOpen","event","currentTarget","handlePopoverClose","handleSliderChange","newValue","handleInputChange","target","Number","handleBlur","handleChange","dishTypes","dietLabels","apiName","description","cuisineTypes","healthLabels","data","setSubmitting","resetForm","console","log","values","errors","isSubmitting","marginLeft","marginRight","step","min","shrink","arrayHelpers","map","dishType","cuisineType","dietLabel","healthLabel","JSON","stringify"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport \"typeface-roboto\";\r\nimport { Formik, Field, Form, useField, FieldArray } from \"formik\";\r\nimport { green } from \"@material-ui/core/colors\";\r\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nimport {\r\n  TextField,\r\n  Button,\r\n  Checkbox,\r\n  Radio,\r\n  FormControlLabel,\r\n  Select,\r\n  MenuItem,\r\n  InputLabel,\r\n  Slider,\r\n  Grid,\r\n  FormControl,\r\n  Popover,\r\n  FormGroup,\r\n  RadioGroup,\r\n} from \"@material-ui/core\";\r\nimport * as yup from \"yup\";\r\n\r\nconst MyRadio = ({ label, ...props }) => {\r\n  const [field, meta] = useField(props);\r\n  return (\r\n    <FormControlLabel\r\n      {...props}\r\n      {...field}\r\n      control={<GreenRadio />}\r\n      label={label}\r\n    />\r\n  );\r\n};\r\nconst GreenRadio = withStyles({\r\n  root: {\r\n    color: green[400],\r\n    \"&$checked\": {\r\n      color: green[600],\r\n    },\r\n  },\r\n  checked: {},\r\n})((props) => <Radio color=\"default\" {...props} />);\r\n\r\nconst MyCheckBox = ({ label, ...props }) => {\r\n  const [field, meta] = useField(props);\r\n\r\n  return (\r\n    <FormControlLabel\r\n      {...field}\r\n      {...props}\r\n      control={<GreenCheckbox />}\r\n      label={label}\r\n    />\r\n  );\r\n};\r\n\r\nconst GreenCheckbox = withStyles({\r\n  root: {\r\n    color: green[400],\r\n    \"&$checked\": {\r\n      color: green[600],\r\n    },\r\n  },\r\n  checked: {},\r\n})((props) => <Checkbox color=\"default\" {...props} />);\r\n\r\nconst MyTextField = ({ id, label, placeholder, ...props }) => {\r\n  const [field, meta] = useField(props);\r\n  const errorText = meta.error && meta.touched ? meta.error : \"\";\r\n  return (\r\n    <TextField\r\n      {...field}\r\n      placeholder={placeholder}\r\n      helperText={errorText}\r\n      error={!!errorText}\r\n      id=\"error\"\r\n      label={label}\r\n      type=\"search\"\r\n      variant=\"outlined\"\r\n      fullWidth\r\n    />\r\n    // ! error={!!errorText} casting to boolean, if this string is empty--> false\r\n  );\r\n};\r\n\r\nconst validationSchema = yup.object({\r\n  // || passing validation to search using yup\r\n  search: yup.string().required().max(10),\r\n  pets: yup.array().of(\r\n    yup.object({\r\n      name: yup.string().required(),\r\n    })\r\n  ),\r\n});\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    ...theme.typography.button,\r\n    backgroundColor: theme.palette.background.paper,\r\n    padding: theme.spacing(1),\r\n    fontSize: \"1.5em\",\r\n  },\r\n  input: {\r\n    width: 42,\r\n  },\r\n  sliderRoot: {\r\n    width: \"50%\",\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 240,\r\n  },\r\n  popover: {\r\n    pointerEvents: \"none\",\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nfunction valuetext(value) {\r\n  return `${value}`;\r\n}\r\n\r\nconst FormikForm = ({\r\n  selectMealTypes,\r\n  setSelectMealTypes,\r\n  selectCuisineTypes,\r\n  setSelectCuisineTypes,\r\n}) => {\r\n  const classes = useStyles();\r\n\r\n  const [value, setValue] = React.useState(10);\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n\r\n  const open = Boolean(anchorEl);\r\n\r\n  const handlePopoverOpen = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handlePopoverClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const handleSliderChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  const handleInputChange = (event) => {\r\n    setValue(event.target.value === \"\" ? \"\" : Number(event.target.value));\r\n  };\r\n\r\n  const handleBlur = () => {\r\n    if (value < 0) {\r\n      setValue(0);\r\n    } else if (value > 50) {\r\n      setValue(50);\r\n    }\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    setSelectMealTypes(event.target.value);\r\n  };\r\n  return (\r\n    <div>\r\n      <Formik\r\n        initialValues={{\r\n          search: \"\",\r\n          dishTypes: [\r\n            \"Bread\",\r\n            \"Cereals\",\r\n            \"Condiments and sauces\",\r\n            \"Drinks\",\r\n            \"Desserts\",\r\n            \"Main course\",\r\n            \"Pancake\",\r\n            \"Preps\",\r\n            \"Preserve\",\r\n            \"Salad\",\r\n            \"Sandwiches\",\r\n            \"Side dish\",\r\n            \"Soup\",\r\n            \"Starter\",\r\n            \"Sweets\",\r\n          ],\r\n          dietLabels: [\r\n            {\r\n              name: \"Balanced\",\r\n              apiName: \"balanced\",\r\n              description: \"Protein/Fat/Carb values in 15/35/50 ratio\",\r\n            },\r\n            {\r\n              name: \"High-Fiber\",\r\n              apiName: \"high-fiber\",\r\n              description: \"More than 5g fiber per serving\",\r\n            },\r\n            {\r\n              name: \"High-Protein\",\r\n              apiName: \"high-protein\",\r\n              description: \"More than 50% of total calories from proteins\",\r\n            },\r\n            {\r\n              name: \"Low-Carb\",\r\n              apiName: \"low-carb\",\r\n              description: \"Less than 20% of total calories from carbs\",\r\n            },\r\n            {\r\n              name: \"Low-Fat\",\r\n              apiName: \"low-fat\",\r\n              description: \"Less than 15% of total calories from fat\",\r\n            },\r\n            {\r\n              name: \"Low-Sodium\",\r\n              apiName: \"low-sodium\",\r\n              description: \"Less than 140mg Na per serving\",\r\n            },\r\n          ],\r\n          cuisineTypes: [\r\n            \"American\",\r\n            \"Asian\",\r\n            \"British\",\r\n            \"Caribbean\",\r\n            \"Central Europe\",\r\n            \"Chinese\",\r\n            \"Eastern Europe\",\r\n            \"French\",\r\n            \"Indian\",\r\n            \"Italian\",\r\n            \"Japanese\",\r\n            \"Kosher\",\r\n            \"Mediterranean\",\r\n            \"Mexican\",\r\n            \"Middle Eastern\",\r\n            \"Nordic\",\r\n            \"South American\",\r\n            \"South East Asian\",\r\n          ],\r\n          healthLabels: [\r\n            {\r\n              name: \"Alcohol-free\",\r\n              apiName: \"alcohol-free\",\r\n              description: \"No alcohol used or contained\",\r\n            },\r\n            {\r\n              name: \"Celery-free\",\r\n              apiName: \"celery-free\",\r\n              description: \"does not contain celery or derivatives\",\r\n            },\r\n            {\r\n              name: \"Crustacean-free\",\r\n              apiName: \"crustacean-free\",\r\n              description:\r\n                \"does not contain crustaceans (shrimp, lobster etc.) or derivatives\",\r\n            },\r\n            {\r\n              name: \"Dairy\",\r\n              apiName: \"dairy-free\",\r\n              description: \"No dairy; no lactose\",\r\n            },\r\n            {\r\n              name: \"Eggs\",\r\n              apiName: \"egg-free\",\r\n              description: \"No eggs or products containing eggs\",\r\n            },\r\n            {\r\n              name: \"Fish\",\r\n              apiName: \"fish-free\",\r\n              description: \"No fish or fish derivatives\",\r\n            },\r\n            {\r\n              name: \"FODMAP free\",\r\n              apiName: \"fodmap-free\",\r\n              description: \"Does not contain FODMAP foods\",\r\n            },\r\n            {\r\n              name: \"Gluten\",\r\n              apiName: \"gluten-free\",\r\n              description: \"No ingredients containing gluten\",\r\n            },\r\n            {\r\n              name: \"Keto\",\r\n              apiName: \"keto-friendly\",\r\n              description: \"Maximum 7 grams of net carbs per serving\",\r\n            },\r\n            {\r\n              name: \"Kidney friendly\",\r\n              apiName: \"kidney-friendly\",\r\n              description:\r\n                \"per serving – phosphorus less than 250 mg AND potassium less than 500 mg AND sodium: less than 500 mg\",\r\n            },\r\n            {\r\n              name: \"Kosher\",\r\n              apiName: \"kosher\",\r\n              description:\r\n                \"contains only ingredients allowed by the kosher diet. However it does not guarantee kosher preparation of the ingredients themselves\",\r\n            },\r\n            {\r\n              name: \"Low potassium\",\r\n              apiName: \"low-potassium\",\r\n              description: \"Less than 150mg per serving\",\r\n            },\r\n            {\r\n              name: \"Lupine-free\",\r\n              apiName: \"lupine-free\",\r\n              description: \"does not contain lupine or derivatives\",\r\n            },\r\n            {\r\n              name: \"Mustard-free\",\r\n              apiName: \"mustard-free\",\r\n              description: \"does not contain mustard or derivatives\",\r\n            },\r\n            {\r\n              name: \"n/a\",\r\n              apiName: \"low-fat-abs\",\r\n              description: \"Less than 3g of fat per serving\",\r\n            },\r\n            {\r\n              name: \"No oil added\",\r\n              apiName: \"No-oil-added\",\r\n              description:\r\n                \"No oil added except to what is contained in the basic ingredients\",\r\n            },\r\n            {\r\n              name: \"No-sugar\",\r\n              apiName: \"low-sugar\",\r\n              description:\r\n                \"No simple sugars – glucose, dextrose, galactose, fructose, sucrose, lactose, maltose\",\r\n            },\r\n            {\r\n              name: \"Paleo\",\r\n              apiName: \"paleo\",\r\n              description:\r\n                \"Excludes what are perceived to be agricultural products; grains, legumes, dairy products, potatoes, refined salt, refined sugar, and processed oils\",\r\n            },\r\n            {\r\n              name: \"Peanuts\",\r\n              apiName: \"peanut-free\",\r\n              description: \"No peanuts or products containing peanuts\",\r\n            },\r\n            {\r\n              name: \"Pescatarian\",\r\n              apiName: \"pecatarian\",\r\n              description:\r\n                \"Does not contain meat or meat based products, can contain dairy and fish\",\r\n            },\r\n            {\r\n              name: \"Pork-free\",\r\n              apiName: \"pork-free\",\r\n              description: \"does not contain pork or derivatives\",\r\n            },\r\n            {\r\n              name: \"Red meat-free\",\r\n              apiName: \"red-meat-free\",\r\n              description:\r\n                \"does not contain beef, lamb, pork, duck, goose, game, horse, and other types of red meat or products containing red meat.\",\r\n            },\r\n            {\r\n              name: \"Sesame-free\",\r\n              apiName: \"sesame-free\",\r\n              description: \"does not contain sesame seed or derivatives\",\r\n            },\r\n            {\r\n              name: \"Shellfish\",\r\n              apiName: \"shellfish-free\",\r\n              description: \"No shellfish or shellfish derivatives\",\r\n            },\r\n            {\r\n              name: \"Soy\",\r\n              apiName: \"soy-free\",\r\n              description: \"No soy or products containing soy\",\r\n            },\r\n            {\r\n              name: \"Sugar-conscious\",\r\n              apiName: \"sugar-conscious\",\r\n              description: \"Less than 4g of sugar per serving\",\r\n            },\r\n            {\r\n              name: \"Tree Nuts\",\r\n              apiName: \"tree-nut-free\",\r\n              description: \"No tree nuts or products containing tree nuts\",\r\n            },\r\n            {\r\n              name: \"Vegan\",\r\n              apiName: \"vegan\",\r\n              description: \"No meat, poultry, fish, dairy, eggs or honey\",\r\n            },\r\n            {\r\n              name: \"Vegetarian\",\r\n              apiName: \"vegetarian\",\r\n              description: \"No meat, poultry, or fish\",\r\n            },\r\n            {\r\n              name: \"Wheat-free\",\r\n              apiName: \"wheat-free\",\r\n              description: \"No wheat, can have gluten though\",\r\n            },\r\n          ],\r\n        }}\r\n        // || validation using yup\r\n        validationSchema={validationSchema}\r\n        onSubmit={(data, { setSubmitting, resetForm }) => {\r\n          setSubmitting(true);\r\n          // *make async call\r\n          console.log(\"Submit: \", data);\r\n          setSubmitting(false);\r\n          resetForm(true);\r\n        }}\r\n      >\r\n        {({ values, errors, isSubmitting, handleBlur }) => (\r\n          <Form style={{ margin: \"10px\", marginLeft: \"7%\", marginRight: \"7%\" }}>\r\n            <div style={{ width: \"70%\" }}>\r\n              <div className={classes.root}>{\"Search: \"}</div>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                id=\"search\"\r\n                label=\"Search\"\r\n                type=\"search\"\r\n                placeholder=\"Chicken\"\r\n                fullWidth\r\n              />\r\n            </div>\r\n\r\n            <div className={classes.root}>{\"Items per Page: \"}</div>\r\n\r\n            <Grid container spacing={2} alignItems=\"center\">\r\n              <Grid item xs={9}>\r\n                <Slider\r\n                  value={typeof value === \"number\" ? value : 0}\r\n                  onChange={handleSliderChange}\r\n                  defaultValue={10}\r\n                  getAriaValueText={valuetext}\r\n                  aria-labelledby=\"item-slider\"\r\n                  valueLabelDisplay=\"auto\"\r\n                  step={1}\r\n                  min={10}\r\n                  max={50}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={3}>\r\n                <TextField\r\n                  defaultValue=\"10\"\r\n                  value={value}\r\n                  onChange={handleInputChange}\r\n                  onBlur={handleBlur}\r\n                  type=\"number\"\r\n                  inputProps={{\r\n                    step: 5,\r\n                    min: 10,\r\n                    max: 50,\r\n                    \"aria-labelledby\": \"item-slider\",\r\n                  }}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n\r\n            <div className={classes.root}>{\"Meal Type: \"}</div>\r\n            <FormControl className={classes.formControl}>\r\n              <InputLabel id=\"MealTypeLabel\">Meal Type</InputLabel>\r\n              <Select\r\n                labelId=\"MealTypeSelectLabel\"\r\n                id=\"MealTypeSelect\"\r\n                value={selectMealTypes}\r\n                onChange={handleChange}\r\n              >\r\n                <MenuItem value=\"breakfast\">Breakfast</MenuItem>\r\n                <MenuItem value=\"lunch\">Lunch</MenuItem>\r\n                <MenuItem value=\"dinner\">Dinner</MenuItem>\r\n                <MenuItem value=\"snack\">Snack</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n\r\n            {/* Radio Button starts here */}\r\n            <div className={classes.root}>{\"Meal Type: \"}</div>\r\n\r\n            <FormControl>\r\n              <MyRadio\r\n                name=\"MealType\"\r\n                type=\"radio\"\r\n                value=\"Breakfast\"\r\n                as={Radio}\r\n                label=\"Breakfast\"\r\n              />\r\n              <MyRadio\r\n                name=\"MealType\"\r\n                type=\"radio\"\r\n                value=\"Lunch\"\r\n                as={Radio}\r\n                label=\"Lunch\"\r\n              />\r\n              <MyRadio\r\n                name=\"MealType\"\r\n                type=\"radio\"\r\n                value=\"Dinner\"\r\n                as={Radio}\r\n                label=\"Dinner\"\r\n              />\r\n            </FormControl>\r\n\r\n            {/* Radio Buttons ends here */}\r\n            {/* multiple checkboxes starts here */}\r\n            <div className={classes.root}>{\"Dish Type: \"}</div>\r\n            <FieldArray name=\"Dish Type\">\r\n              {(arrayHelpers) =>\r\n                values.dishTypes.map((dishType) => {\r\n                  return (\r\n                    <MyCheckBox\r\n                      key={dishType}\r\n                      name=\"dishType\"\r\n                      type=\"checkbox\"\r\n                      value={dishType}\r\n                      as={Checkbox}\r\n                      label={dishType}\r\n                    />\r\n                  );\r\n                })\r\n              }\r\n            </FieldArray>\r\n            {/* multiple checkboxes ends here */}\r\n\r\n            <div className={classes.root}>{\"Cuisine Type: \"}</div>\r\n            <FieldArray name=\"CuisineTypes\">\r\n              {(arrayHelpers) =>\r\n                values.cuisineTypes.map((cuisineType) => {\r\n                  return (\r\n                    <MyRadio\r\n                      key={cuisineType}\r\n                      name=\"cuisineType\"\r\n                      type=\"radio\"\r\n                      value={cuisineType}\r\n                      as={Radio}\r\n                      label={cuisineType}\r\n                    />\r\n                  );\r\n                })\r\n              }\r\n            </FieldArray>\r\n\r\n            {/* Radio Button starts here */}\r\n            <div className={classes.root}>{\"Diet: \"}</div>\r\n            <FieldArray name=\"Diet\">\r\n              {(arrayHelpers) =>\r\n                values.dietLabels.map((dietLabel) => {\r\n                  return (\r\n                    <MyRadio\r\n                      name=\"dietLabel\"\r\n                      type=\"radio\"\r\n                      value={dietLabel.apiName}\r\n                      as={Radio}\r\n                      label={dietLabel.name}\r\n                    />\r\n                  );\r\n                })\r\n              }\r\n            </FieldArray>\r\n            {/* Radio Buttons ends here */}\r\n\r\n            <div className={classes.root}>{\"Health: \"}</div>\r\n            <FieldArray row name=\"Health\">\r\n              {(arrayHelpers) =>\r\n                values.healthLabels.map((healthLabel) => {\r\n                  return (\r\n                    <MyCheckBox\r\n                      name=\"healthLabel\"\r\n                      type=\"checkbox\"\r\n                      value={healthLabel.apiName}\r\n                      as={Checkbox}\r\n                      label={healthLabel.name}\r\n                    />\r\n                  );\r\n                })\r\n              }\r\n            </FieldArray>\r\n\r\n            <div>\r\n              <Button disabled={isSubmitting} type=\"submit\">\r\n                Submit\r\n              </Button>\r\n            </div>\r\n            <pre>{JSON.stringify(values, null, 2)}</pre>\r\n            <pre>{JSON.stringify(errors, null, 2)}</pre>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FormikForm;\r\n"]},"metadata":{},"sourceType":"module"}