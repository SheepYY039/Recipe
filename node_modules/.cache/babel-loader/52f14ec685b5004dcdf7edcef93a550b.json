{"ast":null,"code":"var _jsxFileName = \"/Users/yeungj12/Projects/FrontEnd/ReactJS/frontend014_recipe/src/Modal.js\";\nimport React, { useEffect, useState } from \"react\";\nimport Modal from \"react-modal\";\nimport * as yup from \"yup\";\nimport { Formik, Form, useField, FieldArray } from \"formik\";\nModal.setAppElement(\"#root\");\n\nconst AdvancedSearchModal = () => {\n  //MyRadio\n  const MyRadio = ({\n    label,\n    ...props\n  }) => {\n    const [field, meta] = useField(props);\n    return /*#__PURE__*/React.createElement(FormControlLabel, Object.assign({}, props, field, {\n      control: /*#__PURE__*/React.createElement(GreenRadio, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 18\n        }\n      }),\n      label: label,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 7\n      }\n    }));\n  }; //Green Radio\n\n\n  const GreenRadio = withStyles({\n    root: {\n      color: green[400],\n      \"&$checked\": {\n        color: green[600]\n      }\n    },\n    checked: {}\n  })(props => /*#__PURE__*/React.createElement(Radio, Object.assign({\n    color: \"default\"\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 17\n    }\n  }))); //My Checkbox\n\n  const MyCheckBox = ({\n    label,\n    ...props\n  }) => {\n    const [field, meta] = useField(props);\n    return /*#__PURE__*/React.createElement(FormControlLabel, Object.assign({}, field, props, {\n      control: /*#__PURE__*/React.createElement(GreenCheckbox, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 18\n        }\n      }),\n      label: label,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 7\n      }\n    }));\n  }; //Green Checkbox\n\n\n  const GreenCheckbox = withStyles({\n    root: {\n      color: green[400],\n      \"&$checked\": {\n        color: green[600]\n      }\n    },\n    checked: {}\n  })(props => /*#__PURE__*/React.createElement(Checkbox, Object.assign({\n    color: \"default\"\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }\n  }))); //Validation Schema\n\n  const validationSchema = yup.object({\n    // || passing validation to search using yup\n    search: yup.string().required().max(10),\n    pets: yup.array().of(yup.object({\n      name: yup.string().required()\n    }))\n  });\n\n  const getAdvancedSearch = e => {\n    if (search.trim() !== \"\") {\n      setQuery(search);\n      setSearch(\"\");\n      setModalIsOpen(false);\n    }\n\n    if (cardsPerPage !== 10) {\n      indexOfLastCard = currentPage * cardsPerPage;\n      indexOfFirstCard = indexOfLastCard - cardsPerPage;\n      setSearchRange(`&from=${indexOfFirstCard}&to=${indexOfLastCard}`);\n    }\n\n    console.log(\"advanced:\" + choose);\n  };\n\n  return /*#__PURE__*/React.createElement(Modal, {\n    isOpen: modalIsOpen,\n    onRequestClose: () => setModalIsOpen(false),\n    style: {\n      overlay: {\n        backgroundColor: \"rgba(0,0,0,0.7)\"\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ModalHeader\",\n    style: {\n      display: \"flex\",\n      marginLeft: \"7%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, \"Advanced Search\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ModalContent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Formik, {\n    initialValues: {\n      search: \"\",\n      cardsPerPage: `${cardsPerPage}`,\n      dishTypes: [\"Bread\", \"Cereals\", \"Condiments and sauces\", \"Drinks\", \"Desserts\", \"Main course\", \"Pancake\", \"Preps\", \"Preserve\", \"Salad\", \"Sandwiches\", \"Side dish\", \"Soup\", \"Starter\", \"Sweets\"],\n      dietLabels: [{\n        name: \"Balanced\",\n        apiName: \"balanced\",\n        description: \"Protein/Fat/Carb values in 15/35/50 ratio\"\n      }, {\n        name: \"High-Fiber\",\n        apiName: \"high-fiber\",\n        description: \"More than 5g fiber per serving\"\n      }, {\n        name: \"High-Protein\",\n        apiName: \"high-protein\",\n        description: \"More than 50% of total calories from proteins\"\n      }, {\n        name: \"Low-Carb\",\n        apiName: \"low-carb\",\n        description: \"Less than 20% of total calories from carbs\"\n      }, {\n        name: \"Low-Fat\",\n        apiName: \"low-fat\",\n        description: \"Less than 15% of total calories from fat\"\n      }, {\n        name: \"Low-Sodium\",\n        apiName: \"low-sodium\",\n        description: \"Less than 140mg Na per serving\"\n      }],\n      cuisineTypes: [\"American\", \"Asian\", \"British\", \"Caribbean\", \"Central Europe\", \"Chinese\", \"Eastern Europe\", \"French\", \"Indian\", \"Italian\", \"Japanese\", \"Kosher\", \"Mediterranean\", \"Mexican\", \"Middle Eastern\", \"Nordic\", \"South American\", \"South East Asian\"],\n      healthLabels: [{\n        name: \"Alcohol-free\",\n        apiName: \"alcohol-free\",\n        description: \"No alcohol used or contained\"\n      }, {\n        name: \"Celery-free\",\n        apiName: \"celery-free\",\n        description: \"does not contain celery or derivatives\"\n      }, {\n        name: \"Crustacean-free\",\n        apiName: \"crustacean-free\",\n        description: \"does not contain crustaceans (shrimp, lobster etc.) or derivatives\"\n      }, {\n        name: \"Dairy\",\n        apiName: \"dairy-free\",\n        description: \"No dairy; no lactose\"\n      }, {\n        name: \"Eggs\",\n        apiName: \"egg-free\",\n        description: \"No eggs or products containing eggs\"\n      }, {\n        name: \"Fish\",\n        apiName: \"fish-free\",\n        description: \"No fish or fish derivatives\"\n      }, {\n        name: \"FODMAP free\",\n        apiName: \"fodmap-free\",\n        description: \"Does not contain FODMAP foods\"\n      }, {\n        name: \"Gluten\",\n        apiName: \"gluten-free\",\n        description: \"No ingredients containing gluten\"\n      }, {\n        name: \"Keto\",\n        apiName: \"keto-friendly\",\n        description: \"Maximum 7 grams of net carbs per serving\"\n      }, {\n        name: \"Kidney friendly\",\n        apiName: \"kidney-friendly\",\n        description: \"per serving – phosphorus less than 250 mg AND potassium less than 500 mg AND sodium: less than 500 mg\"\n      }, {\n        name: \"Kosher\",\n        apiName: \"kosher\",\n        description: \"contains only ingredients allowed by the kosher diet. However it does not guarantee kosher preparation of the ingredients themselves\"\n      }, {\n        name: \"Low potassium\",\n        apiName: \"low-potassium\",\n        description: \"Less than 150mg per serving\"\n      }, {\n        name: \"Lupine-free\",\n        apiName: \"lupine-free\",\n        description: \"does not contain lupine or derivatives\"\n      }, {\n        name: \"Mustard-free\",\n        apiName: \"mustard-free\",\n        description: \"does not contain mustard or derivatives\"\n      }, {\n        name: \"n/a\",\n        apiName: \"low-fat-abs\",\n        description: \"Less than 3g of fat per serving\"\n      }, {\n        name: \"No oil added\",\n        apiName: \"No-oil-added\",\n        description: \"No oil added except to what is contained in the basic ingredients\"\n      }, {\n        name: \"No-sugar\",\n        apiName: \"low-sugar\",\n        description: \"No simple sugars – glucose, dextrose, galactose, fructose, sucrose, lactose, maltose\"\n      }, {\n        name: \"Paleo\",\n        apiName: \"paleo\",\n        description: \"Excludes what are perceived to be agricultural products; grains, legumes, dairy products, potatoes, refined salt, refined sugar, and processed oils\"\n      }, {\n        name: \"Peanuts\",\n        apiName: \"peanut-free\",\n        description: \"No peanuts or products containing peanuts\"\n      }, {\n        name: \"Pescatarian\",\n        apiName: \"pecatarian\",\n        description: \"Does not contain meat or meat based products, can contain dairy and fish\"\n      }, {\n        name: \"Pork-free\",\n        apiName: \"pork-free\",\n        description: \"does not contain pork or derivatives\"\n      }, {\n        name: \"Red meat-free\",\n        apiName: \"red-meat-free\",\n        description: \"does not contain beef, lamb, pork, duck, goose, game, horse, and other types of red meat or products containing red meat.\"\n      }, {\n        name: \"Sesame-free\",\n        apiName: \"sesame-free\",\n        description: \"does not contain sesame seed or derivatives\"\n      }, {\n        name: \"Shellfish\",\n        apiName: \"shellfish-free\",\n        description: \"No shellfish or shellfish derivatives\"\n      }, {\n        name: \"Soy\",\n        apiName: \"soy-free\",\n        description: \"No soy or products containing soy\"\n      }, {\n        name: \"Sugar-conscious\",\n        apiName: \"sugar-conscious\",\n        description: \"Less than 4g of sugar per serving\"\n      }, {\n        name: \"Tree Nuts\",\n        apiName: \"tree-nut-free\",\n        description: \"No tree nuts or products containing tree nuts\"\n      }, {\n        name: \"Vegan\",\n        apiName: \"vegan\",\n        description: \"No meat, poultry, fish, dairy, eggs or honey\"\n      }, {\n        name: \"Vegetarian\",\n        apiName: \"vegetarian\",\n        description: \"No meat, poultry, or fish\"\n      }, {\n        name: \"Wheat-free\",\n        apiName: \"wheat-free\",\n        description: \"No wheat, can have gluten though\"\n      }]\n    } // || validation using yup\n    // validationSchema={validationSchema}\n    ,\n    onSubmit: (data, {\n      setSubmitting,\n      resetForm\n    }) => {\n      setSubmitting(true); // *make async call\n\n      console.log(data.MealType);\n      choose = data;\n      console.log(choose);\n      getAdvancedSearch();\n      console.log(\"Submit: \", data);\n      setSubmitting(false);\n      resetForm(true);\n    },\n    className: \"advanced-search-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  }, ({\n    values,\n    errors,\n    isSubmitting,\n    handleBlur\n  }) => /*#__PURE__*/React.createElement(Form, {\n    style: {\n      margin: \"10px\",\n      marginLeft: \"7%\",\n      marginRight: \"7%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: \"70%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 17\n    }\n  }, \"Search: \"), /*#__PURE__*/React.createElement(TextField, {\n    variant: \"outlined\",\n    id: \"search\",\n    label: \"Search\",\n    type: \"search\",\n    placeholder: \"Chicken\",\n    fullWidth: true,\n    onChange: updateSearch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 15\n    }\n  }, \"Items per Page: \"), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 9,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Slider, {\n    name: \"cardsPerPage\",\n    value: typeof cardsPerPage === \"number\" ? cardsPerPage : 0,\n    onChange: handleSliderChange // defaultValue={cardsPerPage}\n    ,\n    getAriaValueText: valuetext,\n    \"aria-labelledby\": \"item-slider\",\n    valueLabelDisplay: \"auto\",\n    step: 1,\n    min: 10,\n    max: 50,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 19\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(TextField // defaultValue={cardsPerPage}\n  , {\n    name: \"cardsPerPage\",\n    value: cardsPerPage,\n    onChange: handleInputChange,\n    onBlur: handleBlur,\n    type: \"number\",\n    inputProps: {\n      step: 1,\n      min: 10,\n      max: 50,\n      \"aria-labelledby\": \"item-slider\"\n    },\n    InputLabelProps: {\n      shrink: true\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 19\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 407,\n      columnNumber: 15\n    }\n  }, \"Meal Type: \"), /*#__PURE__*/React.createElement(RadioGroup, {\n    row: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 408,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(MyRadio, {\n    name: \"MealType\",\n    type: \"radio\",\n    value: \"Breakfast\",\n    as: Radio,\n    label: \"Breakfast\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 409,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(MyRadio, {\n    name: \"MealType\",\n    type: \"radio\",\n    value: \"Lunch\",\n    as: Radio,\n    label: \"Lunch\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 416,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(MyRadio, {\n    name: \"MealType\",\n    type: \"radio\",\n    value: \"Dinner\",\n    as: Radio,\n    label: \"Dinner\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(MyRadio, {\n    name: \"MealType\",\n    type: \"radio\",\n    value: \"Snack\",\n    as: Radio,\n    label: \"Snack\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 430,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 441,\n      columnNumber: 15\n    }\n  }, \"Dish Type: \"), /*#__PURE__*/React.createElement(FieldArray, {\n    name: \"Dish Type\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 442,\n      columnNumber: 15\n    }\n  }, arrayHelpers => values.dishTypes.map(dishType => {\n    return /*#__PURE__*/React.createElement(MyCheckBox, {\n      key: dishType,\n      name: \"dishType\",\n      type: \"checkbox\",\n      value: dishType,\n      as: Checkbox,\n      label: dishType,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 446,\n        columnNumber: 23\n      }\n    });\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 460,\n      columnNumber: 15\n    }\n  }, \"Cuisine Type: \"), /*#__PURE__*/React.createElement(FieldArray, {\n    name: \"CuisineTypes\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 461,\n      columnNumber: 15\n    }\n  }, arrayHelpers => values.cuisineTypes.map(cuisineType => {\n    return /*#__PURE__*/React.createElement(MyRadio, {\n      key: cuisineType,\n      name: \"cuisineType\",\n      type: \"radio\",\n      value: cuisineType,\n      as: Radio,\n      label: cuisineType,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 465,\n        columnNumber: 23\n      }\n    });\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 479,\n      columnNumber: 15\n    }\n  }, \"Diet: \"), /*#__PURE__*/React.createElement(FieldArray, {\n    name: \"Diet\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 480,\n      columnNumber: 15\n    }\n  }, arrayHelpers => values.dietLabels.map(dietLabel => {\n    return /*#__PURE__*/React.createElement(MyRadio, {\n      key: dietLabel.apiName,\n      name: \"dietLabel\",\n      type: \"radio\",\n      value: dietLabel.apiName,\n      as: Radio,\n      label: dietLabel.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 484,\n        columnNumber: 23\n      }\n    });\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 498,\n      columnNumber: 15\n    }\n  }, \"Health: \"), /*#__PURE__*/React.createElement(FieldArray, {\n    row: true,\n    name: \"Health\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 499,\n      columnNumber: 15\n    }\n  }, arrayHelpers => values.healthLabels.map(healthLabel => {\n    return /*#__PURE__*/React.createElement(MyCheckBox, {\n      key: healthLabel.apiName,\n      name: \"healthLabel\",\n      type: \"checkbox\",\n      value: healthLabel.apiName,\n      as: Checkbox,\n      label: healthLabel.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 503,\n        columnNumber: 23\n      }\n    });\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 516,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    disabled: isSubmitting,\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 517,\n      columnNumber: 17\n    }\n  }, \"Submit\")), /*#__PURE__*/React.createElement(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 521,\n      columnNumber: 15\n    }\n  }, JSON.stringify(values, null, 2)), /*#__PURE__*/React.createElement(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 522,\n      columnNumber: 15\n    }\n  }, JSON.stringify(errors, null, 2))))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 527,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: () => setModalIsOpen(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 528,\n      columnNumber: 9\n    }\n  }, \"Close\")));\n};\n\nexport default AdvancedSearchModal;","map":{"version":3,"sources":["/Users/yeungj12/Projects/FrontEnd/ReactJS/frontend014_recipe/src/Modal.js"],"names":["React","useEffect","useState","Modal","yup","Formik","Form","useField","FieldArray","setAppElement","AdvancedSearchModal","MyRadio","label","props","field","meta","GreenRadio","withStyles","root","color","green","checked","MyCheckBox","GreenCheckbox","validationSchema","object","search","string","required","max","pets","array","of","name","getAdvancedSearch","e","trim","setQuery","setSearch","setModalIsOpen","cardsPerPage","indexOfLastCard","currentPage","indexOfFirstCard","setSearchRange","console","log","choose","modalIsOpen","overlay","backgroundColor","display","marginLeft","dishTypes","dietLabels","apiName","description","cuisineTypes","healthLabels","data","setSubmitting","resetForm","MealType","values","errors","isSubmitting","handleBlur","margin","marginRight","width","classes","updateSearch","handleSliderChange","valuetext","handleInputChange","step","min","shrink","Radio","arrayHelpers","map","dishType","Checkbox","cuisineType","dietLabel","healthLabel","JSON","stringify"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nimport Modal from \"react-modal\";\nimport * as yup from \"yup\";\nimport { Formik, Form, useField, FieldArray } from \"formik\";\n\nModal.setAppElement(\"#root\");\n\nconst AdvancedSearchModal = () => {\n  //MyRadio\n  const MyRadio = ({ label, ...props }) => {\n    const [field, meta] = useField(props);\n    return (\n      <FormControlLabel\n        {...props}\n        {...field}\n        control={<GreenRadio />}\n        label={label}\n      />\n    );\n  };\n\n  //Green Radio\n  const GreenRadio = withStyles({\n    root: {\n      color: green[400],\n      \"&$checked\": {\n        color: green[600],\n      },\n    },\n    checked: {},\n  })((props) => <Radio color=\"default\" {...props} />);\n\n  //My Checkbox\n  const MyCheckBox = ({ label, ...props }) => {\n    const [field, meta] = useField(props);\n\n    return (\n      <FormControlLabel\n        {...field}\n        {...props}\n        control={<GreenCheckbox />}\n        label={label}\n      />\n    );\n  };\n\n  //Green Checkbox\n  const GreenCheckbox = withStyles({\n    root: {\n      color: green[400],\n      \"&$checked\": {\n        color: green[600],\n      },\n    },\n    checked: {},\n  })((props) => <Checkbox color=\"default\" {...props} />);\n\n  //Validation Schema\n  const validationSchema = yup.object({\n    // || passing validation to search using yup\n    search: yup.string().required().max(10),\n    pets: yup.array().of(\n      yup.object({\n        name: yup.string().required(),\n      })\n    ),\n  });\n\n  const getAdvancedSearch = (e) => {\n    if (search.trim() !== \"\") {\n      setQuery(search);\n      setSearch(\"\");\n      setModalIsOpen(false);\n    }\n\n    if (cardsPerPage !== 10) {\n      indexOfLastCard = currentPage * cardsPerPage;\n      indexOfFirstCard = indexOfLastCard - cardsPerPage;\n      setSearchRange(`&from=${indexOfFirstCard}&to=${indexOfLastCard}`);\n    }\n\n    console.log(\"advanced:\" + choose);\n  };\n\n  return (\n    <Modal\n      isOpen={modalIsOpen}\n      onRequestClose={() => setModalIsOpen(false)}\n      style={{\n        overlay: { backgroundColor: \"rgba(0,0,0,0.7)\" },\n      }}\n    >\n      <div\n        className=\"ModalHeader\"\n        style={{ display: \"flex\", marginLeft: \"7%\" }}\n      >\n        <h2>Advanced Search</h2>\n      </div>\n\n      <div className=\"ModalContent\">\n        <Formik\n          initialValues={{\n            search: \"\",\n            cardsPerPage: `${cardsPerPage}`,\n            dishTypes: [\n              \"Bread\",\n              \"Cereals\",\n              \"Condiments and sauces\",\n              \"Drinks\",\n              \"Desserts\",\n              \"Main course\",\n              \"Pancake\",\n              \"Preps\",\n              \"Preserve\",\n              \"Salad\",\n              \"Sandwiches\",\n              \"Side dish\",\n              \"Soup\",\n              \"Starter\",\n              \"Sweets\",\n            ],\n            dietLabels: [\n              {\n                name: \"Balanced\",\n                apiName: \"balanced\",\n                description: \"Protein/Fat/Carb values in 15/35/50 ratio\",\n              },\n              {\n                name: \"High-Fiber\",\n                apiName: \"high-fiber\",\n                description: \"More than 5g fiber per serving\",\n              },\n              {\n                name: \"High-Protein\",\n                apiName: \"high-protein\",\n                description: \"More than 50% of total calories from proteins\",\n              },\n              {\n                name: \"Low-Carb\",\n                apiName: \"low-carb\",\n                description: \"Less than 20% of total calories from carbs\",\n              },\n              {\n                name: \"Low-Fat\",\n                apiName: \"low-fat\",\n                description: \"Less than 15% of total calories from fat\",\n              },\n              {\n                name: \"Low-Sodium\",\n                apiName: \"low-sodium\",\n                description: \"Less than 140mg Na per serving\",\n              },\n            ],\n            cuisineTypes: [\n              \"American\",\n              \"Asian\",\n              \"British\",\n              \"Caribbean\",\n              \"Central Europe\",\n              \"Chinese\",\n              \"Eastern Europe\",\n              \"French\",\n              \"Indian\",\n              \"Italian\",\n              \"Japanese\",\n              \"Kosher\",\n              \"Mediterranean\",\n              \"Mexican\",\n              \"Middle Eastern\",\n              \"Nordic\",\n              \"South American\",\n              \"South East Asian\",\n            ],\n            healthLabels: [\n              {\n                name: \"Alcohol-free\",\n                apiName: \"alcohol-free\",\n                description: \"No alcohol used or contained\",\n              },\n              {\n                name: \"Celery-free\",\n                apiName: \"celery-free\",\n                description: \"does not contain celery or derivatives\",\n              },\n              {\n                name: \"Crustacean-free\",\n                apiName: \"crustacean-free\",\n                description:\n                  \"does not contain crustaceans (shrimp, lobster etc.) or derivatives\",\n              },\n              {\n                name: \"Dairy\",\n                apiName: \"dairy-free\",\n                description: \"No dairy; no lactose\",\n              },\n              {\n                name: \"Eggs\",\n                apiName: \"egg-free\",\n                description: \"No eggs or products containing eggs\",\n              },\n              {\n                name: \"Fish\",\n                apiName: \"fish-free\",\n                description: \"No fish or fish derivatives\",\n              },\n              {\n                name: \"FODMAP free\",\n                apiName: \"fodmap-free\",\n                description: \"Does not contain FODMAP foods\",\n              },\n              {\n                name: \"Gluten\",\n                apiName: \"gluten-free\",\n                description: \"No ingredients containing gluten\",\n              },\n              {\n                name: \"Keto\",\n                apiName: \"keto-friendly\",\n                description: \"Maximum 7 grams of net carbs per serving\",\n              },\n              {\n                name: \"Kidney friendly\",\n                apiName: \"kidney-friendly\",\n                description:\n                  \"per serving – phosphorus less than 250 mg AND potassium less than 500 mg AND sodium: less than 500 mg\",\n              },\n              {\n                name: \"Kosher\",\n                apiName: \"kosher\",\n                description:\n                  \"contains only ingredients allowed by the kosher diet. However it does not guarantee kosher preparation of the ingredients themselves\",\n              },\n              {\n                name: \"Low potassium\",\n                apiName: \"low-potassium\",\n                description: \"Less than 150mg per serving\",\n              },\n              {\n                name: \"Lupine-free\",\n                apiName: \"lupine-free\",\n                description: \"does not contain lupine or derivatives\",\n              },\n              {\n                name: \"Mustard-free\",\n                apiName: \"mustard-free\",\n                description: \"does not contain mustard or derivatives\",\n              },\n              {\n                name: \"n/a\",\n                apiName: \"low-fat-abs\",\n                description: \"Less than 3g of fat per serving\",\n              },\n              {\n                name: \"No oil added\",\n                apiName: \"No-oil-added\",\n                description:\n                  \"No oil added except to what is contained in the basic ingredients\",\n              },\n              {\n                name: \"No-sugar\",\n                apiName: \"low-sugar\",\n                description:\n                  \"No simple sugars – glucose, dextrose, galactose, fructose, sucrose, lactose, maltose\",\n              },\n              {\n                name: \"Paleo\",\n                apiName: \"paleo\",\n                description:\n                  \"Excludes what are perceived to be agricultural products; grains, legumes, dairy products, potatoes, refined salt, refined sugar, and processed oils\",\n              },\n              {\n                name: \"Peanuts\",\n                apiName: \"peanut-free\",\n                description: \"No peanuts or products containing peanuts\",\n              },\n              {\n                name: \"Pescatarian\",\n                apiName: \"pecatarian\",\n                description:\n                  \"Does not contain meat or meat based products, can contain dairy and fish\",\n              },\n              {\n                name: \"Pork-free\",\n                apiName: \"pork-free\",\n                description: \"does not contain pork or derivatives\",\n              },\n              {\n                name: \"Red meat-free\",\n                apiName: \"red-meat-free\",\n                description:\n                  \"does not contain beef, lamb, pork, duck, goose, game, horse, and other types of red meat or products containing red meat.\",\n              },\n              {\n                name: \"Sesame-free\",\n                apiName: \"sesame-free\",\n                description: \"does not contain sesame seed or derivatives\",\n              },\n              {\n                name: \"Shellfish\",\n                apiName: \"shellfish-free\",\n                description: \"No shellfish or shellfish derivatives\",\n              },\n              {\n                name: \"Soy\",\n                apiName: \"soy-free\",\n                description: \"No soy or products containing soy\",\n              },\n              {\n                name: \"Sugar-conscious\",\n                apiName: \"sugar-conscious\",\n                description: \"Less than 4g of sugar per serving\",\n              },\n              {\n                name: \"Tree Nuts\",\n                apiName: \"tree-nut-free\",\n                description: \"No tree nuts or products containing tree nuts\",\n              },\n              {\n                name: \"Vegan\",\n                apiName: \"vegan\",\n                description: \"No meat, poultry, fish, dairy, eggs or honey\",\n              },\n              {\n                name: \"Vegetarian\",\n                apiName: \"vegetarian\",\n                description: \"No meat, poultry, or fish\",\n              },\n              {\n                name: \"Wheat-free\",\n                apiName: \"wheat-free\",\n                description: \"No wheat, can have gluten though\",\n              },\n            ],\n          }}\n          // || validation using yup\n          // validationSchema={validationSchema}\n          onSubmit={(data, { setSubmitting, resetForm }) => {\n            setSubmitting(true);\n            // *make async call\n            console.log(data.MealType);\n            choose = data;\n            console.log(choose);\n            getAdvancedSearch();\n            console.log(\"Submit: \", data);\n            setSubmitting(false);\n            resetForm(true);\n          }}\n          className=\"advanced-search-form\"\n        >\n          {({ values, errors, isSubmitting, handleBlur }) => (\n            <Form\n              style={{ margin: \"10px\", marginLeft: \"7%\", marginRight: \"7%\" }}\n            >\n              <div style={{ width: \"70%\" }}>\n                <div className={classes.root}>{\"Search: \"}</div>\n                <TextField\n                  variant=\"outlined\"\n                  id=\"search\"\n                  label=\"Search\"\n                  type=\"search\"\n                  placeholder=\"Chicken\"\n                  fullWidth\n                  onChange={updateSearch}\n                />\n              </div>\n\n              <div className={classes.root}>{\"Items per Page: \"}</div>\n\n              <Grid container spacing={2} alignItems=\"center\">\n                <Grid item xs={9}>\n                  <Slider\n                    name=\"cardsPerPage\"\n                    value={typeof cardsPerPage === \"number\" ? cardsPerPage : 0}\n                    onChange={handleSliderChange}\n                    // defaultValue={cardsPerPage}\n                    getAriaValueText={valuetext}\n                    aria-labelledby=\"item-slider\"\n                    valueLabelDisplay=\"auto\"\n                    step={1}\n                    min={10}\n                    max={50}\n                  />\n                </Grid>\n                <Grid item xs={3}>\n                  <TextField\n                    // defaultValue={cardsPerPage}\n                    name=\"cardsPerPage\"\n                    value={cardsPerPage}\n                    onChange={handleInputChange}\n                    onBlur={handleBlur}\n                    type=\"number\"\n                    inputProps={{\n                      step: 1,\n                      min: 10,\n                      max: 50,\n                      \"aria-labelledby\": \"item-slider\",\n                    }}\n                    InputLabelProps={{\n                      shrink: true,\n                    }}\n                  />\n                </Grid>\n              </Grid>\n\n              {/* Radio Button starts here */}\n              <div className={classes.root}>{\"Meal Type: \"}</div>\n              <RadioGroup row>\n                <MyRadio\n                  name=\"MealType\"\n                  type=\"radio\"\n                  value=\"Breakfast\"\n                  as={Radio}\n                  label=\"Breakfast\"\n                />\n                <MyRadio\n                  name=\"MealType\"\n                  type=\"radio\"\n                  value=\"Lunch\"\n                  as={Radio}\n                  label=\"Lunch\"\n                />\n                <MyRadio\n                  name=\"MealType\"\n                  type=\"radio\"\n                  value=\"Dinner\"\n                  as={Radio}\n                  label=\"Dinner\"\n                />\n                <MyRadio\n                  name=\"MealType\"\n                  type=\"radio\"\n                  value=\"Snack\"\n                  as={Radio}\n                  label=\"Snack\"\n                />\n              </RadioGroup>\n\n              {/* Radio Buttons ends here */}\n              {/* multiple checkboxes starts here */}\n              <div className={classes.root}>{\"Dish Type: \"}</div>\n              <FieldArray name=\"Dish Type\">\n                {(arrayHelpers) =>\n                  values.dishTypes.map((dishType) => {\n                    return (\n                      <MyCheckBox\n                        key={dishType}\n                        name=\"dishType\"\n                        type=\"checkbox\"\n                        value={dishType}\n                        as={Checkbox}\n                        label={dishType}\n                      />\n                    );\n                  })\n                }\n              </FieldArray>\n              {/* multiple checkboxes ends here */}\n\n              <div className={classes.root}>{\"Cuisine Type: \"}</div>\n              <FieldArray name=\"CuisineTypes\">\n                {(arrayHelpers) =>\n                  values.cuisineTypes.map((cuisineType) => {\n                    return (\n                      <MyRadio\n                        key={cuisineType}\n                        name=\"cuisineType\"\n                        type=\"radio\"\n                        value={cuisineType}\n                        as={Radio}\n                        label={cuisineType}\n                      />\n                    );\n                  })\n                }\n              </FieldArray>\n\n              {/* Radio Button starts here */}\n              <div className={classes.root}>{\"Diet: \"}</div>\n              <FieldArray name=\"Diet\">\n                {(arrayHelpers) =>\n                  values.dietLabels.map((dietLabel) => {\n                    return (\n                      <MyRadio\n                        key={dietLabel.apiName}\n                        name=\"dietLabel\"\n                        type=\"radio\"\n                        value={dietLabel.apiName}\n                        as={Radio}\n                        label={dietLabel.name}\n                      />\n                    );\n                  })\n                }\n              </FieldArray>\n              {/* Radio Buttons ends here */}\n\n              <div className={classes.root}>{\"Health: \"}</div>\n              <FieldArray row name=\"Health\">\n                {(arrayHelpers) =>\n                  values.healthLabels.map((healthLabel) => {\n                    return (\n                      <MyCheckBox\n                        key={healthLabel.apiName}\n                        name=\"healthLabel\"\n                        type=\"checkbox\"\n                        value={healthLabel.apiName}\n                        as={Checkbox}\n                        label={healthLabel.name}\n                      />\n                    );\n                  })\n                }\n              </FieldArray>\n\n              <div>\n                <Button disabled={isSubmitting} type=\"submit\">\n                  Submit\n                </Button>\n              </div>\n              <pre>{JSON.stringify(values, null, 2)}</pre>\n              <pre>{JSON.stringify(errors, null, 2)}</pre>\n            </Form>\n          )}\n        </Formik>\n      </div>\n      <div>\n        <Button onClick={() => setModalIsOpen(false)}>Close</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default AdvancedSearchModal;\n"]},"metadata":{},"sourceType":"module"}