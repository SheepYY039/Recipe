{"ast":null,"code":"var _jsxFileName = \"/Users/yeungj12/Projects/FrontEnd/ReactJS/frontend014_recipe/src/App.js\";\nimport React, { useEffect, useState } from \"react\";\nimport Recipe from \"./Recipe\";\nimport Nav from \"./Nav\";\nimport PaginationFooter from \"./Pagination\";\nimport Modal from \"react-modal\";\nimport { AdvancedSearchModal } from \"AdvancedSearchModal\";\nimport { TextField, Button, Checkbox, Radio, FormControlLabel, Select, MenuItem } from \"@material-ui/core\";\nimport Typography from \"@material-ui/core/Typography\";\nimport \"./App.css\";\nimport style from \"./Modal.module.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSearch } from \"@fortawesome/free-solid-svg-icons\";\nModal.setAppElement(\"#root\");\n\nconst App = () => {\n  const APP_ID = \"65eff37b\";\n  const APP_KEY = \"013e642e140af7db99a3663be34125e2\";\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [query, setQuery] = useState(\"chicken\");\n  const [isHovered, setIsHovered] = useState(false);\n  const [cards, setCards] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [cardsPerPage, setCardsPerPage] = useState(10);\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n  let indexOfFirstCard = 0;\n  let indexOfLastCard = 10;\n  let inputClass = \"search-bar\";\n  let buttonClass = \"search-button\";\n  const dishTypes = [\"Bread\", \"Cereals\", \"Condiments and sauces\", \"Drinks\", \"Desserts\", \"Main course\", \"Pancake\", \"Preps\", \"Preserve\", \"Salad\", \"Sandwiches\", \"Side dish\", \"Soup\", \"Starter\", \"Sweets\"];\n  const cuisineTypes = [\"American\", \"Asian\", \"British\", \"Caribbean\", \"Central Europe\", \"Chinese\", \"Eastern Europe\", \"French\", \"Indian\", \"Italian\", \"Japanese\", \"Kosher\", \"Mediterranean\", \"Mexican\", \"Middle Eastern\", \"Nordic\", \"South American\", \"South East Asian\"];\n  const dietLabels = [{\n    name: \"Balanced\",\n    apiName: \"balanced\",\n    description: \"Protein/Fat/Carb values in 15/35/50 ratio\"\n  }, {\n    name: \"High-Fiber\",\n    apiName: \"high-fiber\",\n    description: \"More than 5g fiber per serving\"\n  }, {\n    name: \"High-Protein\",\n    apiName: \"high-protein\",\n    description: \"More than 50% of total calories from proteins\"\n  }, {\n    name: \"Low-Carb\",\n    apiName: \"low-carb\",\n    description: \"Less than 20% of total calories from carbs\"\n  }, {\n    name: \"Low-Fat\",\n    apiName: \"low-fat\",\n    description: \"Less than 15% of total calories from fat\"\n  }, {\n    name: \"Low-Sodium\",\n    apiName: \"low-sodium\",\n    description: \"Less than 140mg Na per serving\"\n  }];\n  const healthLabels = [{\n    name: \"Alcohol-free\",\n    apiName: \"alcohol-free\",\n    description: \"No alcohol used or contained\"\n  }, {\n    name: \"Celery-free\",\n    apiName: \"celery-free\",\n    description: \"does not contain celery or derivatives\"\n  }, {\n    name: \"Crustacean-free\",\n    apiName: \"crustacean-free\",\n    description: \"does not contain crustaceans (shrimp, lobster etc.) or derivatives\"\n  }, {\n    name: \"Dairy\",\n    apiName: \"dairy-free\",\n    description: \"No dairy; no lactose\"\n  }, {\n    name: \"Eggs\",\n    apiName: \"egg-free\",\n    description: \"No eggs or products containing eggs\"\n  }, {\n    name: \"Fish\",\n    apiName: \"fish-free\",\n    description: \"No fish or fish derivatives\"\n  }, {\n    name: \"FODMAP free\",\n    apiName: \"fodmap-free\",\n    description: \"Does not contain FODMAP foods\"\n  }, {\n    name: \"Gluten\",\n    apiName: \"gluten-free\",\n    description: \"No ingredients containing gluten\"\n  }, {\n    name: \"Keto\",\n    apiName: \"keto-friendly\",\n    description: \"Maximum 7 grams of net carbs per serving\"\n  }, {\n    name: \"Kidney friendly\",\n    apiName: \"kidney-friendly\",\n    description: \"per serving – phosphorus less than 250 mg AND potassium less than 500 mg AND sodium: less than 500 mg\"\n  }, {\n    name: \"Kosher\",\n    apiName: \"kosher\",\n    description: \"contains only ingredients allowed by the kosher diet. However it does not guarantee kosher preparation of the ingredients themselves\"\n  }, {\n    name: \"Low potassium\",\n    apiName: \"low-potassium\",\n    description: \"Less than 150mg per serving\"\n  }, {\n    name: \"Lupine-free\",\n    apiName: \"lupine-free\",\n    description: \"does not contain lupine or derivatives\"\n  }, {\n    name: \"Mustard-free\",\n    apiName: \"mustard-free\",\n    description: \"does not contain mustard or derivatives\"\n  }, {\n    name: \"n/a\",\n    apiName: \"low-fat-abs\",\n    description: \"Less than 3g of fat per serving\"\n  }, {\n    name: \"No oil added\",\n    apiName: \"No-oil-added\",\n    description: \"No oil added except to what is contained in the basic ingredients\"\n  }, {\n    name: \"No-sugar\",\n    apiName: \"low-sugar\",\n    description: \"No simple sugars – glucose, dextrose, galactose, fructose, sucrose, lactose, maltose\"\n  }, {\n    name: \"Paleo\",\n    apiName: \"paleo\",\n    description: \"Excludes what are perceived to be agricultural products; grains, legumes, dairy products, potatoes, refined salt, refined sugar, and processed oils\"\n  }, {\n    name: \"Peanuts\",\n    apiName: \"peanut-free\",\n    description: \"No peanuts or products containing peanuts\"\n  }, {\n    name: \"Pescatarian\",\n    apiName: \"pecatarian\",\n    description: \"Does not contain meat or meat based products, can contain dairy and fish\"\n  }, {\n    name: \"Pork-free\",\n    apiName: \"pork-free\",\n    description: \"does not contain pork or derivatives\"\n  }, {\n    name: \"Red meat-free\",\n    apiName: \"red-meat-free\",\n    description: \"does not contain beef, lamb, pork, duck, goose, game, horse, and other types of red meat or products containing red meat.\"\n  }, {\n    name: \"Sesame-free\",\n    apiName: \"sesame-free\",\n    description: \"does not contain sesame seed or derivatives\"\n  }, {\n    name: \"Shellfish\",\n    apiName: \"shellfish-free\",\n    description: \"No shellfish or shellfish derivatives\"\n  }, {\n    name: \"Soy\",\n    apiName: \"soy-free\",\n    description: \"No soy or products containing soy\"\n  }, {\n    name: \"Sugar-conscious\",\n    apiName: \"sugar-conscious\",\n    description: \"Less than 4g of sugar per serving\"\n  }, {\n    name: \"Tree Nuts\",\n    apiName: \"tree-nut-free\",\n    description: \"No tree nuts or products containing tree nuts\"\n  }, {\n    name: \"Vegan\",\n    apiName: \"vegan\",\n    description: \"No meat, poultry, fish, dairy, eggs or honey\"\n  }, {\n    name: \"Vegetarian\",\n    apiName: \"vegetarian\",\n    description: \"No meat, poultry, or fish\"\n  }, {\n    name: \"Wheat-free\",\n    apiName: \"wheat-free\",\n    description: \"No wheat, can have gluten though\"\n  }];\n  const [searchRange, setSearchRange] = useState(\"&from=0&to=10\");\n  useEffect(() => {\n    async function getRecipes() {\n      // get current posts\n      setLoading(true); // || use await for data that doesn't come back instantly\n\n      const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}${searchRange}`);\n      const data = await response.json();\n      setRecipes(data.hits);\n      setCards(data);\n      console.log(data);\n      setLoading(false);\n    }\n\n    getRecipes();\n  }, [query, searchRange]);\n  console.log(cards);\n  const totalCards = 100;\n  console.log(totalCards); //change page\n\n  const paginate = pageNumber => {\n    console.log(pageNumber);\n    setCurrentPage(pageNumber);\n    console.log(currentPage);\n    indexOfLastCard = pageNumber * cardsPerPage;\n    indexOfFirstCard = indexOfLastCard - cardsPerPage;\n    console.log(indexOfLastCard);\n    console.log(indexOfFirstCard);\n    setSearchRange(`&from=${indexOfFirstCard}&to=${indexOfLastCard}`);\n  };\n\n  const updateSearch = e => {\n    setSearch(e.target.value);\n  };\n\n  const getSearch = e => {\n    // || prevent page refresh\n    e.preventDefault();\n\n    if (!(search === \"\" || search === \" \")) {\n      setQuery(search);\n      setSearch(\"\");\n    }\n  };\n\n  const getAdvancedSearch = e => {\n    e.preventDefault();\n\n    if (!(search === \"\" || search === \" \")) {\n      setQuery(search);\n      setSearch(\"\");\n    }\n\n    setCardsPerPage();\n  };\n\n  if (isHovered) {\n    inputClass = \"search-bar-expand search-bar\";\n    buttonClass = \"search-button search-button-expand\";\n  } else {\n    inputClass = \"search-bar\";\n    buttonClass = \"search-button\";\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Nav, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"search-box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 9\n    }\n  }, \"Showing Results for:\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 11\n    }\n  }, query)), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: getSearch,\n    className: \"search-form\",\n    onMouseEnter: () => setIsHovered(true),\n    onMouseLeave: () => setIsHovered(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    className: inputClass,\n    value: search,\n    onChange: updateSearch,\n    placeholder: \"Type to search\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: buttonClass,\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faSearch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(Button, {\n    onClick: () => setModalIsOpen(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 9\n    }\n  }, \"Advanced Search\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"recipes\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 377,\n      columnNumber: 7\n    }\n  }, recipes.map(recipe => /*#__PURE__*/React.createElement(Recipe, {\n    key: recipe.recipe.label + recipe.recipe.calories,\n    title: recipe.recipe.label,\n    calories: recipe.recipe.calories,\n    image: recipe.recipe.image,\n    ingredients: recipe.recipe.ingredients,\n    loading: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(\"footer\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(PaginationFooter, {\n    cardsPerPage: cardsPerPage,\n    totalCards: totalCards,\n    paginate: paginate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 391,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(AdvancedSearchModal, {\n    dishTypes: dishTypes,\n    cuisineTypes: cuisineTypes,\n    dietLabels: dietLabels,\n    healthLabels: healthLabels,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 397,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/yeungj12/Projects/FrontEnd/ReactJS/frontend014_recipe/src/App.js"],"names":["React","useEffect","useState","Recipe","Nav","PaginationFooter","Modal","AdvancedSearchModal","TextField","Button","Checkbox","Radio","FormControlLabel","Select","MenuItem","Typography","style","FontAwesomeIcon","faSearch","setAppElement","App","APP_ID","APP_KEY","recipes","setRecipes","search","setSearch","query","setQuery","isHovered","setIsHovered","cards","setCards","loading","setLoading","currentPage","setCurrentPage","cardsPerPage","setCardsPerPage","modalIsOpen","setModalIsOpen","indexOfFirstCard","indexOfLastCard","inputClass","buttonClass","dishTypes","cuisineTypes","dietLabels","name","apiName","description","healthLabels","searchRange","setSearchRange","getRecipes","response","fetch","data","json","hits","console","log","totalCards","paginate","pageNumber","updateSearch","e","target","value","getSearch","preventDefault","getAdvancedSearch","map","recipe","label","calories","image","ingredients"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nimport Recipe from \"./Recipe\";\nimport Nav from \"./Nav\";\nimport PaginationFooter from \"./Pagination\";\nimport Modal from \"react-modal\";\nimport { AdvancedSearchModal } from \"AdvancedSearchModal\";\n\nimport {\n  TextField,\n  Button,\n  Checkbox,\n  Radio,\n  FormControlLabel,\n  Select,\n  MenuItem,\n} from \"@material-ui/core\";\nimport Typography from \"@material-ui/core/Typography\";\n\nimport \"./App.css\";\nimport style from \"./Modal.module.css\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSearch } from \"@fortawesome/free-solid-svg-icons\";\n\nModal.setAppElement(\"#root\");\n\nconst App = () => {\n  const APP_ID = \"65eff37b\";\n  const APP_KEY = \"013e642e140af7db99a3663be34125e2\";\n\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [query, setQuery] = useState(\"chicken\");\n  const [isHovered, setIsHovered] = useState(false);\n  const [cards, setCards] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [cardsPerPage, setCardsPerPage] = useState(10);\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n\n  let indexOfFirstCard = 0;\n  let indexOfLastCard = 10;\n  let inputClass = \"search-bar\";\n  let buttonClass = \"search-button\";\n\n  const dishTypes = [\n    \"Bread\",\n    \"Cereals\",\n    \"Condiments and sauces\",\n    \"Drinks\",\n    \"Desserts\",\n    \"Main course\",\n    \"Pancake\",\n    \"Preps\",\n    \"Preserve\",\n    \"Salad\",\n    \"Sandwiches\",\n    \"Side dish\",\n    \"Soup\",\n    \"Starter\",\n    \"Sweets\",\n  ];\n\n  const cuisineTypes = [\n    \"American\",\n    \"Asian\",\n    \"British\",\n    \"Caribbean\",\n    \"Central Europe\",\n    \"Chinese\",\n    \"Eastern Europe\",\n    \"French\",\n    \"Indian\",\n    \"Italian\",\n    \"Japanese\",\n    \"Kosher\",\n    \"Mediterranean\",\n    \"Mexican\",\n    \"Middle Eastern\",\n    \"Nordic\",\n    \"South American\",\n    \"South East Asian\",\n  ];\n\n  const dietLabels = [\n    {\n      name: \"Balanced\",\n      apiName: \"balanced\",\n      description: \"Protein/Fat/Carb values in 15/35/50 ratio\",\n    },\n    {\n      name: \"High-Fiber\",\n      apiName: \"high-fiber\",\n      description: \"More than 5g fiber per serving\",\n    },\n    {\n      name: \"High-Protein\",\n      apiName: \"high-protein\",\n      description: \"More than 50% of total calories from proteins\",\n    },\n    {\n      name: \"Low-Carb\",\n      apiName: \"low-carb\",\n      description: \"Less than 20% of total calories from carbs\",\n    },\n    {\n      name: \"Low-Fat\",\n      apiName: \"low-fat\",\n      description: \"Less than 15% of total calories from fat\",\n    },\n    {\n      name: \"Low-Sodium\",\n      apiName: \"low-sodium\",\n      description: \"Less than 140mg Na per serving\",\n    },\n  ];\n\n  const healthLabels = [\n    {\n      name: \"Alcohol-free\",\n      apiName: \"alcohol-free\",\n      description: \"No alcohol used or contained\",\n    },\n    {\n      name: \"Celery-free\",\n      apiName: \"celery-free\",\n      description: \"does not contain celery or derivatives\",\n    },\n    {\n      name: \"Crustacean-free\",\n      apiName: \"crustacean-free\",\n      description:\n        \"does not contain crustaceans (shrimp, lobster etc.) or derivatives\",\n    },\n    {\n      name: \"Dairy\",\n      apiName: \"dairy-free\",\n      description: \"No dairy; no lactose\",\n    },\n    {\n      name: \"Eggs\",\n      apiName: \"egg-free\",\n      description: \"No eggs or products containing eggs\",\n    },\n    {\n      name: \"Fish\",\n      apiName: \"fish-free\",\n      description: \"No fish or fish derivatives\",\n    },\n    {\n      name: \"FODMAP free\",\n      apiName: \"fodmap-free\",\n      description: \"Does not contain FODMAP foods\",\n    },\n    {\n      name: \"Gluten\",\n      apiName: \"gluten-free\",\n      description: \"No ingredients containing gluten\",\n    },\n    {\n      name: \"Keto\",\n      apiName: \"keto-friendly\",\n      description: \"Maximum 7 grams of net carbs per serving\",\n    },\n    {\n      name: \"Kidney friendly\",\n      apiName: \"kidney-friendly\",\n      description:\n        \"per serving – phosphorus less than 250 mg AND potassium less than 500 mg AND sodium: less than 500 mg\",\n    },\n    {\n      name: \"Kosher\",\n      apiName: \"kosher\",\n      description:\n        \"contains only ingredients allowed by the kosher diet. However it does not guarantee kosher preparation of the ingredients themselves\",\n    },\n    {\n      name: \"Low potassium\",\n      apiName: \"low-potassium\",\n      description: \"Less than 150mg per serving\",\n    },\n    {\n      name: \"Lupine-free\",\n      apiName: \"lupine-free\",\n      description: \"does not contain lupine or derivatives\",\n    },\n    {\n      name: \"Mustard-free\",\n      apiName: \"mustard-free\",\n      description: \"does not contain mustard or derivatives\",\n    },\n    {\n      name: \"n/a\",\n      apiName: \"low-fat-abs\",\n      description: \"Less than 3g of fat per serving\",\n    },\n    {\n      name: \"No oil added\",\n      apiName: \"No-oil-added\",\n      description:\n        \"No oil added except to what is contained in the basic ingredients\",\n    },\n    {\n      name: \"No-sugar\",\n      apiName: \"low-sugar\",\n      description:\n        \"No simple sugars – glucose, dextrose, galactose, fructose, sucrose, lactose, maltose\",\n    },\n    {\n      name: \"Paleo\",\n      apiName: \"paleo\",\n      description:\n        \"Excludes what are perceived to be agricultural products; grains, legumes, dairy products, potatoes, refined salt, refined sugar, and processed oils\",\n    },\n    {\n      name: \"Peanuts\",\n      apiName: \"peanut-free\",\n      description: \"No peanuts or products containing peanuts\",\n    },\n    {\n      name: \"Pescatarian\",\n      apiName: \"pecatarian\",\n      description:\n        \"Does not contain meat or meat based products, can contain dairy and fish\",\n    },\n    {\n      name: \"Pork-free\",\n      apiName: \"pork-free\",\n      description: \"does not contain pork or derivatives\",\n    },\n    {\n      name: \"Red meat-free\",\n      apiName: \"red-meat-free\",\n      description:\n        \"does not contain beef, lamb, pork, duck, goose, game, horse, and other types of red meat or products containing red meat.\",\n    },\n    {\n      name: \"Sesame-free\",\n      apiName: \"sesame-free\",\n      description: \"does not contain sesame seed or derivatives\",\n    },\n    {\n      name: \"Shellfish\",\n      apiName: \"shellfish-free\",\n      description: \"No shellfish or shellfish derivatives\",\n    },\n    {\n      name: \"Soy\",\n      apiName: \"soy-free\",\n      description: \"No soy or products containing soy\",\n    },\n    {\n      name: \"Sugar-conscious\",\n      apiName: \"sugar-conscious\",\n      description: \"Less than 4g of sugar per serving\",\n    },\n    {\n      name: \"Tree Nuts\",\n      apiName: \"tree-nut-free\",\n      description: \"No tree nuts or products containing tree nuts\",\n    },\n    {\n      name: \"Vegan\",\n      apiName: \"vegan\",\n      description: \"No meat, poultry, fish, dairy, eggs or honey\",\n    },\n    {\n      name: \"Vegetarian\",\n      apiName: \"vegetarian\",\n      description: \"No meat, poultry, or fish\",\n    },\n    {\n      name: \"Wheat-free\",\n      apiName: \"wheat-free\",\n      description: \"No wheat, can have gluten though\",\n    },\n  ];\n  const [searchRange, setSearchRange] = useState(\"&from=0&to=10\");\n\n  useEffect(() => {\n    async function getRecipes() {\n      // get current posts\n      setLoading(true);\n      // || use await for data that doesn't come back instantly\n      const response = await fetch(\n        `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}${searchRange}`\n      );\n      const data = await response.json();\n      setRecipes(data.hits);\n      setCards(data);\n      console.log(data);\n      setLoading(false);\n    }\n    getRecipes();\n  }, [query, searchRange]);\n\n  console.log(cards);\n\n  const totalCards = 100;\n  console.log(totalCards);\n\n  //change page\n  const paginate = (pageNumber) => {\n    console.log(pageNumber);\n    setCurrentPage(pageNumber);\n\n    console.log(currentPage);\n    indexOfLastCard = pageNumber * cardsPerPage;\n    indexOfFirstCard = indexOfLastCard - cardsPerPage;\n\n    console.log(indexOfLastCard);\n\n    console.log(indexOfFirstCard);\n    setSearchRange(`&from=${indexOfFirstCard}&to=${indexOfLastCard}`);\n  };\n\n  const updateSearch = (e) => {\n    setSearch(e.target.value);\n  };\n\n  const getSearch = (e) => {\n    // || prevent page refresh\n    e.preventDefault();\n    if (!(search === \"\" || search === \" \")) {\n      setQuery(search);\n      setSearch(\"\");\n    }\n  };\n\n  const getAdvancedSearch = (e) => {\n    e.preventDefault();\n    if (!(search === \"\" || search === \" \")) {\n      setQuery(search);\n      setSearch(\"\");\n    }\n    setCardsPerPage();\n  };\n\n  if (isHovered) {\n    inputClass = \"search-bar-expand search-bar\";\n    buttonClass = \"search-button search-button-expand\";\n  } else {\n    inputClass = \"search-bar\";\n    buttonClass = \"search-button\";\n  }\n\n  return (\n    <div className=\"App\">\n      <Nav />\n      <div className=\"search-box\">\n        <p>\n          Showing Results for:\n          <br />\n          <h4>{query}</h4>\n        </p>\n        <form\n          onSubmit={getSearch}\n          className=\"search-form\"\n          onMouseEnter={() => setIsHovered(true)}\n          onMouseLeave={() => setIsHovered(false)}\n        >\n          <input\n            type=\"text\"\n            className={inputClass}\n            value={search}\n            onChange={updateSearch}\n            placeholder=\"Type to search\"\n          />\n          <button className={buttonClass} type=\"submit\">\n            <FontAwesomeIcon icon={faSearch} />\n          </button>\n        </form>\n        <Button onClick={() => setModalIsOpen(true)}>Advanced Search</Button>\n      </div>\n\n      <div className=\"recipes\">\n        {/* // || .map function used for looping arrays */}\n        {recipes.map((recipe) => (\n          <Recipe\n            key={recipe.recipe.label + recipe.recipe.calories}\n            title={recipe.recipe.label}\n            calories={recipe.recipe.calories}\n            image={recipe.recipe.image}\n            ingredients={recipe.recipe.ingredients}\n            loading={loading}\n          />\n        ))}\n      </div>\n      <footer>\n        <PaginationFooter\n          cardsPerPage={cardsPerPage}\n          totalCards={totalCards}\n          paginate={paginate}\n        />\n      </footer>\n      <AdvancedSearchModal\n        dishTypes={dishTypes}\n        cuisineTypes={cuisineTypes}\n        dietLabels={dietLabels}\n        healthLabels={healthLabels}\n      />\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}