{"ast":null,"code":"var _jsxFileName = \"E:\\\\Projects\\\\FrontEnd\\\\ReactJS\\\\frontend014-recipe\\\\src\\\\FormikForm.js\";\nimport React from \"react\";\nimport { Formik, Field, Form, useField, FieldArray } from \"formik\";\nimport { TextField, Button, Checkbox, Radio, FormControlLabel, Select, MenuItem } from \"@material-ui/core\";\nimport * as yup from \"yup\";\n\nconst MyRadio = ({\n  label,\n  ...props\n}) => {\n  const [field, meta] = useField(props);\n  return (\n    /*#__PURE__*/\n    // ! <FormControlLabel\n    //   value={field.value}\n    //   onChange={field.onChange}\n    //   control={<Radio />}\n    //   Label={label}\n    //! /> OR\n    React.createElement(FormControlLabel, Object.assign({}, field, {\n      control: /*#__PURE__*/React.createElement(Radio, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 43\n        }\n      }),\n      label: label,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 5\n      }\n    }))\n  );\n};\n\nconst MyTextField = ({\n  placeholder,\n  ...props\n}) => {\n  const [field, meta] = useField(props);\n  const errorText = meta.error && meta.touched ? meta.error : \"\";\n  return /*#__PURE__*/React.createElement(TextField, Object.assign({}, field, {\n    placeholder: placeholder,\n    helperText: errorText,\n    error: !!errorText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  })) // ! error={!!errorText} casting to boolean, if this string is empty--> false\n  ;\n};\n\nconst validationSchema = yup.object({\n  // || passing validation to search using yup\n  search: yup.string().required().max(10),\n  pets: yup.array().of(yup.object({\n    name: yup.string().required()\n  }))\n});\n\nconst FormikForm = () => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Formik, {\n    initialValues: {\n      search: \"\",\n      isTall: false,\n      cookies: [],\n      yogurt: \"\",\n      pets: [{\n        type: \"cat\",\n        name: \"Jarvis\",\n        id: \"\" + Math.random()\n      }]\n    } // || validation using yup\n    ,\n    validationSchema: validationSchema // || validation without using yup\n    // validate={(values) => {\n    //   const errors = {};\n    //   if (values.search.includes(\"bob\")) {\n    //     errors.search = \"no bob\";\n    //   }\n    //   return errors;\n    // }}\n    ,\n    onSubmit: (data, {\n      setSubmitting,\n      resetForm\n    }) => {\n      setSubmitting(true); // *make async call\n\n      console.log(\"Submit: \", data);\n      setSubmitting(false);\n      resetForm(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, ({\n    values,\n    errors,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit\n  }) => /*#__PURE__*/React.createElement(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }\n  }, \"Search: \"), /*#__PURE__*/React.createElement(Field, {\n    placeholder: \"Chicken\",\n    name: \"search\",\n    type: \"input\",\n    as: TextField,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }\n  }, \"Cookies: \"), /*#__PURE__*/React.createElement(Field, {\n    name: \"cookies\",\n    type: \"checkbox\",\n    value: \"chocolate chip\",\n    as: Checkbox,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Field, {\n    name: \"cookies\",\n    type: \"checkbox\",\n    value: \"snicker doodle\",\n    as: Checkbox,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Field, {\n    name: \"cookies\",\n    type: \"checkbox\",\n    value: \"sugar\",\n    as: Checkbox,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }\n  }, \"Yogurts: \"), /*#__PURE__*/React.createElement(Field, {\n    name: \"yogurt\",\n    type: \"radio\",\n    value: \"peach\",\n    as: MyRadio,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(MyRadio, {\n    name: \"yogurt\",\n    type: \"radio\",\n    value: \"peach\",\n    label: \"peach\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Field, {\n    name: \"yogurt\",\n    type: \"radio\",\n    value: \"mango\",\n    as: Radio,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Field, {\n    name: \"yogurt\",\n    type: \"radio\",\n    value: \"blueberry\",\n    as: Radio,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(FieldArray, {\n    name: \"pets\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }\n  }, arrayHelpers => /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: () => arrayHelpers.push({\n      type: \"frog\",\n      name: \"\",\n      // ! empty string to cast Math.random() into a string\n      id: \"\" + Math.random()\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 19\n    }\n  }, \"add Pet\"), values.pets.map((pet, index) => {\n    const name = `pets.${index}.name`;\n    {\n      /* if the ket is pet.name, then the text field will loose focus whenever someone types a letter so instead, use an auto generated id from Math.random */\n    }\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: pet.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(MyTextField, {\n      placeholder: \"pet name\",\n      name: name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(Field, {\n      name: `pets.${index}.type`,\n      type: \"select\",\n      as: Select,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(MenuItem, {\n      value: \"cat\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 27\n      }\n    }, \"Cat\"), /*#__PURE__*/React.createElement(MenuItem, {\n      value: \"dog\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 27\n      }\n    }, \"dog\"), /*#__PURE__*/React.createElement(MenuItem, {\n      value: \"frog\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 27\n      }\n    }, \"frog\")), /*#__PURE__*/React.createElement(Button, {\n      onClick: () => arrayHelpers.remove(index),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 25\n      }\n    }, \"x\"));\n  }))), /*#__PURE__*/React.createElement(FieldArray, {\n    name: \"mealType\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 13\n    }\n  }, arrayHelpers => /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 17\n    }\n  }, \"return (\", /*#__PURE__*/React.createElement(\"div\", {\n    key: \"mealType\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(Field, {\n    name: `pets.${index}.type`,\n    type: \"select\",\n    as: Select,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"breakfast\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 23\n    }\n  }, \"Breakfast\")), /*#__PURE__*/React.createElement(Button, {\n    onClick: () => arrayHelpers.remove(index),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 21\n    }\n  }, \"x\")), \"); )}\")), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    disabled: isSubmitting,\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 15\n    }\n  }, \"Submit\")), /*#__PURE__*/React.createElement(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 13\n    }\n  }, JSON.stringify(values, null, 2)), /*#__PURE__*/React.createElement(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 13\n    }\n  }, JSON.stringify(errors, null, 2)))));\n};\n\nexport default FormikForm;","map":{"version":3,"sources":["E:/Projects/FrontEnd/ReactJS/frontend014-recipe/src/FormikForm.js"],"names":["React","Formik","Field","Form","useField","FieldArray","TextField","Button","Checkbox","Radio","FormControlLabel","Select","MenuItem","yup","MyRadio","label","props","field","meta","MyTextField","placeholder","errorText","error","touched","validationSchema","object","search","string","required","max","pets","array","of","name","FormikForm","isTall","cookies","yogurt","type","id","Math","random","data","setSubmitting","resetForm","console","log","values","errors","isSubmitting","handleChange","handleBlur","handleSubmit","arrayHelpers","push","map","pet","index","remove","JSON","stringify"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Formik, Field, Form, useField, FieldArray } from \"formik\";\r\nimport {\r\n  TextField,\r\n  Button,\r\n  Checkbox,\r\n  Radio,\r\n  FormControlLabel,\r\n  Select,\r\n  MenuItem,\r\n} from \"@material-ui/core\";\r\nimport * as yup from \"yup\";\r\n\r\nconst MyRadio = ({ label, ...props }) => {\r\n  const [field, meta] = useField(props);\r\n  return (\r\n    // ! <FormControlLabel\r\n    //   value={field.value}\r\n    //   onChange={field.onChange}\r\n    //   control={<Radio />}\r\n    //   Label={label}\r\n    //! /> OR\r\n    <FormControlLabel {...field} control={<Radio />} label={label} />\r\n  );\r\n};\r\n\r\nconst MyTextField = ({ placeholder, ...props }) => {\r\n  const [field, meta] = useField(props);\r\n  const errorText = meta.error && meta.touched ? meta.error : \"\";\r\n  return (\r\n    <TextField\r\n      {...field}\r\n      placeholder={placeholder}\r\n      helperText={errorText}\r\n      error={!!errorText}\r\n    />\r\n    // ! error={!!errorText} casting to boolean, if this string is empty--> false\r\n  );\r\n};\r\n\r\nconst validationSchema = yup.object({\r\n  // || passing validation to search using yup\r\n  search: yup.string().required().max(10),\r\n  pets: yup.array().of(\r\n    yup.object({\r\n      name: yup.string().required(),\r\n    })\r\n  ),\r\n});\r\n\r\nconst FormikForm = () => {\r\n  return (\r\n    <div>\r\n      <Formik\r\n        initialValues={{\r\n          search: \"\",\r\n          isTall: false,\r\n          cookies: [],\r\n          yogurt: \"\",\r\n          pets: [{ type: \"cat\", name: \"Jarvis\", id: \"\" + Math.random() }],\r\n        }}\r\n        // || validation using yup\r\n        validationSchema={validationSchema}\r\n        // || validation without using yup\r\n        // validate={(values) => {\r\n        //   const errors = {};\r\n\r\n        //   if (values.search.includes(\"bob\")) {\r\n        //     errors.search = \"no bob\";\r\n        //   }\r\n        //   return errors;\r\n        // }}\r\n\r\n        onSubmit={(data, { setSubmitting, resetForm }) => {\r\n          setSubmitting(true);\r\n          // *make async call\r\n          console.log(\"Submit: \", data);\r\n          setSubmitting(false);\r\n          resetForm(true);\r\n        }}\r\n      >\r\n        {({\r\n          values,\r\n          errors,\r\n          isSubmitting,\r\n          handleChange,\r\n          handleBlur,\r\n          handleSubmit,\r\n        }) => (\r\n          <Form>\r\n            <h3>Search: </h3>\r\n            {/* // || <MyTextField\r\n              placeholder=\"Chicken\"\r\n              name=\"search\"\r\n              type=\"input\"\r\n              as={TextField}\r\n            /> */}\r\n            {/* // ||  A simpler way of using text field */}\r\n            <Field\r\n              placeholder=\"Chicken\"\r\n              name=\"search\"\r\n              type=\"input\"\r\n              as={TextField}\r\n            />\r\n            {/* // || with the same name, the text will sync */}\r\n            {/* // * <TextField\r\n              name=\"search\"\r\n              value={values.search}\r\n              onChange={handleChange}\r\n              onBlur={handleBlur}\r\n            /> */}\r\n            {/* Checkbox */}\r\n            {/* // * <Field name=\"isTall\" type=\"checkbox\" as={Checkbox}></Field> */}\r\n            {/* multiple checkboxes starts here */}\r\n            <div>Cookies: </div>\r\n            <Field\r\n              name=\"cookies\"\r\n              type=\"checkbox\"\r\n              value=\"chocolate chip\"\r\n              as={Checkbox}\r\n            ></Field>\r\n            <Field\r\n              name=\"cookies\"\r\n              type=\"checkbox\"\r\n              value=\"snicker doodle\"\r\n              as={Checkbox}\r\n            ></Field>\r\n            <Field\r\n              name=\"cookies\"\r\n              type=\"checkbox\"\r\n              value=\"sugar\"\r\n              as={Checkbox}\r\n            ></Field>\r\n            {/* multiple checkboxes ends here */}\r\n            {/* Radio Button starts here */}\r\n            <div>Yogurts: </div>\r\n            {/* // ! <Field name=\"yogurt\" type=\"radio\" value=\"peach\" as={Radio}></Field> OR */}\r\n            <Field name=\"yogurt\" type=\"radio\" value=\"peach\" as={MyRadio} />\r\n            <MyRadio name=\"yogurt\" type=\"radio\" value=\"peach\" label=\"peach\" />\r\n            <Field name=\"yogurt\" type=\"radio\" value=\"mango\" as={Radio}></Field>\r\n            <Field\r\n              name=\"yogurt\"\r\n              type=\"radio\"\r\n              value=\"blueberry\"\r\n              as={Radio}\r\n            ></Field>\r\n\r\n            {/* Radio Buttons ends here */}\r\n            {/* // || lines up with pets.name */}\r\n            <FieldArray name=\"pets\">\r\n              {(arrayHelpers) => (\r\n                <div>\r\n                  <Button\r\n                    onClick={() =>\r\n                      arrayHelpers.push({\r\n                        type: \"frog\",\r\n                        name: \"\",\r\n                        // ! empty string to cast Math.random() into a string\r\n                        id: \"\" + Math.random(),\r\n                      })\r\n                    }\r\n                  >\r\n                    add Pet\r\n                  </Button>\r\n                  {values.pets.map((pet, index) => {\r\n                    const name = `pets.${index}.name`;\r\n                    {\r\n                      /* if the ket is pet.name, then the text field will loose focus whenever someone types a letter so instead, use an auto generated id from Math.random */\r\n                    }\r\n                    return (\r\n                      <div key={pet.id}>\r\n                        <MyTextField placeholder=\"pet name\" name={name} />\r\n                        <Field\r\n                          name={`pets.${index}.type`}\r\n                          type=\"select\"\r\n                          as={Select}\r\n                        >\r\n                          <MenuItem value=\"cat\">Cat</MenuItem>\r\n                          <MenuItem value=\"dog\">dog</MenuItem>\r\n                          <MenuItem value=\"frog\">frog</MenuItem>\r\n                        </Field>\r\n                        <Button onClick={() => arrayHelpers.remove(index)}>\r\n                          x\r\n                        </Button>\r\n                      </div>\r\n                    );\r\n                  })}\r\n                </div>\r\n              )}\r\n            </FieldArray>\r\n\r\n            <FieldArray name=\"mealType\">\r\n              {(arrayHelpers) => (\r\n                <div>\r\n                  return (\r\n                  <div key=\"mealType\">\r\n                    <Field\r\n                      name={`pets.${index}.type`}\r\n                      type=\"select\"\r\n                      as={Select}\r\n                    >\r\n                      <MenuItem value=\"breakfast\">Breakfast</MenuItem>\r\n                    </Field>\r\n                    <Button onClick={() => arrayHelpers.remove(index)}>\r\n                      x\r\n                    </Button>\r\n                  </div>\r\n                  ); )}\r\n                </div>\r\n              )}\r\n            </FieldArray>\r\n\r\n            {/* Button */}\r\n            <div>\r\n              <Button disabled={isSubmitting} type=\"submit\">\r\n                Submit\r\n              </Button>\r\n            </div>\r\n\r\n            <pre>{JSON.stringify(values, null, 2)}</pre>\r\n            <pre>{JSON.stringify(errors, null, 2)}</pre>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FormikForm;\r\n"]},"metadata":{},"sourceType":"module"}