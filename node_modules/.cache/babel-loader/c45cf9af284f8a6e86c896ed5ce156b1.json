{"ast":null,"code":"var _jsxFileName = \"/Users/yeungj12/Projects/FrontEnd/ReactJS/frontend014_recipe/src/FormikForm.js\";\nimport React from \"react\";\nimport { Formik, Field, Form, useField, FieldArray } from \"formik\";\nimport { TextField, Button, Checkbox, Radio, FormControlLabel, Select, MenuItem, InputLabel } from \"@material-ui/core\";\nimport * as yup from \"yup\";\nimport style from \"./Modal.module.css\";\n\nconst MyRadio = ({\n  label,\n  ...props\n}) => {\n  const [field, meta] = useField(props);\n  return /*#__PURE__*/React.createElement(FormControlLabel, Object.assign({}, field, {\n    control: /*#__PURE__*/React.createElement(Radio, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 48\n      }\n    }),\n    label: label,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 10\n    }\n  }));\n};\n\nconst MyCheckBox = ({\n  label,\n  ...props\n}) => {\n  const [field, meta] = useField(props);\n  return /*#__PURE__*/React.createElement(FormControlLabel, Object.assign({}, field, {\n    control: /*#__PURE__*/React.createElement(Checkbox, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 48\n      }\n    }),\n    label: label,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 10\n    }\n  }));\n};\n\nconst MyTextField = ({\n  placeholder,\n  ...props\n}) => {\n  const [field, meta] = useField(props);\n  const errorText = meta.error && meta.touched ? meta.error : \"\";\n  return /*#__PURE__*/React.createElement(TextField, Object.assign({}, field, {\n    placeholder: placeholder,\n    helperText: errorText,\n    error: !!errorText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  })) // ! error={!!errorText} casting to boolean, if this string is empty--> false\n  ;\n};\n\nconst validationSchema = yup.object({\n  // || passing validation to search using yup\n  search: yup.string().required().max(10),\n  pets: yup.array().of(yup.object({\n    name: yup.string().required()\n  }))\n});\n\nconst FormikForm = () => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Formik, {\n    initialValues: {\n      search: \"\",\n      isTall: false,\n      cookies: [],\n      yogurt: \"\",\n      pets: [{\n        type: \"cat\",\n        name: \"Jarvis\",\n        id: \"\" + Math.random()\n      }],\n      dishTypes: [\"Bread\", \"Cereals\", \"Condiments and sauces\", \"Drinks\", \"Desserts\", \"Main course\", \"Pancake\", \"Preps\", \"Preserve\", \"Salad\", \"Sandwiches\", \"Side dish\", \"Soup\", \"Starter\", \"Sweets\"],\n      dietLabels: [{\n        name: \"Balanced\",\n        apiName: \"balanced\",\n        description: \"Protein/Fat/Carb values in 15/35/50 ratio\"\n      }, {\n        name: \"High-Fiber\",\n        apiName: \"high-fiber\",\n        description: \"More than 5g fiber per serving\"\n      }, {\n        name: \"High-Protein\",\n        apiName: \"high-protein\",\n        description: \"More than 50% of total calories from proteins\"\n      }, {\n        name: \"Low-Carb\",\n        apiName: \"low-carb\",\n        description: \"Less than 20% of total calories from carbs\"\n      }, {\n        name: \"Low-Fat\",\n        apiName: \"low-fat\",\n        description: \"Less than 15% of total calories from fat\"\n      }, {\n        name: \"Low-Sodium\",\n        apiName: \"low-sodium\",\n        description: \"Less than 140mg Na per serving\"\n      }]\n    } // || validation using yup\n    ,\n    validationSchema: validationSchema,\n    onSubmit: (data, {\n      setSubmitting,\n      resetForm\n    }) => {\n      setSubmitting(true); // *make async call\n\n      console.log(\"Submit: \", data);\n      setSubmitting(false);\n      resetForm(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }, ({\n    values,\n    errors,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit\n  }) => /*#__PURE__*/React.createElement(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }\n  }, \"Search: \"), /*#__PURE__*/React.createElement(Field, {\n    placeholder: \"Chicken\",\n    name: \"search\",\n    type: \"input\",\n    as: TextField,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }\n  }, \"Dish Type: \"), /*#__PURE__*/React.createElement(FieldArray, {\n    name: \"Dish Type\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }\n  }, arrayHelpers => values.dishTypes.map(dishType => {\n    return /*#__PURE__*/React.createElement(MyCheckBox, {\n      name: \"dishType\",\n      type: \"checkbox\",\n      value: dishType,\n      as: Checkbox,\n      label: dishType,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 21\n      }\n    });\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 13\n    }\n  }, \"Diets: \"), /*#__PURE__*/React.createElement(FieldArray, {\n    name: \"Diet\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }\n  }, arrayHelpers => values.dietLabels.map(dietLabel => {\n    return /*#__PURE__*/React.createElement(MyRadio, {\n      name: \"dietLabel\",\n      type: \"radio\",\n      value: dietLabel.name,\n      as: Radio,\n      label: dietLabel.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 21\n      }\n    });\n  })), /*#__PURE__*/React.createElement(Field, {\n    placeholder: \"Meal Type\",\n    name: \"mealType\",\n    type: \"select\",\n    as: Select,\n    displayEmpty: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 15\n    }\n  }, \"Meal Type\"), /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"breakfast\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 15\n    }\n  }, \"Breakfast\"), /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"lunch\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 15\n    }\n  }, \"Lunch\"), /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"dinner\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 15\n    }\n  }, \"Dinner\"), /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"snack\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 15\n    }\n  }, \"Snack\")), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    disabled: isSubmitting,\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 15\n    }\n  }, \"Submit\")), /*#__PURE__*/React.createElement(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 13\n    }\n  }, JSON.stringify(values, null, 2)), /*#__PURE__*/React.createElement(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 13\n    }\n  }, JSON.stringify(errors, null, 2)))));\n};\n\nexport default FormikForm;","map":{"version":3,"sources":["/Users/yeungj12/Projects/FrontEnd/ReactJS/frontend014_recipe/src/FormikForm.js"],"names":["React","Formik","Field","Form","useField","FieldArray","TextField","Button","Checkbox","Radio","FormControlLabel","Select","MenuItem","InputLabel","yup","style","MyRadio","label","props","field","meta","MyCheckBox","MyTextField","placeholder","errorText","error","touched","validationSchema","object","search","string","required","max","pets","array","of","name","FormikForm","isTall","cookies","yogurt","type","id","Math","random","dishTypes","dietLabels","apiName","description","data","setSubmitting","resetForm","console","log","values","errors","isSubmitting","handleChange","handleBlur","handleSubmit","arrayHelpers","map","dishType","dietLabel","JSON","stringify"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Formik, Field, Form, useField, FieldArray } from \"formik\";\nimport {\n  TextField,\n  Button,\n  Checkbox,\n  Radio,\n  FormControlLabel,\n  Select,\n  MenuItem,\n  InputLabel,\n} from \"@material-ui/core\";\nimport * as yup from \"yup\";\nimport style from \"./Modal.module.css\";\n\nconst MyRadio = ({ label, ...props }) => {\n  const [field, meta] = useField(props);\n  return <FormControlLabel {...field} control={<Radio />} label={label} />;\n};\n\nconst MyCheckBox = ({ label, ...props }) => {\n  const [field, meta] = useField(props);\n  return <FormControlLabel {...field} control={<Checkbox />} label={label} />;\n};\n\nconst MyTextField = ({ placeholder, ...props }) => {\n  const [field, meta] = useField(props);\n  const errorText = meta.error && meta.touched ? meta.error : \"\";\n  return (\n    <TextField\n      {...field}\n      placeholder={placeholder}\n      helperText={errorText}\n      error={!!errorText}\n    />\n    // ! error={!!errorText} casting to boolean, if this string is empty--> false\n  );\n};\n\nconst validationSchema = yup.object({\n  // || passing validation to search using yup\n  search: yup.string().required().max(10),\n  pets: yup.array().of(\n    yup.object({\n      name: yup.string().required(),\n    })\n  ),\n});\n\nconst FormikForm = () => {\n  return (\n    <div>\n      <Formik\n        initialValues={{\n          search: \"\",\n          isTall: false,\n          cookies: [],\n          yogurt: \"\",\n          pets: [{ type: \"cat\", name: \"Jarvis\", id: \"\" + Math.random() }],\n          dishTypes: [\n            \"Bread\",\n            \"Cereals\",\n            \"Condiments and sauces\",\n            \"Drinks\",\n            \"Desserts\",\n            \"Main course\",\n            \"Pancake\",\n            \"Preps\",\n            \"Preserve\",\n            \"Salad\",\n            \"Sandwiches\",\n            \"Side dish\",\n            \"Soup\",\n            \"Starter\",\n            \"Sweets\",\n          ],\n          dietLabels: [\n            {\n              name: \"Balanced\",\n              apiName: \"balanced\",\n              description: \"Protein/Fat/Carb values in 15/35/50 ratio\",\n            },\n            {\n              name: \"High-Fiber\",\n              apiName: \"high-fiber\",\n              description: \"More than 5g fiber per serving\",\n            },\n            {\n              name: \"High-Protein\",\n              apiName: \"high-protein\",\n              description: \"More than 50% of total calories from proteins\",\n            },\n            {\n              name: \"Low-Carb\",\n              apiName: \"low-carb\",\n              description: \"Less than 20% of total calories from carbs\",\n            },\n            {\n              name: \"Low-Fat\",\n              apiName: \"low-fat\",\n              description: \"Less than 15% of total calories from fat\",\n            },\n            {\n              name: \"Low-Sodium\",\n              apiName: \"low-sodium\",\n              description: \"Less than 140mg Na per serving\",\n            },\n          ],\n        }}\n        // || validation using yup\n        validationSchema={validationSchema}\n        onSubmit={(data, { setSubmitting, resetForm }) => {\n          setSubmitting(true);\n          // *make async call\n          console.log(\"Submit: \", data);\n          setSubmitting(false);\n          resetForm(true);\n        }}\n      >\n        {({\n          values,\n          errors,\n          isSubmitting,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n        }) => (\n          <Form>\n            <h3>Search: </h3>\n            {/* // || <MyTextField\n              placeholder=\"Chicken\"\n              name=\"search\"\n              type=\"input\"\n              as={TextField}\n            /> */}\n            {/* // ||  A simpler way of using text field */}\n            <Field\n              placeholder=\"Chicken\"\n              name=\"search\"\n              type=\"input\"\n              as={TextField}\n            />\n            {/* // || with the same name, the text will sync */}\n            {/* // * <TextField\n              name=\"search\"\n              value={values.search}\n              onChange={handleChange}\n              onBlur={handleBlur}\n            /> */}\n            {/* Checkbox */}\n            {/* // * <Field name=\"isTall\" type=\"checkbox\" as={Checkbox}></Field> */}\n            {/* multiple checkboxes starts here */}\n            <div>Dish Type: </div>\n            <FieldArray name=\"Dish Type\">\n              {(arrayHelpers) =>\n                values.dishTypes.map((dishType) => {\n                  return (\n                    <MyCheckBox\n                      name=\"dishType\"\n                      type=\"checkbox\"\n                      value={dishType}\n                      as={Checkbox}\n                      label={dishType}\n                    />\n                  );\n                })\n              }\n            </FieldArray>\n\n            {/* multiple checkboxes ends here */}\n            {/* Radio Button starts here */}\n            <div>Diets: </div>\n\n            <FieldArray name=\"Diet\">\n              {(arrayHelpers) =>\n                values.dietLabels.map((dietLabel) => {\n                  return (\n                    <MyRadio\n                      name=\"dietLabel\"\n                      type=\"radio\"\n                      value={dietLabel.name}\n                      as={Radio}\n                      label={dietLabel.name}\n                    />\n                  );\n                })\n              }\n            </FieldArray>\n\n            {/* Radio Buttons ends here */}\n            {/* // || lines up with pets.name */}\n\n            <Field\n              placeholder=\"Meal Type\"\n              name={\"mealType\"}\n              type=\"select\"\n              as={Select}\n              displayEmpty\n            >\n              <InputLabel>Meal Type</InputLabel>\n\n              {/* <Select native> */}\n              <MenuItem value=\"breakfast\">Breakfast</MenuItem>\n              <MenuItem value=\"lunch\">Lunch</MenuItem>\n              <MenuItem value=\"dinner\">Dinner</MenuItem>\n              <MenuItem value=\"snack\">Snack</MenuItem>\n              {/* </Select> */}\n            </Field>\n            {/* Button */}\n            <div>\n              <Button disabled={isSubmitting} type=\"submit\">\n                Submit\n              </Button>\n            </div>\n            <pre>{JSON.stringify(values, null, 2)}</pre>\n            <pre>{JSON.stringify(errors, null, 2)}</pre>\n          </Form>\n        )}\n      </Formik>\n    </div>\n  );\n};\n\nexport default FormikForm;\n"]},"metadata":{},"sourceType":"module"}