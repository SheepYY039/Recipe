{"ast":null,"code":"var _jsxFileName = \"E:\\\\Projects\\\\FrontEnd\\\\ReactJS\\\\frontend014-recipe\\\\src\\\\App.js\";\nimport React, { useEffect, useState } from \"react\";\nimport Recipe from \"./Recipe\";\nimport Nav from \"./Nav\";\nimport PaginationFooter from \"./Pagination\";\nimport Modal from \"react-modal\";\nimport PopoverStickOnHover from \"./PopOver\";\nimport FormikForm from \"./FormikForm\";\nimport { Form } from \"react-bootstrap\";\nimport { Button } from \"@material-ui/core\";\nimport \"./App.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSearch } from \"@fortawesome/free-solid-svg-icons\";\nModal.setAppElement(\"#root\");\n\nconst App = () => {\n  const APP_ID = \"65eff37b\";\n  const APP_KEY = \"013e642e140af7db99a3663be34125e2\";\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [advancedSearch, setAdvancedSearch] = useState(\"\");\n  const [query, setQuery] = useState(\"chicken\");\n  const [isHovered, setIsHovered] = useState(false);\n  const [cards, setCards] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [cardsPerPage, setCardsPerPage] = useState(10);\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n  const [selectDishTypes, setSelectDishTypes] = useState(\"\");\n  const [selectCuisineTypes, setSelectCuisineTypes] = useState(\"\");\n  const [selectDietLabels, setSelectDietLabels] = useState(\"\");\n  const [selectHealthLabels, setSelectHealthLabels] = useState(\"\");\n  const [selectMealTypes, setSelectMealTypes] = useState(\"\"); // const [selectMealTypes, setSelectMealTypes] = useState(\"\");\n\n  let indexOfFirstCard = 0;\n  let indexOfLastCard = 10;\n  let inputClass = \"search-bar\";\n  let buttonClass = \"search-button\";\n  const dishTypes = [\"Bread\", \"Cereals\", \"Condiments and sauces\", \"Drinks\", \"Desserts\", \"Main course\", \"Pancake\", \"Preps\", \"Preserve\", \"Salad\", \"Sandwiches\", \"Side dish\", \"Soup\", \"Starter\", \"Sweets\"];\n  const cuisineTypes = [\"American\", \"Asian\", \"British\", \"Caribbean\", \"Central Europe\", \"Chinese\", \"Eastern Europe\", \"French\", \"Indian\", \"Italian\", \"Japanese\", \"Kosher\", \"Mediterranean\", \"Mexican\", \"Middle Eastern\", \"Nordic\", \"South American\", \"South East Asian\"];\n  const dietLabels = [{\n    name: \"Balanced\",\n    apiName: \"balanced\",\n    description: \"Protein/Fat/Carb values in 15/35/50 ratio\"\n  }, {\n    name: \"High-Fiber\",\n    apiName: \"high-fiber\",\n    description: \"More than 5g fiber per serving\"\n  }, {\n    name: \"High-Protein\",\n    apiName: \"high-protein\",\n    description: \"More than 50% of total calories from proteins\"\n  }, {\n    name: \"Low-Carb\",\n    apiName: \"low-carb\",\n    description: \"Less than 20% of total calories from carbs\"\n  }, {\n    name: \"Low-Fat\",\n    apiName: \"low-fat\",\n    description: \"Less than 15% of total calories from fat\"\n  }, {\n    name: \"Low-Sodium\",\n    apiName: \"low-sodium\",\n    description: \"Less than 140mg Na per serving\"\n  }];\n  const healthLabels = [{\n    name: \"Alcohol-free\",\n    apiName: \"alcohol-free\",\n    description: \"No alcohol used or contained\"\n  }, {\n    name: \"Celery-free\",\n    apiName: \"celery-free\",\n    description: \"does not contain celery or derivatives\"\n  }, {\n    name: \"Crustacean-free\",\n    apiName: \"crustacean-free\",\n    description: \"does not contain crustaceans (shrimp, lobster etc.) or derivatives\"\n  }, {\n    name: \"Dairy\",\n    apiName: \"dairy-free\",\n    description: \"No dairy; no lactose\"\n  }, {\n    name: \"Eggs\",\n    apiName: \"egg-free\",\n    description: \"No eggs or products containing eggs\"\n  }, {\n    name: \"Fish\",\n    apiName: \"fish-free\",\n    description: \"No fish or fish derivatives\"\n  }, {\n    name: \"FODMAP free\",\n    apiName: \"fodmap-free\",\n    description: \"Does not contain FODMAP foods\"\n  }, {\n    name: \"Gluten\",\n    apiName: \"gluten-free\",\n    description: \"No ingredients containing gluten\"\n  }, {\n    name: \"Keto\",\n    apiName: \"keto-friendly\",\n    description: \"Maximum 7 grams of net carbs per serving\"\n  }, {\n    name: \"Kidney friendly\",\n    apiName: \"kidney-friendly\",\n    description: \"per serving – phosphorus less than 250 mg AND potassium less than 500 mg AND sodium: less than 500 mg\"\n  }, {\n    name: \"Kosher\",\n    apiName: \"kosher\",\n    description: \"contains only ingredients allowed by the kosher diet. However it does not guarantee kosher preparation of the ingredients themselves\"\n  }, {\n    name: \"Low potassium\",\n    apiName: \"low-potassium\",\n    description: \"Less than 150mg per serving\"\n  }, {\n    name: \"Lupine-free\",\n    apiName: \"lupine-free\",\n    description: \"does not contain lupine or derivatives\"\n  }, {\n    name: \"Mustard-free\",\n    apiName: \"mustard-free\",\n    description: \"does not contain mustard or derivatives\"\n  }, {\n    name: \"n/a\",\n    apiName: \"low-fat-abs\",\n    description: \"Less than 3g of fat per serving\"\n  }, {\n    name: \"No oil added\",\n    apiName: \"No-oil-added\",\n    description: \"No oil added except to what is contained in the basic ingredients\"\n  }, {\n    name: \"No-sugar\",\n    apiName: \"low-sugar\",\n    description: \"No simple sugars – glucose, dextrose, galactose, fructose, sucrose, lactose, maltose\"\n  }, {\n    name: \"Paleo\",\n    apiName: \"paleo\",\n    description: \"Excludes what are perceived to be agricultural products; grains, legumes, dairy products, potatoes, refined salt, refined sugar, and processed oils\"\n  }, {\n    name: \"Peanuts\",\n    apiName: \"peanut-free\",\n    description: \"No peanuts or products containing peanuts\"\n  }, {\n    name: \"Pescatarian\",\n    apiName: \"pecatarian\",\n    description: \"Does not contain meat or meat based products, can contain dairy and fish\"\n  }, {\n    name: \"Pork-free\",\n    apiName: \"pork-free\",\n    description: \"does not contain pork or derivatives\"\n  }, {\n    name: \"Red meat-free\",\n    apiName: \"red-meat-free\",\n    description: \"does not contain beef, lamb, pork, duck, goose, game, horse, and other types of red meat or products containing red meat.\"\n  }, {\n    name: \"Sesame-free\",\n    apiName: \"sesame-free\",\n    description: \"does not contain sesame seed or derivatives\"\n  }, {\n    name: \"Shellfish\",\n    apiName: \"shellfish-free\",\n    description: \"No shellfish or shellfish derivatives\"\n  }, {\n    name: \"Soy\",\n    apiName: \"soy-free\",\n    description: \"No soy or products containing soy\"\n  }, {\n    name: \"Sugar-conscious\",\n    apiName: \"sugar-conscious\",\n    description: \"Less than 4g of sugar per serving\"\n  }, {\n    name: \"Tree Nuts\",\n    apiName: \"tree-nut-free\",\n    description: \"No tree nuts or products containing tree nuts\"\n  }, {\n    name: \"Vegan\",\n    apiName: \"vegan\",\n    description: \"No meat, poultry, fish, dairy, eggs or honey\"\n  }, {\n    name: \"Vegetarian\",\n    apiName: \"vegetarian\",\n    description: \"No meat, poultry, or fish\"\n  }, {\n    name: \"Wheat-free\",\n    apiName: \"wheat-free\",\n    description: \"No wheat, can have gluten though\"\n  }];\n  const [searchRange, setSearchRange] = useState(\"&from=0&to=10\");\n  useEffect(() => {\n    async function getRecipes() {\n      // get current posts\n      setLoading(true); // || use await for data that doesn't come back instantly\n\n      const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}${searchRange}`);\n      const data = await response.json();\n      setRecipes(data.hits);\n      setCards(data);\n      console.log(data);\n      setLoading(false);\n    }\n\n    getRecipes();\n  }, [query, searchRange]);\n  const totalCards = 100; //change page\n\n  const paginate = pageNumber => {\n    console.log(pageNumber);\n    setCurrentPage(pageNumber);\n    console.log(currentPage);\n    indexOfLastCard = pageNumber * cardsPerPage;\n    indexOfFirstCard = indexOfLastCard - cardsPerPage;\n    console.log(indexOfLastCard);\n    console.log(indexOfFirstCard);\n    setSearchRange(`&from=${indexOfFirstCard}&to=${indexOfLastCard}`);\n  };\n\n  const updateSearch = e => {\n    setSearch(e.target.value);\n  };\n\n  const updateAdvancedSearch = e => {\n    setAdvancedSearch(e.target.value);\n  };\n\n  const getSearch = e => {\n    // || prevent page refresh\n    e.preventDefault();\n\n    if (!(search === \"\" || search === \" \")) {\n      setQuery(search);\n      setSearch(\"\");\n    }\n  };\n\n  const getAdvancedSearch = e => {\n    e.preventDefault();\n\n    if (!(advancedSearch === \"\" || advancedSearch === \" \")) {\n      setQuery(advancedSearch);\n      setAdvancedSearch(\"\");\n      setModalIsOpen(false);\n    }\n\n    if (cardsPerPage !== 10) {\n      setCardsPerPage(cardsPerPage);\n    }\n  };\n\n  if (isHovered) {\n    inputClass = \"search-bar-expand search-bar\";\n    buttonClass = \"search-button search-button-expand\";\n  } else {\n    inputClass = \"search-bar\";\n    buttonClass = \"search-button\";\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Nav, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"search-box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 9\n    }\n  }, \"Showing Results for:\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 11\n    }\n  }, query)), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: getSearch,\n    className: \"search-form\",\n    onMouseEnter: () => setIsHovered(true),\n    onMouseLeave: () => setIsHovered(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    className: inputClass,\n    value: search,\n    onChange: updateSearch,\n    placeholder: \"Type to search\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: buttonClass,\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faSearch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(Button, {\n    onClick: () => setModalIsOpen(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 9\n    }\n  }, \"Advanced Search\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"recipes\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 381,\n      columnNumber: 7\n    }\n  }, recipes.map(recipe => /*#__PURE__*/React.createElement(Recipe, {\n    key: recipe.recipe.label + recipe.recipe.calories,\n    title: recipe.recipe.label,\n    calories: recipe.recipe.calories,\n    image: recipe.recipe.image,\n    ingredients: recipe.recipe.ingredients,\n    loading: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(\"footer\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 394,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(PaginationFooter, {\n    cardsPerPage: cardsPerPage,\n    totalCards: totalCards,\n    paginate: paginate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 395,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Modal, {\n    isOpen: modalIsOpen,\n    onRequestClose: () => setModalIsOpen(false),\n    style: {\n      overlay: {\n        backgroundColor: \"rgba(0,0,0,0.7)\"\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ModalHeader\",\n    style: {\n      display: \"flex\",\n      marginLeft: \"7%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 409,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 413,\n      columnNumber: 11\n    }\n  }, \"Advanced Search\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ModalContent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 416,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Formik, {\n    initialValues: {\n      search: \"\",\n      dishTypes: [\"Bread\", \"Cereals\", \"Condiments and sauces\", \"Drinks\", \"Desserts\", \"Main course\", \"Pancake\", \"Preps\", \"Preserve\", \"Salad\", \"Sandwiches\", \"Side dish\", \"Soup\", \"Starter\", \"Sweets\"],\n      dietLabels: [{\n        name: \"Balanced\",\n        apiName: \"balanced\",\n        description: \"Protein/Fat/Carb values in 15/35/50 ratio\"\n      }, {\n        name: \"High-Fiber\",\n        apiName: \"high-fiber\",\n        description: \"More than 5g fiber per serving\"\n      }, {\n        name: \"High-Protein\",\n        apiName: \"high-protein\",\n        description: \"More than 50% of total calories from proteins\"\n      }, {\n        name: \"Low-Carb\",\n        apiName: \"low-carb\",\n        description: \"Less than 20% of total calories from carbs\"\n      }, {\n        name: \"Low-Fat\",\n        apiName: \"low-fat\",\n        description: \"Less than 15% of total calories from fat\"\n      }, {\n        name: \"Low-Sodium\",\n        apiName: \"low-sodium\",\n        description: \"Less than 140mg Na per serving\"\n      }],\n      cuisineTypes: [\"American\", \"Asian\", \"British\", \"Caribbean\", \"Central Europe\", \"Chinese\", \"Eastern Europe\", \"French\", \"Indian\", \"Italian\", \"Japanese\", \"Kosher\", \"Mediterranean\", \"Mexican\", \"Middle Eastern\", \"Nordic\", \"South American\", \"South East Asian\"],\n      healthLabels: [{\n        name: \"Alcohol-free\",\n        apiName: \"alcohol-free\",\n        description: \"No alcohol used or contained\"\n      }, {\n        name: \"Celery-free\",\n        apiName: \"celery-free\",\n        description: \"does not contain celery or derivatives\"\n      }, {\n        name: \"Crustacean-free\",\n        apiName: \"crustacean-free\",\n        description: \"does not contain crustaceans (shrimp, lobster etc.) or derivatives\"\n      }, {\n        name: \"Dairy\",\n        apiName: \"dairy-free\",\n        description: \"No dairy; no lactose\"\n      }, {\n        name: \"Eggs\",\n        apiName: \"egg-free\",\n        description: \"No eggs or products containing eggs\"\n      }, {\n        name: \"Fish\",\n        apiName: \"fish-free\",\n        description: \"No fish or fish derivatives\"\n      }, {\n        name: \"FODMAP free\",\n        apiName: \"fodmap-free\",\n        description: \"Does not contain FODMAP foods\"\n      }, {\n        name: \"Gluten\",\n        apiName: \"gluten-free\",\n        description: \"No ingredients containing gluten\"\n      }, {\n        name: \"Keto\",\n        apiName: \"keto-friendly\",\n        description: \"Maximum 7 grams of net carbs per serving\"\n      }, {\n        name: \"Kidney friendly\",\n        apiName: \"kidney-friendly\",\n        description: \"per serving – phosphorus less than 250 mg AND potassium less than 500 mg AND sodium: less than 500 mg\"\n      }, {\n        name: \"Kosher\",\n        apiName: \"kosher\",\n        description: \"contains only ingredients allowed by the kosher diet. However it does not guarantee kosher preparation of the ingredients themselves\"\n      }, {\n        name: \"Low potassium\",\n        apiName: \"low-potassium\",\n        description: \"Less than 150mg per serving\"\n      }, {\n        name: \"Lupine-free\",\n        apiName: \"lupine-free\",\n        description: \"does not contain lupine or derivatives\"\n      }, {\n        name: \"Mustard-free\",\n        apiName: \"mustard-free\",\n        description: \"does not contain mustard or derivatives\"\n      }, {\n        name: \"n/a\",\n        apiName: \"low-fat-abs\",\n        description: \"Less than 3g of fat per serving\"\n      }, {\n        name: \"No oil added\",\n        apiName: \"No-oil-added\",\n        description: \"No oil added except to what is contained in the basic ingredients\"\n      }, {\n        name: \"No-sugar\",\n        apiName: \"low-sugar\",\n        description: \"No simple sugars – glucose, dextrose, galactose, fructose, sucrose, lactose, maltose\"\n      }, {\n        name: \"Paleo\",\n        apiName: \"paleo\",\n        description: \"Excludes what are perceived to be agricultural products; grains, legumes, dairy products, potatoes, refined salt, refined sugar, and processed oils\"\n      }, {\n        name: \"Peanuts\",\n        apiName: \"peanut-free\",\n        description: \"No peanuts or products containing peanuts\"\n      }, {\n        name: \"Pescatarian\",\n        apiName: \"pecatarian\",\n        description: \"Does not contain meat or meat based products, can contain dairy and fish\"\n      }, {\n        name: \"Pork-free\",\n        apiName: \"pork-free\",\n        description: \"does not contain pork or derivatives\"\n      }, {\n        name: \"Red meat-free\",\n        apiName: \"red-meat-free\",\n        description: \"does not contain beef, lamb, pork, duck, goose, game, horse, and other types of red meat or products containing red meat.\"\n      }, {\n        name: \"Sesame-free\",\n        apiName: \"sesame-free\",\n        description: \"does not contain sesame seed or derivatives\"\n      }, {\n        name: \"Shellfish\",\n        apiName: \"shellfish-free\",\n        description: \"No shellfish or shellfish derivatives\"\n      }, {\n        name: \"Soy\",\n        apiName: \"soy-free\",\n        description: \"No soy or products containing soy\"\n      }, {\n        name: \"Sugar-conscious\",\n        apiName: \"sugar-conscious\",\n        description: \"Less than 4g of sugar per serving\"\n      }, {\n        name: \"Tree Nuts\",\n        apiName: \"tree-nut-free\",\n        description: \"No tree nuts or products containing tree nuts\"\n      }, {\n        name: \"Vegan\",\n        apiName: \"vegan\",\n        description: \"No meat, poultry, fish, dairy, eggs or honey\"\n      }, {\n        name: \"Vegetarian\",\n        apiName: \"vegetarian\",\n        description: \"No meat, poultry, or fish\"\n      }, {\n        name: \"Wheat-free\",\n        apiName: \"wheat-free\",\n        description: \"No wheat, can have gluten though\"\n      }]\n    } // || validation using yup\n    ,\n    validationSchema: validationSchema,\n    onSubmit: () => getAdvancedSearch(),\n    onSubmit: (data, {\n      setSubmitting,\n      resetForm\n    }) => {\n      setSubmitting(true); // *make async call\n\n      console.log(\"Submit: \", data);\n      setSubmitting(false);\n      resetForm(true);\n    },\n    className: \"advanced-search-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 417,\n      columnNumber: 11\n    }\n  }, ({\n    values,\n    errors,\n    isSubmitting,\n    handleBlur\n  }) => /*#__PURE__*/React.createElement(Form, {\n    style: {\n      margin: \"10px\",\n      marginLeft: \"7%\",\n      marginRight: \"7%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 663,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: \"70%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 666,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 667,\n      columnNumber: 19\n    }\n  }, \"Search: \"), /*#__PURE__*/React.createElement(TextField, {\n    variant: \"outlined\",\n    id: \"search\",\n    label: \"Search\",\n    type: \"search\",\n    placeholder: \"Chicken\",\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 668,\n      columnNumber: 19\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 678,\n      columnNumber: 17\n    }\n  }, \"Items per Page: \"), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 680,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 9,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 681,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(Slider, {\n    value: typeof value === \"number\" ? value : 0,\n    onChange: handleSliderChange,\n    defaultValue: 10,\n    getAriaValueText: valuetext,\n    \"aria-labelledby\": \"item-slider\",\n    valueLabelDisplay: \"auto\",\n    step: 1,\n    min: 10,\n    max: 50,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 682,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 694,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    defaultValue: \"10\",\n    value: value,\n    onChange: handleInputChange,\n    onBlur: handleBlur,\n    type: \"number\",\n    inputProps: {\n      step: 5,\n      min: 10,\n      max: 50,\n      \"aria-labelledby\": \"item-slider\"\n    },\n    InputLabelProps: {\n      shrink: true\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 695,\n      columnNumber: 21\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 715,\n      columnNumber: 17\n    }\n  }, \"Meal Type: \"), /*#__PURE__*/React.createElement(RadioGroup, {\n    row: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 716,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(MyRadio, {\n    name: \"MealType\",\n    type: \"radio\",\n    value: \"Breakfast\",\n    as: Radio,\n    label: \"Breakfast\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 717,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(MyRadio, {\n    name: \"MealType\",\n    type: \"radio\",\n    value: \"Lunch\",\n    as: Radio,\n    label: \"Lunch\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 724,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(MyRadio, {\n    name: \"MealType\",\n    type: \"radio\",\n    value: \"Dinner\",\n    as: Radio,\n    label: \"Dinner\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 731,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(MyRadio, {\n    name: \"MealType\",\n    type: \"radio\",\n    value: \"Snack\",\n    as: Radio,\n    label: \"Snack\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 738,\n      columnNumber: 19\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 749,\n      columnNumber: 17\n    }\n  }, \"Dish Type: \"), /*#__PURE__*/React.createElement(FieldArray, {\n    name: \"Dish Type\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 750,\n      columnNumber: 17\n    }\n  }, arrayHelpers => values.dishTypes.map(dishType => {\n    return /*#__PURE__*/React.createElement(MyCheckBox, {\n      key: dishType,\n      name: \"dishType\",\n      type: \"checkbox\",\n      value: dishType,\n      as: Checkbox,\n      label: dishType,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 754,\n        columnNumber: 25\n      }\n    });\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 768,\n      columnNumber: 17\n    }\n  }, \"Cuisine Type: \"), /*#__PURE__*/React.createElement(FieldArray, {\n    name: \"CuisineTypes\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 769,\n      columnNumber: 17\n    }\n  }, arrayHelpers => values.cuisineTypes.map(cuisineType => {\n    return /*#__PURE__*/React.createElement(MyRadio, {\n      key: cuisineType,\n      name: \"cuisineType\",\n      type: \"radio\",\n      value: cuisineType,\n      as: Radio,\n      label: cuisineType,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 773,\n        columnNumber: 25\n      }\n    });\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 787,\n      columnNumber: 17\n    }\n  }, \"Diet: \"), /*#__PURE__*/React.createElement(FieldArray, {\n    name: \"Diet\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 788,\n      columnNumber: 17\n    }\n  }, arrayHelpers => values.dietLabels.map(dietLabel => {\n    return /*#__PURE__*/React.createElement(MyRadio, {\n      name: \"dietLabel\",\n      type: \"radio\",\n      value: dietLabel.apiName,\n      as: Radio,\n      label: dietLabel.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 792,\n        columnNumber: 25\n      }\n    });\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 805,\n      columnNumber: 17\n    }\n  }, \"Health: \"), /*#__PURE__*/React.createElement(FieldArray, {\n    row: true,\n    name: \"Health\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 806,\n      columnNumber: 17\n    }\n  }, arrayHelpers => values.healthLabels.map(healthLabel => {\n    return /*#__PURE__*/React.createElement(MyCheckBox, {\n      name: \"healthLabel\",\n      type: \"checkbox\",\n      value: healthLabel.apiName,\n      as: Checkbox,\n      label: healthLabel.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 810,\n        columnNumber: 25\n      }\n    });\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 822,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    disabled: isSubmitting,\n    type: \"submit\",\n    onSubmit: () => setModalIsOpen(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 823,\n      columnNumber: 19\n    }\n  }, \"Submit\")), /*#__PURE__*/React.createElement(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 831,\n      columnNumber: 17\n    }\n  }, JSON.stringify(values, null, 2)), /*#__PURE__*/React.createElement(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 832,\n      columnNumber: 17\n    }\n  }, JSON.stringify(errors, null, 2))))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 837,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setModalIsOpen(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 838,\n      columnNumber: 11\n    }\n  }, \"Close\"))));\n};\n\nexport default App;","map":{"version":3,"sources":["E:/Projects/FrontEnd/ReactJS/frontend014-recipe/src/App.js"],"names":["React","useEffect","useState","Recipe","Nav","PaginationFooter","Modal","PopoverStickOnHover","FormikForm","Form","Button","FontAwesomeIcon","faSearch","setAppElement","App","APP_ID","APP_KEY","recipes","setRecipes","search","setSearch","advancedSearch","setAdvancedSearch","query","setQuery","isHovered","setIsHovered","cards","setCards","loading","setLoading","currentPage","setCurrentPage","cardsPerPage","setCardsPerPage","modalIsOpen","setModalIsOpen","selectDishTypes","setSelectDishTypes","selectCuisineTypes","setSelectCuisineTypes","selectDietLabels","setSelectDietLabels","selectHealthLabels","setSelectHealthLabels","selectMealTypes","setSelectMealTypes","indexOfFirstCard","indexOfLastCard","inputClass","buttonClass","dishTypes","cuisineTypes","dietLabels","name","apiName","description","healthLabels","searchRange","setSearchRange","getRecipes","response","fetch","data","json","hits","console","log","totalCards","paginate","pageNumber","updateSearch","e","target","value","updateAdvancedSearch","getSearch","preventDefault","getAdvancedSearch","map","recipe","label","calories","image","ingredients","overlay","backgroundColor","display","marginLeft","validationSchema","setSubmitting","resetForm","values","errors","isSubmitting","handleBlur","margin","marginRight","width","classes","root","handleSliderChange","valuetext","handleInputChange","step","min","max","shrink","Radio","arrayHelpers","dishType","Checkbox","cuisineType","dietLabel","healthLabel","JSON","stringify"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,gBAAP,MAA6B,cAA7B;AACA,OAAOC,KAAP,MAAkB,aAAlB;AAEA,OAAOC,mBAAP,MAAgC,WAAhC;AACA,OAAOC,UAAP,MAAuB,cAAvB;AAEA,SAASC,IAAT,QAAqB,iBAArB;AACA,SAASC,MAAT,QAAuB,mBAAvB;AAEA,OAAO,WAAP;AAEA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,QAAT,QAAyB,mCAAzB;AAEAN,KAAK,CAACO,aAAN,CAAoB,OAApB;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAChB,QAAMC,MAAM,GAAG,UAAf;AACA,QAAMC,OAAO,GAAG,kCAAhB;AAEA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBhB,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACiB,MAAD,EAASC,SAAT,IAAsBlB,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACmB,cAAD,EAAiBC,iBAAjB,IAAsCpB,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM,CAACqB,KAAD,EAAQC,QAAR,IAAoBtB,QAAQ,CAAC,SAAD,CAAlC;AACA,QAAM,CAACuB,SAAD,EAAYC,YAAZ,IAA4BxB,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACyB,KAAD,EAAQC,QAAR,IAAoB1B,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAAC2B,OAAD,EAAUC,UAAV,IAAwB5B,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAAC6B,WAAD,EAAcC,cAAd,IAAgC9B,QAAQ,CAAC,CAAD,CAA9C;AACA,QAAM,CAAC+B,YAAD,EAAeC,eAAf,IAAkChC,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACiC,WAAD,EAAcC,cAAd,IAAgClC,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM,CAACmC,eAAD,EAAkBC,kBAAlB,IAAwCpC,QAAQ,CAAC,EAAD,CAAtD;AACA,QAAM,CAACqC,kBAAD,EAAqBC,qBAArB,IAA8CtC,QAAQ,CAAC,EAAD,CAA5D;AACA,QAAM,CAACuC,gBAAD,EAAmBC,mBAAnB,IAA0CxC,QAAQ,CAAC,EAAD,CAAxD;AACA,QAAM,CAACyC,kBAAD,EAAqBC,qBAArB,IAA8C1C,QAAQ,CAAC,EAAD,CAA5D;AACA,QAAM,CAAC2C,eAAD,EAAkBC,kBAAlB,IAAwC5C,QAAQ,CAAC,EAAD,CAAtD,CAlBgB,CAmBhB;;AAEA,MAAI6C,gBAAgB,GAAG,CAAvB;AACA,MAAIC,eAAe,GAAG,EAAtB;AACA,MAAIC,UAAU,GAAG,YAAjB;AACA,MAAIC,WAAW,GAAG,eAAlB;AAEA,QAAMC,SAAS,GAAG,CAChB,OADgB,EAEhB,SAFgB,EAGhB,uBAHgB,EAIhB,QAJgB,EAKhB,UALgB,EAMhB,aANgB,EAOhB,SAPgB,EAQhB,OARgB,EAShB,UATgB,EAUhB,OAVgB,EAWhB,YAXgB,EAYhB,WAZgB,EAahB,MAbgB,EAchB,SAdgB,EAehB,QAfgB,CAAlB;AAkBA,QAAMC,YAAY,GAAG,CACnB,UADmB,EAEnB,OAFmB,EAGnB,SAHmB,EAInB,WAJmB,EAKnB,gBALmB,EAMnB,SANmB,EAOnB,gBAPmB,EAQnB,QARmB,EASnB,QATmB,EAUnB,SAVmB,EAWnB,UAXmB,EAYnB,QAZmB,EAanB,eAbmB,EAcnB,SAdmB,EAenB,gBAfmB,EAgBnB,QAhBmB,EAiBnB,gBAjBmB,EAkBnB,kBAlBmB,CAArB;AAqBA,QAAMC,UAAU,GAAG,CACjB;AACEC,IAAAA,IAAI,EAAE,UADR;AAEEC,IAAAA,OAAO,EAAE,UAFX;AAGEC,IAAAA,WAAW,EAAE;AAHf,GADiB,EAMjB;AACEF,IAAAA,IAAI,EAAE,YADR;AAEEC,IAAAA,OAAO,EAAE,YAFX;AAGEC,IAAAA,WAAW,EAAE;AAHf,GANiB,EAWjB;AACEF,IAAAA,IAAI,EAAE,cADR;AAEEC,IAAAA,OAAO,EAAE,cAFX;AAGEC,IAAAA,WAAW,EAAE;AAHf,GAXiB,EAgBjB;AACEF,IAAAA,IAAI,EAAE,UADR;AAEEC,IAAAA,OAAO,EAAE,UAFX;AAGEC,IAAAA,WAAW,EAAE;AAHf,GAhBiB,EAqBjB;AACEF,IAAAA,IAAI,EAAE,SADR;AAEEC,IAAAA,OAAO,EAAE,SAFX;AAGEC,IAAAA,WAAW,EAAE;AAHf,GArBiB,EA0BjB;AACEF,IAAAA,IAAI,EAAE,YADR;AAEEC,IAAAA,OAAO,EAAE,YAFX;AAGEC,IAAAA,WAAW,EAAE;AAHf,GA1BiB,CAAnB;AAiCA,QAAMC,YAAY,GAAG,CACnB;AACEH,IAAAA,IAAI,EAAE,cADR;AAEEC,IAAAA,OAAO,EAAE,cAFX;AAGEC,IAAAA,WAAW,EAAE;AAHf,GADmB,EAMnB;AACEF,IAAAA,IAAI,EAAE,aADR;AAEEC,IAAAA,OAAO,EAAE,aAFX;AAGEC,IAAAA,WAAW,EAAE;AAHf,GANmB,EAWnB;AACEF,IAAAA,IAAI,EAAE,iBADR;AAEEC,IAAAA,OAAO,EAAE,iBAFX;AAGEC,IAAAA,WAAW,EACT;AAJJ,GAXmB,EAiBnB;AACEF,IAAAA,IAAI,EAAE,OADR;AAEEC,IAAAA,OAAO,EAAE,YAFX;AAGEC,IAAAA,WAAW,EAAE;AAHf,GAjBmB,EAsBnB;AACEF,IAAAA,IAAI,EAAE,MADR;AAEEC,IAAAA,OAAO,EAAE,UAFX;AAGEC,IAAAA,WAAW,EAAE;AAHf,GAtBmB,EA2BnB;AACEF,IAAAA,IAAI,EAAE,MADR;AAEEC,IAAAA,OAAO,EAAE,WAFX;AAGEC,IAAAA,WAAW,EAAE;AAHf,GA3BmB,EAgCnB;AACEF,IAAAA,IAAI,EAAE,aADR;AAEEC,IAAAA,OAAO,EAAE,aAFX;AAGEC,IAAAA,WAAW,EAAE;AAHf,GAhCmB,EAqCnB;AACEF,IAAAA,IAAI,EAAE,QADR;AAEEC,IAAAA,OAAO,EAAE,aAFX;AAGEC,IAAAA,WAAW,EAAE;AAHf,GArCmB,EA0CnB;AACEF,IAAAA,IAAI,EAAE,MADR;AAEEC,IAAAA,OAAO,EAAE,eAFX;AAGEC,IAAAA,WAAW,EAAE;AAHf,GA1CmB,EA+CnB;AACEF,IAAAA,IAAI,EAAE,iBADR;AAEEC,IAAAA,OAAO,EAAE,iBAFX;AAGEC,IAAAA,WAAW,EACT;AAJJ,GA/CmB,EAqDnB;AACEF,IAAAA,IAAI,EAAE,QADR;AAEEC,IAAAA,OAAO,EAAE,QAFX;AAGEC,IAAAA,WAAW,EACT;AAJJ,GArDmB,EA2DnB;AACEF,IAAAA,IAAI,EAAE,eADR;AAEEC,IAAAA,OAAO,EAAE,eAFX;AAGEC,IAAAA,WAAW,EAAE;AAHf,GA3DmB,EAgEnB;AACEF,IAAAA,IAAI,EAAE,aADR;AAEEC,IAAAA,OAAO,EAAE,aAFX;AAGEC,IAAAA,WAAW,EAAE;AAHf,GAhEmB,EAqEnB;AACEF,IAAAA,IAAI,EAAE,cADR;AAEEC,IAAAA,OAAO,EAAE,cAFX;AAGEC,IAAAA,WAAW,EAAE;AAHf,GArEmB,EA0EnB;AACEF,IAAAA,IAAI,EAAE,KADR;AAEEC,IAAAA,OAAO,EAAE,aAFX;AAGEC,IAAAA,WAAW,EAAE;AAHf,GA1EmB,EA+EnB;AACEF,IAAAA,IAAI,EAAE,cADR;AAEEC,IAAAA,OAAO,EAAE,cAFX;AAGEC,IAAAA,WAAW,EACT;AAJJ,GA/EmB,EAqFnB;AACEF,IAAAA,IAAI,EAAE,UADR;AAEEC,IAAAA,OAAO,EAAE,WAFX;AAGEC,IAAAA,WAAW,EACT;AAJJ,GArFmB,EA2FnB;AACEF,IAAAA,IAAI,EAAE,OADR;AAEEC,IAAAA,OAAO,EAAE,OAFX;AAGEC,IAAAA,WAAW,EACT;AAJJ,GA3FmB,EAiGnB;AACEF,IAAAA,IAAI,EAAE,SADR;AAEEC,IAAAA,OAAO,EAAE,aAFX;AAGEC,IAAAA,WAAW,EAAE;AAHf,GAjGmB,EAsGnB;AACEF,IAAAA,IAAI,EAAE,aADR;AAEEC,IAAAA,OAAO,EAAE,YAFX;AAGEC,IAAAA,WAAW,EACT;AAJJ,GAtGmB,EA4GnB;AACEF,IAAAA,IAAI,EAAE,WADR;AAEEC,IAAAA,OAAO,EAAE,WAFX;AAGEC,IAAAA,WAAW,EAAE;AAHf,GA5GmB,EAiHnB;AACEF,IAAAA,IAAI,EAAE,eADR;AAEEC,IAAAA,OAAO,EAAE,eAFX;AAGEC,IAAAA,WAAW,EACT;AAJJ,GAjHmB,EAuHnB;AACEF,IAAAA,IAAI,EAAE,aADR;AAEEC,IAAAA,OAAO,EAAE,aAFX;AAGEC,IAAAA,WAAW,EAAE;AAHf,GAvHmB,EA4HnB;AACEF,IAAAA,IAAI,EAAE,WADR;AAEEC,IAAAA,OAAO,EAAE,gBAFX;AAGEC,IAAAA,WAAW,EAAE;AAHf,GA5HmB,EAiInB;AACEF,IAAAA,IAAI,EAAE,KADR;AAEEC,IAAAA,OAAO,EAAE,UAFX;AAGEC,IAAAA,WAAW,EAAE;AAHf,GAjImB,EAsInB;AACEF,IAAAA,IAAI,EAAE,iBADR;AAEEC,IAAAA,OAAO,EAAE,iBAFX;AAGEC,IAAAA,WAAW,EAAE;AAHf,GAtImB,EA2InB;AACEF,IAAAA,IAAI,EAAE,WADR;AAEEC,IAAAA,OAAO,EAAE,eAFX;AAGEC,IAAAA,WAAW,EAAE;AAHf,GA3ImB,EAgJnB;AACEF,IAAAA,IAAI,EAAE,OADR;AAEEC,IAAAA,OAAO,EAAE,OAFX;AAGEC,IAAAA,WAAW,EAAE;AAHf,GAhJmB,EAqJnB;AACEF,IAAAA,IAAI,EAAE,YADR;AAEEC,IAAAA,OAAO,EAAE,YAFX;AAGEC,IAAAA,WAAW,EAAE;AAHf,GArJmB,EA0JnB;AACEF,IAAAA,IAAI,EAAE,YADR;AAEEC,IAAAA,OAAO,EAAE,YAFX;AAGEC,IAAAA,WAAW,EAAE;AAHf,GA1JmB,CAArB;AAgKA,QAAM,CAACE,WAAD,EAAcC,cAAd,IAAgCzD,QAAQ,CAAC,eAAD,CAA9C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAe2D,UAAf,GAA4B;AAC1B;AACA9B,MAAAA,UAAU,CAAC,IAAD,CAAV,CAF0B,CAG1B;;AACA,YAAM+B,QAAQ,GAAG,MAAMC,KAAK,CACzB,mCAAkCvC,KAAM,WAAUR,MAAO,YAAWC,OAAQ,GAAE0C,WAAY,EADjE,CAA5B;AAGA,YAAMK,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AACA9C,MAAAA,UAAU,CAAC6C,IAAI,CAACE,IAAN,CAAV;AACArC,MAAAA,QAAQ,CAACmC,IAAD,CAAR;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACAjC,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD;;AACD8B,IAAAA,UAAU;AACX,GAfQ,EAeN,CAACrC,KAAD,EAAQmC,WAAR,CAfM,CAAT;AAiBA,QAAMU,UAAU,GAAG,GAAnB,CArRgB,CAuRhB;;AACA,QAAMC,QAAQ,GAAIC,UAAD,IAAgB;AAC/BJ,IAAAA,OAAO,CAACC,GAAR,CAAYG,UAAZ;AACAtC,IAAAA,cAAc,CAACsC,UAAD,CAAd;AAEAJ,IAAAA,OAAO,CAACC,GAAR,CAAYpC,WAAZ;AACAiB,IAAAA,eAAe,GAAGsB,UAAU,GAAGrC,YAA/B;AACAc,IAAAA,gBAAgB,GAAGC,eAAe,GAAGf,YAArC;AAEAiC,IAAAA,OAAO,CAACC,GAAR,CAAYnB,eAAZ;AAEAkB,IAAAA,OAAO,CAACC,GAAR,CAAYpB,gBAAZ;AACAY,IAAAA,cAAc,CAAE,SAAQZ,gBAAiB,OAAMC,eAAgB,EAAjD,CAAd;AACD,GAZD;;AAcA,QAAMuB,YAAY,GAAIC,CAAD,IAAO;AAC1BpD,IAAAA,SAAS,CAACoD,CAAC,CAACC,MAAF,CAASC,KAAV,CAAT;AACD,GAFD;;AAGA,QAAMC,oBAAoB,GAAIH,CAAD,IAAO;AAClClD,IAAAA,iBAAiB,CAACkD,CAAC,CAACC,MAAF,CAASC,KAAV,CAAjB;AACD,GAFD;;AAIA,QAAME,SAAS,GAAIJ,CAAD,IAAO;AACvB;AACAA,IAAAA,CAAC,CAACK,cAAF;;AACA,QAAI,EAAE1D,MAAM,KAAK,EAAX,IAAiBA,MAAM,KAAK,GAA9B,CAAJ,EAAwC;AACtCK,MAAAA,QAAQ,CAACL,MAAD,CAAR;AACAC,MAAAA,SAAS,CAAC,EAAD,CAAT;AACD;AACF,GAPD;;AASA,QAAM0D,iBAAiB,GAAIN,CAAD,IAAO;AAC/BA,IAAAA,CAAC,CAACK,cAAF;;AACA,QAAI,EAAExD,cAAc,KAAK,EAAnB,IAAyBA,cAAc,KAAK,GAA9C,CAAJ,EAAwD;AACtDG,MAAAA,QAAQ,CAACH,cAAD,CAAR;AACAC,MAAAA,iBAAiB,CAAC,EAAD,CAAjB;AACAc,MAAAA,cAAc,CAAC,KAAD,CAAd;AACD;;AAED,QAAIH,YAAY,KAAK,EAArB,EAAyB;AACvBC,MAAAA,eAAe,CAACD,YAAD,CAAf;AACD;AACF,GAXD;;AAaA,MAAIR,SAAJ,EAAe;AACbwB,IAAAA,UAAU,GAAG,8BAAb;AACAC,IAAAA,WAAW,GAAG,oCAAd;AACD,GAHD,MAGO;AACLD,IAAAA,UAAU,GAAG,YAAb;AACAC,IAAAA,WAAW,GAAG,eAAd;AACD;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK3B,KAAL,CAHF,CADF,eAME;AACE,IAAA,QAAQ,EAAEqD,SADZ;AAEE,IAAA,SAAS,EAAC,aAFZ;AAGE,IAAA,YAAY,EAAE,MAAMlD,YAAY,CAAC,IAAD,CAHlC;AAIE,IAAA,YAAY,EAAE,MAAMA,YAAY,CAAC,KAAD,CAJlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAME;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,SAAS,EAAEuB,UAFb;AAGE,IAAA,KAAK,EAAE9B,MAHT;AAIE,IAAA,QAAQ,EAAEoD,YAJZ;AAKE,IAAA,WAAW,EAAC,gBALd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,eAaE;AAAQ,IAAA,SAAS,EAAErB,WAAnB;AAAgC,IAAA,IAAI,EAAC,QAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,eAAD;AAAiB,IAAA,IAAI,EAAEtC,QAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAbF,CANF,eAuBE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAE,MAAMwB,cAAc,CAAC,IAAD,CAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAvBF,CAFF,eA4BE;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEGnB,OAAO,CAAC8D,GAAR,CAAaC,MAAD,iBACX,oBAAC,MAAD;AACE,IAAA,GAAG,EAAEA,MAAM,CAACA,MAAP,CAAcC,KAAd,GAAsBD,MAAM,CAACA,MAAP,CAAcE,QAD3C;AAEE,IAAA,KAAK,EAAEF,MAAM,CAACA,MAAP,CAAcC,KAFvB;AAGE,IAAA,QAAQ,EAAED,MAAM,CAACA,MAAP,CAAcE,QAH1B;AAIE,IAAA,KAAK,EAAEF,MAAM,CAACA,MAAP,CAAcG,KAJvB;AAKE,IAAA,WAAW,EAAEH,MAAM,CAACA,MAAP,CAAcI,WAL7B;AAME,IAAA,OAAO,EAAEvD,OANX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CAFH,CA5BF,eAyCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,gBAAD;AACE,IAAA,YAAY,EAAEI,YADhB;AAEE,IAAA,UAAU,EAAEmC,UAFd;AAGE,IAAA,QAAQ,EAAEC,QAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAzCF,eAiDE,oBAAC,KAAD;AACE,IAAA,MAAM,EAAElC,WADV;AAEE,IAAA,cAAc,EAAE,MAAMC,cAAc,CAAC,KAAD,CAFtC;AAGE,IAAA,KAAK,EAAE;AACLiD,MAAAA,OAAO,EAAE;AAAEC,QAAAA,eAAe,EAAE;AAAnB;AADJ,KAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAOE;AACE,IAAA,SAAS,EAAC,aADZ;AAEE,IAAA,KAAK,EAAE;AAAEC,MAAAA,OAAO,EAAE,MAAX;AAAmBC,MAAAA,UAAU,EAAE;AAA/B,KAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAJF,CAPF,eAcE;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AACE,IAAA,aAAa,EAAE;AACbrE,MAAAA,MAAM,EAAE,EADK;AAEbgC,MAAAA,SAAS,EAAE,CACT,OADS,EAET,SAFS,EAGT,uBAHS,EAIT,QAJS,EAKT,UALS,EAMT,aANS,EAOT,SAPS,EAQT,OARS,EAST,UATS,EAUT,OAVS,EAWT,YAXS,EAYT,WAZS,EAaT,MAbS,EAcT,SAdS,EAeT,QAfS,CAFE;AAmBbE,MAAAA,UAAU,EAAE,CACV;AACEC,QAAAA,IAAI,EAAE,UADR;AAEEC,QAAAA,OAAO,EAAE,UAFX;AAGEC,QAAAA,WAAW,EAAE;AAHf,OADU,EAMV;AACEF,QAAAA,IAAI,EAAE,YADR;AAEEC,QAAAA,OAAO,EAAE,YAFX;AAGEC,QAAAA,WAAW,EAAE;AAHf,OANU,EAWV;AACEF,QAAAA,IAAI,EAAE,cADR;AAEEC,QAAAA,OAAO,EAAE,cAFX;AAGEC,QAAAA,WAAW,EAAE;AAHf,OAXU,EAgBV;AACEF,QAAAA,IAAI,EAAE,UADR;AAEEC,QAAAA,OAAO,EAAE,UAFX;AAGEC,QAAAA,WAAW,EAAE;AAHf,OAhBU,EAqBV;AACEF,QAAAA,IAAI,EAAE,SADR;AAEEC,QAAAA,OAAO,EAAE,SAFX;AAGEC,QAAAA,WAAW,EAAE;AAHf,OArBU,EA0BV;AACEF,QAAAA,IAAI,EAAE,YADR;AAEEC,QAAAA,OAAO,EAAE,YAFX;AAGEC,QAAAA,WAAW,EAAE;AAHf,OA1BU,CAnBC;AAmDbJ,MAAAA,YAAY,EAAE,CACZ,UADY,EAEZ,OAFY,EAGZ,SAHY,EAIZ,WAJY,EAKZ,gBALY,EAMZ,SANY,EAOZ,gBAPY,EAQZ,QARY,EASZ,QATY,EAUZ,SAVY,EAWZ,UAXY,EAYZ,QAZY,EAaZ,eAbY,EAcZ,SAdY,EAeZ,gBAfY,EAgBZ,QAhBY,EAiBZ,gBAjBY,EAkBZ,kBAlBY,CAnDD;AAuEbK,MAAAA,YAAY,EAAE,CACZ;AACEH,QAAAA,IAAI,EAAE,cADR;AAEEC,QAAAA,OAAO,EAAE,cAFX;AAGEC,QAAAA,WAAW,EAAE;AAHf,OADY,EAMZ;AACEF,QAAAA,IAAI,EAAE,aADR;AAEEC,QAAAA,OAAO,EAAE,aAFX;AAGEC,QAAAA,WAAW,EAAE;AAHf,OANY,EAWZ;AACEF,QAAAA,IAAI,EAAE,iBADR;AAEEC,QAAAA,OAAO,EAAE,iBAFX;AAGEC,QAAAA,WAAW,EACT;AAJJ,OAXY,EAiBZ;AACEF,QAAAA,IAAI,EAAE,OADR;AAEEC,QAAAA,OAAO,EAAE,YAFX;AAGEC,QAAAA,WAAW,EAAE;AAHf,OAjBY,EAsBZ;AACEF,QAAAA,IAAI,EAAE,MADR;AAEEC,QAAAA,OAAO,EAAE,UAFX;AAGEC,QAAAA,WAAW,EAAE;AAHf,OAtBY,EA2BZ;AACEF,QAAAA,IAAI,EAAE,MADR;AAEEC,QAAAA,OAAO,EAAE,WAFX;AAGEC,QAAAA,WAAW,EAAE;AAHf,OA3BY,EAgCZ;AACEF,QAAAA,IAAI,EAAE,aADR;AAEEC,QAAAA,OAAO,EAAE,aAFX;AAGEC,QAAAA,WAAW,EAAE;AAHf,OAhCY,EAqCZ;AACEF,QAAAA,IAAI,EAAE,QADR;AAEEC,QAAAA,OAAO,EAAE,aAFX;AAGEC,QAAAA,WAAW,EAAE;AAHf,OArCY,EA0CZ;AACEF,QAAAA,IAAI,EAAE,MADR;AAEEC,QAAAA,OAAO,EAAE,eAFX;AAGEC,QAAAA,WAAW,EAAE;AAHf,OA1CY,EA+CZ;AACEF,QAAAA,IAAI,EAAE,iBADR;AAEEC,QAAAA,OAAO,EAAE,iBAFX;AAGEC,QAAAA,WAAW,EACT;AAJJ,OA/CY,EAqDZ;AACEF,QAAAA,IAAI,EAAE,QADR;AAEEC,QAAAA,OAAO,EAAE,QAFX;AAGEC,QAAAA,WAAW,EACT;AAJJ,OArDY,EA2DZ;AACEF,QAAAA,IAAI,EAAE,eADR;AAEEC,QAAAA,OAAO,EAAE,eAFX;AAGEC,QAAAA,WAAW,EAAE;AAHf,OA3DY,EAgEZ;AACEF,QAAAA,IAAI,EAAE,aADR;AAEEC,QAAAA,OAAO,EAAE,aAFX;AAGEC,QAAAA,WAAW,EAAE;AAHf,OAhEY,EAqEZ;AACEF,QAAAA,IAAI,EAAE,cADR;AAEEC,QAAAA,OAAO,EAAE,cAFX;AAGEC,QAAAA,WAAW,EAAE;AAHf,OArEY,EA0EZ;AACEF,QAAAA,IAAI,EAAE,KADR;AAEEC,QAAAA,OAAO,EAAE,aAFX;AAGEC,QAAAA,WAAW,EAAE;AAHf,OA1EY,EA+EZ;AACEF,QAAAA,IAAI,EAAE,cADR;AAEEC,QAAAA,OAAO,EAAE,cAFX;AAGEC,QAAAA,WAAW,EACT;AAJJ,OA/EY,EAqFZ;AACEF,QAAAA,IAAI,EAAE,UADR;AAEEC,QAAAA,OAAO,EAAE,WAFX;AAGEC,QAAAA,WAAW,EACT;AAJJ,OArFY,EA2FZ;AACEF,QAAAA,IAAI,EAAE,OADR;AAEEC,QAAAA,OAAO,EAAE,OAFX;AAGEC,QAAAA,WAAW,EACT;AAJJ,OA3FY,EAiGZ;AACEF,QAAAA,IAAI,EAAE,SADR;AAEEC,QAAAA,OAAO,EAAE,aAFX;AAGEC,QAAAA,WAAW,EAAE;AAHf,OAjGY,EAsGZ;AACEF,QAAAA,IAAI,EAAE,aADR;AAEEC,QAAAA,OAAO,EAAE,YAFX;AAGEC,QAAAA,WAAW,EACT;AAJJ,OAtGY,EA4GZ;AACEF,QAAAA,IAAI,EAAE,WADR;AAEEC,QAAAA,OAAO,EAAE,WAFX;AAGEC,QAAAA,WAAW,EAAE;AAHf,OA5GY,EAiHZ;AACEF,QAAAA,IAAI,EAAE,eADR;AAEEC,QAAAA,OAAO,EAAE,eAFX;AAGEC,QAAAA,WAAW,EACT;AAJJ,OAjHY,EAuHZ;AACEF,QAAAA,IAAI,EAAE,aADR;AAEEC,QAAAA,OAAO,EAAE,aAFX;AAGEC,QAAAA,WAAW,EAAE;AAHf,OAvHY,EA4HZ;AACEF,QAAAA,IAAI,EAAE,WADR;AAEEC,QAAAA,OAAO,EAAE,gBAFX;AAGEC,QAAAA,WAAW,EAAE;AAHf,OA5HY,EAiIZ;AACEF,QAAAA,IAAI,EAAE,KADR;AAEEC,QAAAA,OAAO,EAAE,UAFX;AAGEC,QAAAA,WAAW,EAAE;AAHf,OAjIY,EAsIZ;AACEF,QAAAA,IAAI,EAAE,iBADR;AAEEC,QAAAA,OAAO,EAAE,iBAFX;AAGEC,QAAAA,WAAW,EAAE;AAHf,OAtIY,EA2IZ;AACEF,QAAAA,IAAI,EAAE,WADR;AAEEC,QAAAA,OAAO,EAAE,eAFX;AAGEC,QAAAA,WAAW,EAAE;AAHf,OA3IY,EAgJZ;AACEF,QAAAA,IAAI,EAAE,OADR;AAEEC,QAAAA,OAAO,EAAE,OAFX;AAGEC,QAAAA,WAAW,EAAE;AAHf,OAhJY,EAqJZ;AACEF,QAAAA,IAAI,EAAE,YADR;AAEEC,QAAAA,OAAO,EAAE,YAFX;AAGEC,QAAAA,WAAW,EAAE;AAHf,OArJY,EA0JZ;AACEF,QAAAA,IAAI,EAAE,YADR;AAEEC,QAAAA,OAAO,EAAE,YAFX;AAGEC,QAAAA,WAAW,EAAE;AAHf,OA1JY;AAvED,KADjB,CAyOE;AAzOF;AA0OE,IAAA,gBAAgB,EAAEiC,gBA1OpB;AA2OE,IAAA,QAAQ,EAAE,MAAMX,iBAAiB,EA3OnC;AA4OE,IAAA,QAAQ,EAAE,CAACf,IAAD,EAAO;AAAE2B,MAAAA,aAAF;AAAiBC,MAAAA;AAAjB,KAAP,KAAwC;AAChDD,MAAAA,aAAa,CAAC,IAAD,CAAb,CADgD,CAEhD;;AACAxB,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBJ,IAAxB;AACA2B,MAAAA,aAAa,CAAC,KAAD,CAAb;AACAC,MAAAA,SAAS,CAAC,IAAD,CAAT;AACD,KAlPH;AAmPE,IAAA,SAAS,EAAC,sBAnPZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAqPG,CAAC;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,MAAV;AAAkBC,IAAAA,YAAlB;AAAgCC,IAAAA;AAAhC,GAAD,kBACC,oBAAC,IAAD;AACE,IAAA,KAAK,EAAE;AAAEC,MAAAA,MAAM,EAAE,MAAV;AAAkBR,MAAAA,UAAU,EAAE,IAA9B;AAAoCS,MAAAA,WAAW,EAAE;AAAjD,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAGE;AAAK,IAAA,KAAK,EAAE;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAEC,OAAO,CAACC,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA+B,UAA/B,CADF,eAEE,oBAAC,SAAD;AACE,IAAA,OAAO,EAAC,UADV;AAEE,IAAA,EAAE,EAAC,QAFL;AAGE,IAAA,KAAK,EAAC,QAHR;AAIE,IAAA,IAAI,EAAC,QAJP;AAKE,IAAA,WAAW,EAAC,SALd;AAME,IAAA,SAAS,MANX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAHF,eAeE;AAAK,IAAA,SAAS,EAAED,OAAO,CAACC,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA+B,kBAA/B,CAfF,eAiBE,oBAAC,IAAD;AAAM,IAAA,SAAS,MAAf;AAAgB,IAAA,OAAO,EAAE,CAAzB;AAA4B,IAAA,UAAU,EAAC,QAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AACE,IAAA,KAAK,EAAE,OAAO1B,KAAP,KAAiB,QAAjB,GAA4BA,KAA5B,GAAoC,CAD7C;AAEE,IAAA,QAAQ,EAAE2B,kBAFZ;AAGE,IAAA,YAAY,EAAE,EAHhB;AAIE,IAAA,gBAAgB,EAAEC,SAJpB;AAKE,uBAAgB,aALlB;AAME,IAAA,iBAAiB,EAAC,MANpB;AAOE,IAAA,IAAI,EAAE,CAPR;AAQE,IAAA,GAAG,EAAE,EARP;AASE,IAAA,GAAG,EAAE,EATP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,eAcE,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AACE,IAAA,YAAY,EAAC,IADf;AAEE,IAAA,KAAK,EAAE5B,KAFT;AAGE,IAAA,QAAQ,EAAE6B,iBAHZ;AAIE,IAAA,MAAM,EAAER,UAJV;AAKE,IAAA,IAAI,EAAC,QALP;AAME,IAAA,UAAU,EAAE;AACVS,MAAAA,IAAI,EAAE,CADI;AAEVC,MAAAA,GAAG,EAAE,EAFK;AAGVC,MAAAA,GAAG,EAAE,EAHK;AAIV,yBAAmB;AAJT,KANd;AAYE,IAAA,eAAe,EAAE;AACfC,MAAAA,MAAM,EAAE;AADO,KAZnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAdF,CAjBF,eAoDE;AAAK,IAAA,SAAS,EAAER,OAAO,CAACC,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA+B,aAA/B,CApDF,eAqDE,oBAAC,UAAD;AAAY,IAAA,GAAG,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,OAAD;AACE,IAAA,IAAI,EAAC,UADP;AAEE,IAAA,IAAI,EAAC,OAFP;AAGE,IAAA,KAAK,EAAC,WAHR;AAIE,IAAA,EAAE,EAAEQ,KAJN;AAKE,IAAA,KAAK,EAAC,WALR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAQE,oBAAC,OAAD;AACE,IAAA,IAAI,EAAC,UADP;AAEE,IAAA,IAAI,EAAC,OAFP;AAGE,IAAA,KAAK,EAAC,OAHR;AAIE,IAAA,EAAE,EAAEA,KAJN;AAKE,IAAA,KAAK,EAAC,OALR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,eAeE,oBAAC,OAAD;AACE,IAAA,IAAI,EAAC,UADP;AAEE,IAAA,IAAI,EAAC,OAFP;AAGE,IAAA,KAAK,EAAC,QAHR;AAIE,IAAA,EAAE,EAAEA,KAJN;AAKE,IAAA,KAAK,EAAC,QALR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAfF,eAsBE,oBAAC,OAAD;AACE,IAAA,IAAI,EAAC,UADP;AAEE,IAAA,IAAI,EAAC,OAFP;AAGE,IAAA,KAAK,EAAC,OAHR;AAIE,IAAA,EAAE,EAAEA,KAJN;AAKE,IAAA,KAAK,EAAC,OALR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAtBF,CArDF,eAsFE;AAAK,IAAA,SAAS,EAAET,OAAO,CAACC,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA+B,aAA/B,CAtFF,eAuFE,oBAAC,UAAD;AAAY,IAAA,IAAI,EAAC,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACIS,YAAD,IACCjB,MAAM,CAACzC,SAAP,CAAiB4B,GAAjB,CAAsB+B,QAAD,IAAc;AACjC,wBACE,oBAAC,UAAD;AACE,MAAA,GAAG,EAAEA,QADP;AAEE,MAAA,IAAI,EAAC,UAFP;AAGE,MAAA,IAAI,EAAC,UAHP;AAIE,MAAA,KAAK,EAAEA,QAJT;AAKE,MAAA,EAAE,EAAEC,QALN;AAME,MAAA,KAAK,EAAED,QANT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAUD,GAXD,CAFJ,CAvFF,eAyGE;AAAK,IAAA,SAAS,EAAEX,OAAO,CAACC,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA+B,gBAA/B,CAzGF,eA0GE,oBAAC,UAAD;AAAY,IAAA,IAAI,EAAC,cAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACIS,YAAD,IACCjB,MAAM,CAACxC,YAAP,CAAoB2B,GAApB,CAAyBiC,WAAD,IAAiB;AACvC,wBACE,oBAAC,OAAD;AACE,MAAA,GAAG,EAAEA,WADP;AAEE,MAAA,IAAI,EAAC,aAFP;AAGE,MAAA,IAAI,EAAC,OAHP;AAIE,MAAA,KAAK,EAAEA,WAJT;AAKE,MAAA,EAAE,EAAEJ,KALN;AAME,MAAA,KAAK,EAAEI,WANT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAUD,GAXD,CAFJ,CA1GF,eA4HE;AAAK,IAAA,SAAS,EAAEb,OAAO,CAACC,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA+B,QAA/B,CA5HF,eA6HE,oBAAC,UAAD;AAAY,IAAA,IAAI,EAAC,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACIS,YAAD,IACCjB,MAAM,CAACvC,UAAP,CAAkB0B,GAAlB,CAAuBkC,SAAD,IAAe;AACnC,wBACE,oBAAC,OAAD;AACE,MAAA,IAAI,EAAC,WADP;AAEE,MAAA,IAAI,EAAC,OAFP;AAGE,MAAA,KAAK,EAAEA,SAAS,CAAC1D,OAHnB;AAIE,MAAA,EAAE,EAAEqD,KAJN;AAKE,MAAA,KAAK,EAAEK,SAAS,CAAC3D,IALnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AASD,GAVD,CAFJ,CA7HF,eA8IE;AAAK,IAAA,SAAS,EAAE6C,OAAO,CAACC,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA+B,UAA/B,CA9IF,eA+IE,oBAAC,UAAD;AAAY,IAAA,GAAG,MAAf;AAAgB,IAAA,IAAI,EAAC,QAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACIS,YAAD,IACCjB,MAAM,CAACnC,YAAP,CAAoBsB,GAApB,CAAyBmC,WAAD,IAAiB;AACvC,wBACE,oBAAC,UAAD;AACE,MAAA,IAAI,EAAC,aADP;AAEE,MAAA,IAAI,EAAC,UAFP;AAGE,MAAA,KAAK,EAAEA,WAAW,CAAC3D,OAHrB;AAIE,MAAA,EAAE,EAAEwD,QAJN;AAKE,MAAA,KAAK,EAAEG,WAAW,CAAC5D,IALrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AASD,GAVD,CAFJ,CA/IF,eA+JE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AACE,IAAA,QAAQ,EAAEwC,YADZ;AAEE,IAAA,IAAI,EAAC,QAFP;AAGE,IAAA,QAAQ,EAAE,MAAM1D,cAAc,CAAC,KAAD,CAHhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,CA/JF,eAwKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAM+E,IAAI,CAACC,SAAL,CAAexB,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CAAN,CAxKF,eAyKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMuB,IAAI,CAACC,SAAL,CAAevB,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CAAN,CAzKF,CAtPJ,CADF,CAdF,eAmbE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAQ,IAAA,OAAO,EAAE,MAAMzD,cAAc,CAAC,KAAD,CAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,CAnbF,CAjDF,CADF;AA2eD,CAtzBD;;AAwzBA,eAAetB,GAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nimport Recipe from \"./Recipe\";\r\nimport Nav from \"./Nav\";\r\nimport PaginationFooter from \"./Pagination\";\r\nimport Modal from \"react-modal\";\r\n\r\nimport PopoverStickOnHover from \"./PopOver\";\r\nimport FormikForm from \"./FormikForm\";\r\n\r\nimport { Form } from \"react-bootstrap\";\r\nimport { Button } from \"@material-ui/core\";\r\n\r\nimport \"./App.css\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSearch } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nModal.setAppElement(\"#root\");\r\n\r\nconst App = () => {\r\n  const APP_ID = \"65eff37b\";\r\n  const APP_KEY = \"013e642e140af7db99a3663be34125e2\";\r\n\r\n  const [recipes, setRecipes] = useState([]);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [advancedSearch, setAdvancedSearch] = useState(\"\");\r\n  const [query, setQuery] = useState(\"chicken\");\r\n  const [isHovered, setIsHovered] = useState(false);\r\n  const [cards, setCards] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [cardsPerPage, setCardsPerPage] = useState(10);\r\n  const [modalIsOpen, setModalIsOpen] = useState(false);\r\n  const [selectDishTypes, setSelectDishTypes] = useState(\"\");\r\n  const [selectCuisineTypes, setSelectCuisineTypes] = useState(\"\");\r\n  const [selectDietLabels, setSelectDietLabels] = useState(\"\");\r\n  const [selectHealthLabels, setSelectHealthLabels] = useState(\"\");\r\n  const [selectMealTypes, setSelectMealTypes] = useState(\"\");\r\n  // const [selectMealTypes, setSelectMealTypes] = useState(\"\");\r\n\r\n  let indexOfFirstCard = 0;\r\n  let indexOfLastCard = 10;\r\n  let inputClass = \"search-bar\";\r\n  let buttonClass = \"search-button\";\r\n\r\n  const dishTypes = [\r\n    \"Bread\",\r\n    \"Cereals\",\r\n    \"Condiments and sauces\",\r\n    \"Drinks\",\r\n    \"Desserts\",\r\n    \"Main course\",\r\n    \"Pancake\",\r\n    \"Preps\",\r\n    \"Preserve\",\r\n    \"Salad\",\r\n    \"Sandwiches\",\r\n    \"Side dish\",\r\n    \"Soup\",\r\n    \"Starter\",\r\n    \"Sweets\",\r\n  ];\r\n\r\n  const cuisineTypes = [\r\n    \"American\",\r\n    \"Asian\",\r\n    \"British\",\r\n    \"Caribbean\",\r\n    \"Central Europe\",\r\n    \"Chinese\",\r\n    \"Eastern Europe\",\r\n    \"French\",\r\n    \"Indian\",\r\n    \"Italian\",\r\n    \"Japanese\",\r\n    \"Kosher\",\r\n    \"Mediterranean\",\r\n    \"Mexican\",\r\n    \"Middle Eastern\",\r\n    \"Nordic\",\r\n    \"South American\",\r\n    \"South East Asian\",\r\n  ];\r\n\r\n  const dietLabels = [\r\n    {\r\n      name: \"Balanced\",\r\n      apiName: \"balanced\",\r\n      description: \"Protein/Fat/Carb values in 15/35/50 ratio\",\r\n    },\r\n    {\r\n      name: \"High-Fiber\",\r\n      apiName: \"high-fiber\",\r\n      description: \"More than 5g fiber per serving\",\r\n    },\r\n    {\r\n      name: \"High-Protein\",\r\n      apiName: \"high-protein\",\r\n      description: \"More than 50% of total calories from proteins\",\r\n    },\r\n    {\r\n      name: \"Low-Carb\",\r\n      apiName: \"low-carb\",\r\n      description: \"Less than 20% of total calories from carbs\",\r\n    },\r\n    {\r\n      name: \"Low-Fat\",\r\n      apiName: \"low-fat\",\r\n      description: \"Less than 15% of total calories from fat\",\r\n    },\r\n    {\r\n      name: \"Low-Sodium\",\r\n      apiName: \"low-sodium\",\r\n      description: \"Less than 140mg Na per serving\",\r\n    },\r\n  ];\r\n\r\n  const healthLabels = [\r\n    {\r\n      name: \"Alcohol-free\",\r\n      apiName: \"alcohol-free\",\r\n      description: \"No alcohol used or contained\",\r\n    },\r\n    {\r\n      name: \"Celery-free\",\r\n      apiName: \"celery-free\",\r\n      description: \"does not contain celery or derivatives\",\r\n    },\r\n    {\r\n      name: \"Crustacean-free\",\r\n      apiName: \"crustacean-free\",\r\n      description:\r\n        \"does not contain crustaceans (shrimp, lobster etc.) or derivatives\",\r\n    },\r\n    {\r\n      name: \"Dairy\",\r\n      apiName: \"dairy-free\",\r\n      description: \"No dairy; no lactose\",\r\n    },\r\n    {\r\n      name: \"Eggs\",\r\n      apiName: \"egg-free\",\r\n      description: \"No eggs or products containing eggs\",\r\n    },\r\n    {\r\n      name: \"Fish\",\r\n      apiName: \"fish-free\",\r\n      description: \"No fish or fish derivatives\",\r\n    },\r\n    {\r\n      name: \"FODMAP free\",\r\n      apiName: \"fodmap-free\",\r\n      description: \"Does not contain FODMAP foods\",\r\n    },\r\n    {\r\n      name: \"Gluten\",\r\n      apiName: \"gluten-free\",\r\n      description: \"No ingredients containing gluten\",\r\n    },\r\n    {\r\n      name: \"Keto\",\r\n      apiName: \"keto-friendly\",\r\n      description: \"Maximum 7 grams of net carbs per serving\",\r\n    },\r\n    {\r\n      name: \"Kidney friendly\",\r\n      apiName: \"kidney-friendly\",\r\n      description:\r\n        \"per serving – phosphorus less than 250 mg AND potassium less than 500 mg AND sodium: less than 500 mg\",\r\n    },\r\n    {\r\n      name: \"Kosher\",\r\n      apiName: \"kosher\",\r\n      description:\r\n        \"contains only ingredients allowed by the kosher diet. However it does not guarantee kosher preparation of the ingredients themselves\",\r\n    },\r\n    {\r\n      name: \"Low potassium\",\r\n      apiName: \"low-potassium\",\r\n      description: \"Less than 150mg per serving\",\r\n    },\r\n    {\r\n      name: \"Lupine-free\",\r\n      apiName: \"lupine-free\",\r\n      description: \"does not contain lupine or derivatives\",\r\n    },\r\n    {\r\n      name: \"Mustard-free\",\r\n      apiName: \"mustard-free\",\r\n      description: \"does not contain mustard or derivatives\",\r\n    },\r\n    {\r\n      name: \"n/a\",\r\n      apiName: \"low-fat-abs\",\r\n      description: \"Less than 3g of fat per serving\",\r\n    },\r\n    {\r\n      name: \"No oil added\",\r\n      apiName: \"No-oil-added\",\r\n      description:\r\n        \"No oil added except to what is contained in the basic ingredients\",\r\n    },\r\n    {\r\n      name: \"No-sugar\",\r\n      apiName: \"low-sugar\",\r\n      description:\r\n        \"No simple sugars – glucose, dextrose, galactose, fructose, sucrose, lactose, maltose\",\r\n    },\r\n    {\r\n      name: \"Paleo\",\r\n      apiName: \"paleo\",\r\n      description:\r\n        \"Excludes what are perceived to be agricultural products; grains, legumes, dairy products, potatoes, refined salt, refined sugar, and processed oils\",\r\n    },\r\n    {\r\n      name: \"Peanuts\",\r\n      apiName: \"peanut-free\",\r\n      description: \"No peanuts or products containing peanuts\",\r\n    },\r\n    {\r\n      name: \"Pescatarian\",\r\n      apiName: \"pecatarian\",\r\n      description:\r\n        \"Does not contain meat or meat based products, can contain dairy and fish\",\r\n    },\r\n    {\r\n      name: \"Pork-free\",\r\n      apiName: \"pork-free\",\r\n      description: \"does not contain pork or derivatives\",\r\n    },\r\n    {\r\n      name: \"Red meat-free\",\r\n      apiName: \"red-meat-free\",\r\n      description:\r\n        \"does not contain beef, lamb, pork, duck, goose, game, horse, and other types of red meat or products containing red meat.\",\r\n    },\r\n    {\r\n      name: \"Sesame-free\",\r\n      apiName: \"sesame-free\",\r\n      description: \"does not contain sesame seed or derivatives\",\r\n    },\r\n    {\r\n      name: \"Shellfish\",\r\n      apiName: \"shellfish-free\",\r\n      description: \"No shellfish or shellfish derivatives\",\r\n    },\r\n    {\r\n      name: \"Soy\",\r\n      apiName: \"soy-free\",\r\n      description: \"No soy or products containing soy\",\r\n    },\r\n    {\r\n      name: \"Sugar-conscious\",\r\n      apiName: \"sugar-conscious\",\r\n      description: \"Less than 4g of sugar per serving\",\r\n    },\r\n    {\r\n      name: \"Tree Nuts\",\r\n      apiName: \"tree-nut-free\",\r\n      description: \"No tree nuts or products containing tree nuts\",\r\n    },\r\n    {\r\n      name: \"Vegan\",\r\n      apiName: \"vegan\",\r\n      description: \"No meat, poultry, fish, dairy, eggs or honey\",\r\n    },\r\n    {\r\n      name: \"Vegetarian\",\r\n      apiName: \"vegetarian\",\r\n      description: \"No meat, poultry, or fish\",\r\n    },\r\n    {\r\n      name: \"Wheat-free\",\r\n      apiName: \"wheat-free\",\r\n      description: \"No wheat, can have gluten though\",\r\n    },\r\n  ];\r\n  const [searchRange, setSearchRange] = useState(\"&from=0&to=10\");\r\n\r\n  useEffect(() => {\r\n    async function getRecipes() {\r\n      // get current posts\r\n      setLoading(true);\r\n      // || use await for data that doesn't come back instantly\r\n      const response = await fetch(\r\n        `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}${searchRange}`\r\n      );\r\n      const data = await response.json();\r\n      setRecipes(data.hits);\r\n      setCards(data);\r\n      console.log(data);\r\n      setLoading(false);\r\n    }\r\n    getRecipes();\r\n  }, [query, searchRange]);\r\n\r\n  const totalCards = 100;\r\n\r\n  //change page\r\n  const paginate = (pageNumber) => {\r\n    console.log(pageNumber);\r\n    setCurrentPage(pageNumber);\r\n\r\n    console.log(currentPage);\r\n    indexOfLastCard = pageNumber * cardsPerPage;\r\n    indexOfFirstCard = indexOfLastCard - cardsPerPage;\r\n\r\n    console.log(indexOfLastCard);\r\n\r\n    console.log(indexOfFirstCard);\r\n    setSearchRange(`&from=${indexOfFirstCard}&to=${indexOfLastCard}`);\r\n  };\r\n\r\n  const updateSearch = (e) => {\r\n    setSearch(e.target.value);\r\n  };\r\n  const updateAdvancedSearch = (e) => {\r\n    setAdvancedSearch(e.target.value);\r\n  };\r\n\r\n  const getSearch = (e) => {\r\n    // || prevent page refresh\r\n    e.preventDefault();\r\n    if (!(search === \"\" || search === \" \")) {\r\n      setQuery(search);\r\n      setSearch(\"\");\r\n    }\r\n  };\r\n\r\n  const getAdvancedSearch = (e) => {\r\n    e.preventDefault();\r\n    if (!(advancedSearch === \"\" || advancedSearch === \" \")) {\r\n      setQuery(advancedSearch);\r\n      setAdvancedSearch(\"\");\r\n      setModalIsOpen(false);\r\n    }\r\n\r\n    if (cardsPerPage !== 10) {\r\n      setCardsPerPage(cardsPerPage);\r\n    }\r\n  };\r\n\r\n  if (isHovered) {\r\n    inputClass = \"search-bar-expand search-bar\";\r\n    buttonClass = \"search-button search-button-expand\";\r\n  } else {\r\n    inputClass = \"search-bar\";\r\n    buttonClass = \"search-button\";\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Nav />\r\n      <div className=\"search-box\">\r\n        <p>\r\n          Showing Results for:\r\n          <br />\r\n          <h4>{query}</h4>\r\n        </p>\r\n        <form\r\n          onSubmit={getSearch}\r\n          className=\"search-form\"\r\n          onMouseEnter={() => setIsHovered(true)}\r\n          onMouseLeave={() => setIsHovered(false)}\r\n        >\r\n          <input\r\n            type=\"text\"\r\n            className={inputClass}\r\n            value={search}\r\n            onChange={updateSearch}\r\n            placeholder=\"Type to search\"\r\n          />\r\n          <button className={buttonClass} type=\"submit\">\r\n            <FontAwesomeIcon icon={faSearch} />\r\n          </button>\r\n        </form>\r\n        <Button onClick={() => setModalIsOpen(true)}>Advanced Search</Button>\r\n      </div>\r\n\r\n      <div className=\"recipes\">\r\n        {/* // || .map function used for looping arrays */}\r\n        {recipes.map((recipe) => (\r\n          <Recipe\r\n            key={recipe.recipe.label + recipe.recipe.calories}\r\n            title={recipe.recipe.label}\r\n            calories={recipe.recipe.calories}\r\n            image={recipe.recipe.image}\r\n            ingredients={recipe.recipe.ingredients}\r\n            loading={loading}\r\n          />\r\n        ))}\r\n      </div>\r\n      <footer>\r\n        <PaginationFooter\r\n          cardsPerPage={cardsPerPage}\r\n          totalCards={totalCards}\r\n          paginate={paginate}\r\n        />\r\n      </footer>\r\n\r\n      <Modal\r\n        isOpen={modalIsOpen}\r\n        onRequestClose={() => setModalIsOpen(false)}\r\n        style={{\r\n          overlay: { backgroundColor: \"rgba(0,0,0,0.7)\" },\r\n        }}\r\n      >\r\n        <div\r\n          className=\"ModalHeader\"\r\n          style={{ display: \"flex\", marginLeft: \"7%\" }}\r\n        >\r\n          <h2>Advanced Search</h2>\r\n        </div>\r\n\r\n        <div className=\"ModalContent\">\r\n          <Formik\r\n            initialValues={{\r\n              search: \"\",\r\n              dishTypes: [\r\n                \"Bread\",\r\n                \"Cereals\",\r\n                \"Condiments and sauces\",\r\n                \"Drinks\",\r\n                \"Desserts\",\r\n                \"Main course\",\r\n                \"Pancake\",\r\n                \"Preps\",\r\n                \"Preserve\",\r\n                \"Salad\",\r\n                \"Sandwiches\",\r\n                \"Side dish\",\r\n                \"Soup\",\r\n                \"Starter\",\r\n                \"Sweets\",\r\n              ],\r\n              dietLabels: [\r\n                {\r\n                  name: \"Balanced\",\r\n                  apiName: \"balanced\",\r\n                  description: \"Protein/Fat/Carb values in 15/35/50 ratio\",\r\n                },\r\n                {\r\n                  name: \"High-Fiber\",\r\n                  apiName: \"high-fiber\",\r\n                  description: \"More than 5g fiber per serving\",\r\n                },\r\n                {\r\n                  name: \"High-Protein\",\r\n                  apiName: \"high-protein\",\r\n                  description: \"More than 50% of total calories from proteins\",\r\n                },\r\n                {\r\n                  name: \"Low-Carb\",\r\n                  apiName: \"low-carb\",\r\n                  description: \"Less than 20% of total calories from carbs\",\r\n                },\r\n                {\r\n                  name: \"Low-Fat\",\r\n                  apiName: \"low-fat\",\r\n                  description: \"Less than 15% of total calories from fat\",\r\n                },\r\n                {\r\n                  name: \"Low-Sodium\",\r\n                  apiName: \"low-sodium\",\r\n                  description: \"Less than 140mg Na per serving\",\r\n                },\r\n              ],\r\n              cuisineTypes: [\r\n                \"American\",\r\n                \"Asian\",\r\n                \"British\",\r\n                \"Caribbean\",\r\n                \"Central Europe\",\r\n                \"Chinese\",\r\n                \"Eastern Europe\",\r\n                \"French\",\r\n                \"Indian\",\r\n                \"Italian\",\r\n                \"Japanese\",\r\n                \"Kosher\",\r\n                \"Mediterranean\",\r\n                \"Mexican\",\r\n                \"Middle Eastern\",\r\n                \"Nordic\",\r\n                \"South American\",\r\n                \"South East Asian\",\r\n              ],\r\n              healthLabels: [\r\n                {\r\n                  name: \"Alcohol-free\",\r\n                  apiName: \"alcohol-free\",\r\n                  description: \"No alcohol used or contained\",\r\n                },\r\n                {\r\n                  name: \"Celery-free\",\r\n                  apiName: \"celery-free\",\r\n                  description: \"does not contain celery or derivatives\",\r\n                },\r\n                {\r\n                  name: \"Crustacean-free\",\r\n                  apiName: \"crustacean-free\",\r\n                  description:\r\n                    \"does not contain crustaceans (shrimp, lobster etc.) or derivatives\",\r\n                },\r\n                {\r\n                  name: \"Dairy\",\r\n                  apiName: \"dairy-free\",\r\n                  description: \"No dairy; no lactose\",\r\n                },\r\n                {\r\n                  name: \"Eggs\",\r\n                  apiName: \"egg-free\",\r\n                  description: \"No eggs or products containing eggs\",\r\n                },\r\n                {\r\n                  name: \"Fish\",\r\n                  apiName: \"fish-free\",\r\n                  description: \"No fish or fish derivatives\",\r\n                },\r\n                {\r\n                  name: \"FODMAP free\",\r\n                  apiName: \"fodmap-free\",\r\n                  description: \"Does not contain FODMAP foods\",\r\n                },\r\n                {\r\n                  name: \"Gluten\",\r\n                  apiName: \"gluten-free\",\r\n                  description: \"No ingredients containing gluten\",\r\n                },\r\n                {\r\n                  name: \"Keto\",\r\n                  apiName: \"keto-friendly\",\r\n                  description: \"Maximum 7 grams of net carbs per serving\",\r\n                },\r\n                {\r\n                  name: \"Kidney friendly\",\r\n                  apiName: \"kidney-friendly\",\r\n                  description:\r\n                    \"per serving – phosphorus less than 250 mg AND potassium less than 500 mg AND sodium: less than 500 mg\",\r\n                },\r\n                {\r\n                  name: \"Kosher\",\r\n                  apiName: \"kosher\",\r\n                  description:\r\n                    \"contains only ingredients allowed by the kosher diet. However it does not guarantee kosher preparation of the ingredients themselves\",\r\n                },\r\n                {\r\n                  name: \"Low potassium\",\r\n                  apiName: \"low-potassium\",\r\n                  description: \"Less than 150mg per serving\",\r\n                },\r\n                {\r\n                  name: \"Lupine-free\",\r\n                  apiName: \"lupine-free\",\r\n                  description: \"does not contain lupine or derivatives\",\r\n                },\r\n                {\r\n                  name: \"Mustard-free\",\r\n                  apiName: \"mustard-free\",\r\n                  description: \"does not contain mustard or derivatives\",\r\n                },\r\n                {\r\n                  name: \"n/a\",\r\n                  apiName: \"low-fat-abs\",\r\n                  description: \"Less than 3g of fat per serving\",\r\n                },\r\n                {\r\n                  name: \"No oil added\",\r\n                  apiName: \"No-oil-added\",\r\n                  description:\r\n                    \"No oil added except to what is contained in the basic ingredients\",\r\n                },\r\n                {\r\n                  name: \"No-sugar\",\r\n                  apiName: \"low-sugar\",\r\n                  description:\r\n                    \"No simple sugars – glucose, dextrose, galactose, fructose, sucrose, lactose, maltose\",\r\n                },\r\n                {\r\n                  name: \"Paleo\",\r\n                  apiName: \"paleo\",\r\n                  description:\r\n                    \"Excludes what are perceived to be agricultural products; grains, legumes, dairy products, potatoes, refined salt, refined sugar, and processed oils\",\r\n                },\r\n                {\r\n                  name: \"Peanuts\",\r\n                  apiName: \"peanut-free\",\r\n                  description: \"No peanuts or products containing peanuts\",\r\n                },\r\n                {\r\n                  name: \"Pescatarian\",\r\n                  apiName: \"pecatarian\",\r\n                  description:\r\n                    \"Does not contain meat or meat based products, can contain dairy and fish\",\r\n                },\r\n                {\r\n                  name: \"Pork-free\",\r\n                  apiName: \"pork-free\",\r\n                  description: \"does not contain pork or derivatives\",\r\n                },\r\n                {\r\n                  name: \"Red meat-free\",\r\n                  apiName: \"red-meat-free\",\r\n                  description:\r\n                    \"does not contain beef, lamb, pork, duck, goose, game, horse, and other types of red meat or products containing red meat.\",\r\n                },\r\n                {\r\n                  name: \"Sesame-free\",\r\n                  apiName: \"sesame-free\",\r\n                  description: \"does not contain sesame seed or derivatives\",\r\n                },\r\n                {\r\n                  name: \"Shellfish\",\r\n                  apiName: \"shellfish-free\",\r\n                  description: \"No shellfish or shellfish derivatives\",\r\n                },\r\n                {\r\n                  name: \"Soy\",\r\n                  apiName: \"soy-free\",\r\n                  description: \"No soy or products containing soy\",\r\n                },\r\n                {\r\n                  name: \"Sugar-conscious\",\r\n                  apiName: \"sugar-conscious\",\r\n                  description: \"Less than 4g of sugar per serving\",\r\n                },\r\n                {\r\n                  name: \"Tree Nuts\",\r\n                  apiName: \"tree-nut-free\",\r\n                  description: \"No tree nuts or products containing tree nuts\",\r\n                },\r\n                {\r\n                  name: \"Vegan\",\r\n                  apiName: \"vegan\",\r\n                  description: \"No meat, poultry, fish, dairy, eggs or honey\",\r\n                },\r\n                {\r\n                  name: \"Vegetarian\",\r\n                  apiName: \"vegetarian\",\r\n                  description: \"No meat, poultry, or fish\",\r\n                },\r\n                {\r\n                  name: \"Wheat-free\",\r\n                  apiName: \"wheat-free\",\r\n                  description: \"No wheat, can have gluten though\",\r\n                },\r\n              ],\r\n            }}\r\n            // || validation using yup\r\n            validationSchema={validationSchema}\r\n            onSubmit={() => getAdvancedSearch()}\r\n            onSubmit={(data, { setSubmitting, resetForm }) => {\r\n              setSubmitting(true);\r\n              // *make async call\r\n              console.log(\"Submit: \", data);\r\n              setSubmitting(false);\r\n              resetForm(true);\r\n            }}\r\n            className=\"advanced-search-form\"\r\n          >\r\n            {({ values, errors, isSubmitting, handleBlur }) => (\r\n              <Form\r\n                style={{ margin: \"10px\", marginLeft: \"7%\", marginRight: \"7%\" }}\r\n              >\r\n                <div style={{ width: \"70%\" }}>\r\n                  <div className={classes.root}>{\"Search: \"}</div>\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    id=\"search\"\r\n                    label=\"Search\"\r\n                    type=\"search\"\r\n                    placeholder=\"Chicken\"\r\n                    fullWidth\r\n                  />\r\n                </div>\r\n\r\n                <div className={classes.root}>{\"Items per Page: \"}</div>\r\n\r\n                <Grid container spacing={2} alignItems=\"center\">\r\n                  <Grid item xs={9}>\r\n                    <Slider\r\n                      value={typeof value === \"number\" ? value : 0}\r\n                      onChange={handleSliderChange}\r\n                      defaultValue={10}\r\n                      getAriaValueText={valuetext}\r\n                      aria-labelledby=\"item-slider\"\r\n                      valueLabelDisplay=\"auto\"\r\n                      step={1}\r\n                      min={10}\r\n                      max={50}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={3}>\r\n                    <TextField\r\n                      defaultValue=\"10\"\r\n                      value={value}\r\n                      onChange={handleInputChange}\r\n                      onBlur={handleBlur}\r\n                      type=\"number\"\r\n                      inputProps={{\r\n                        step: 5,\r\n                        min: 10,\r\n                        max: 50,\r\n                        \"aria-labelledby\": \"item-slider\",\r\n                      }}\r\n                      InputLabelProps={{\r\n                        shrink: true,\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n\r\n                {/* Radio Button starts here */}\r\n                <div className={classes.root}>{\"Meal Type: \"}</div>\r\n                <RadioGroup row>\r\n                  <MyRadio\r\n                    name=\"MealType\"\r\n                    type=\"radio\"\r\n                    value=\"Breakfast\"\r\n                    as={Radio}\r\n                    label=\"Breakfast\"\r\n                  />\r\n                  <MyRadio\r\n                    name=\"MealType\"\r\n                    type=\"radio\"\r\n                    value=\"Lunch\"\r\n                    as={Radio}\r\n                    label=\"Lunch\"\r\n                  />\r\n                  <MyRadio\r\n                    name=\"MealType\"\r\n                    type=\"radio\"\r\n                    value=\"Dinner\"\r\n                    as={Radio}\r\n                    label=\"Dinner\"\r\n                  />\r\n                  <MyRadio\r\n                    name=\"MealType\"\r\n                    type=\"radio\"\r\n                    value=\"Snack\"\r\n                    as={Radio}\r\n                    label=\"Snack\"\r\n                  />\r\n                </RadioGroup>\r\n\r\n                {/* Radio Buttons ends here */}\r\n                {/* multiple checkboxes starts here */}\r\n                <div className={classes.root}>{\"Dish Type: \"}</div>\r\n                <FieldArray name=\"Dish Type\">\r\n                  {(arrayHelpers) =>\r\n                    values.dishTypes.map((dishType) => {\r\n                      return (\r\n                        <MyCheckBox\r\n                          key={dishType}\r\n                          name=\"dishType\"\r\n                          type=\"checkbox\"\r\n                          value={dishType}\r\n                          as={Checkbox}\r\n                          label={dishType}\r\n                        />\r\n                      );\r\n                    })\r\n                  }\r\n                </FieldArray>\r\n                {/* multiple checkboxes ends here */}\r\n\r\n                <div className={classes.root}>{\"Cuisine Type: \"}</div>\r\n                <FieldArray name=\"CuisineTypes\">\r\n                  {(arrayHelpers) =>\r\n                    values.cuisineTypes.map((cuisineType) => {\r\n                      return (\r\n                        <MyRadio\r\n                          key={cuisineType}\r\n                          name=\"cuisineType\"\r\n                          type=\"radio\"\r\n                          value={cuisineType}\r\n                          as={Radio}\r\n                          label={cuisineType}\r\n                        />\r\n                      );\r\n                    })\r\n                  }\r\n                </FieldArray>\r\n\r\n                {/* Radio Button starts here */}\r\n                <div className={classes.root}>{\"Diet: \"}</div>\r\n                <FieldArray name=\"Diet\">\r\n                  {(arrayHelpers) =>\r\n                    values.dietLabels.map((dietLabel) => {\r\n                      return (\r\n                        <MyRadio\r\n                          name=\"dietLabel\"\r\n                          type=\"radio\"\r\n                          value={dietLabel.apiName}\r\n                          as={Radio}\r\n                          label={dietLabel.name}\r\n                        />\r\n                      );\r\n                    })\r\n                  }\r\n                </FieldArray>\r\n                {/* Radio Buttons ends here */}\r\n\r\n                <div className={classes.root}>{\"Health: \"}</div>\r\n                <FieldArray row name=\"Health\">\r\n                  {(arrayHelpers) =>\r\n                    values.healthLabels.map((healthLabel) => {\r\n                      return (\r\n                        <MyCheckBox\r\n                          name=\"healthLabel\"\r\n                          type=\"checkbox\"\r\n                          value={healthLabel.apiName}\r\n                          as={Checkbox}\r\n                          label={healthLabel.name}\r\n                        />\r\n                      );\r\n                    })\r\n                  }\r\n                </FieldArray>\r\n\r\n                <div>\r\n                  <Button\r\n                    disabled={isSubmitting}\r\n                    type=\"submit\"\r\n                    onSubmit={() => setModalIsOpen(false)}\r\n                  >\r\n                    Submit\r\n                  </Button>\r\n                </div>\r\n                <pre>{JSON.stringify(values, null, 2)}</pre>\r\n                <pre>{JSON.stringify(errors, null, 2)}</pre>\r\n              </Form>\r\n            )}\r\n          </Formik>\r\n        </div>\r\n        <div>\r\n          <button onClick={() => setModalIsOpen(false)}>Close</button>\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}