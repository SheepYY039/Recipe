{"ast":null,"code":"var _jsxFileName = \"/Users/yeungj12/Projects/FrontEnd/ReactJS/frontend014_recipe/src/FormikForm.js\";\nimport React from \"react\";\nimport \"typeface-roboto\";\nimport { Formik, Field, Form, useField, FieldArray } from \"formik\";\nimport { TextField, Button, Checkbox, Radio, FormControlLabel, Select, MenuItem, InputLabel, RadioGroup, Slider } from \"@material-ui/core\";\nimport * as yup from \"yup\";\nimport style from \"./Modal.module.css\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst MyRadio = ({\n  label,\n  ...props\n}) => {\n  const [field, meta] = useField(props);\n  return /*#__PURE__*/React.createElement(FormControlLabel, Object.assign({}, field, {\n    control: /*#__PURE__*/React.createElement(Radio, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 48\n      }\n    }),\n    label: label,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 10\n    }\n  }));\n};\n\nconst MyCheckBox = ({\n  label,\n  ...props\n}) => {\n  const [field, meta] = useField(props);\n  return /*#__PURE__*/React.createElement(FormControlLabel, Object.assign({}, field, {\n    control: /*#__PURE__*/React.createElement(Checkbox, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 48\n      }\n    }),\n    label: label,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 10\n    }\n  }));\n};\n\nconst MyTextField = ({\n  id,\n  label,\n  placeholder,\n  ...props\n}) => {\n  const [field, meta] = useField(props);\n  const errorText = meta.error && meta.touched ? meta.error : \"\";\n  return /*#__PURE__*/React.createElement(TextField, Object.assign({}, field, {\n    placeholder: placeholder,\n    helperText: errorText,\n    error: !!errorText,\n    id: \"error\",\n    label: label,\n    type: \"search\",\n    variant: \"outlined\",\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  })) // ! error={!!errorText} casting to boolean, if this string is empty--> false\n  ;\n};\n\nconst validationSchema = yup.object({\n  // || passing validation to search using yup\n  search: yup.string().required().max(10),\n  pets: yup.array().of(yup.object({\n    name: yup.string().required()\n  }))\n});\nconst useStyles = makeStyles(theme => ({\n  root: { ...theme.typography.button,\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(1),\n    fontSize: \"1.5em\"\n  }\n}));\n\nfunction valuetext(value) {\n  return `${value}`;\n}\n\nconst FormikForm = () => {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(30);\n\n  const handleSliderChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  const handleInputChange = event => {\n    setValue(event.target.value === \"\" ? \"\" : Number(event.target.value));\n  };\n\n  const handleBlur = () => {\n    if (value < 0) {\n      setValue(0);\n    } else if (value > 100) {\n      setValue(100);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Formik, {\n    initialValues: {\n      search: \"\",\n      dishTypes: [\"Bread\", \"Cereals\", \"Condiments and sauces\", \"Drinks\", \"Desserts\", \"Main course\", \"Pancake\", \"Preps\", \"Preserve\", \"Salad\", \"Sandwiches\", \"Side dish\", \"Soup\", \"Starter\", \"Sweets\"],\n      dietLabels: [{\n        name: \"Balanced\",\n        apiName: \"balanced\",\n        description: \"Protein/Fat/Carb values in 15/35/50 ratio\"\n      }, {\n        name: \"High-Fiber\",\n        apiName: \"high-fiber\",\n        description: \"More than 5g fiber per serving\"\n      }, {\n        name: \"High-Protein\",\n        apiName: \"high-protein\",\n        description: \"More than 50% of total calories from proteins\"\n      }, {\n        name: \"Low-Carb\",\n        apiName: \"low-carb\",\n        description: \"Less than 20% of total calories from carbs\"\n      }, {\n        name: \"Low-Fat\",\n        apiName: \"low-fat\",\n        description: \"Less than 15% of total calories from fat\"\n      }, {\n        name: \"Low-Sodium\",\n        apiName: \"low-sodium\",\n        description: \"Less than 140mg Na per serving\"\n      }],\n      cuisineTypes: [\"American\", \"Asian\", \"British\", \"Caribbean\", \"Central Europe\", \"Chinese\", \"Eastern Europe\", \"French\", \"Indian\", \"Italian\", \"Japanese\", \"Kosher\", \"Mediterranean\", \"Mexican\", \"Middle Eastern\", \"Nordic\", \"South American\", \"South East Asian\"],\n      healthLabels: [{\n        name: \"Alcohol-free\",\n        apiName: \"alcohol-free\",\n        description: \"No alcohol used or contained\"\n      }, {\n        name: \"Celery-free\",\n        apiName: \"celery-free\",\n        description: \"does not contain celery or derivatives\"\n      }, {\n        name: \"Crustacean-free\",\n        apiName: \"crustacean-free\",\n        description: \"does not contain crustaceans (shrimp, lobster etc.) or derivatives\"\n      }, {\n        name: \"Dairy\",\n        apiName: \"dairy-free\",\n        description: \"No dairy; no lactose\"\n      }, {\n        name: \"Eggs\",\n        apiName: \"egg-free\",\n        description: \"No eggs or products containing eggs\"\n      }, {\n        name: \"Fish\",\n        apiName: \"fish-free\",\n        description: \"No fish or fish derivatives\"\n      }, {\n        name: \"FODMAP free\",\n        apiName: \"fodmap-free\",\n        description: \"Does not contain FODMAP foods\"\n      }, {\n        name: \"Gluten\",\n        apiName: \"gluten-free\",\n        description: \"No ingredients containing gluten\"\n      }, {\n        name: \"Keto\",\n        apiName: \"keto-friendly\",\n        description: \"Maximum 7 grams of net carbs per serving\"\n      }, {\n        name: \"Kidney friendly\",\n        apiName: \"kidney-friendly\",\n        description: \"per serving – phosphorus less than 250 mg AND potassium less than 500 mg AND sodium: less than 500 mg\"\n      }, {\n        name: \"Kosher\",\n        apiName: \"kosher\",\n        description: \"contains only ingredients allowed by the kosher diet. However it does not guarantee kosher preparation of the ingredients themselves\"\n      }, {\n        name: \"Low potassium\",\n        apiName: \"low-potassium\",\n        description: \"Less than 150mg per serving\"\n      }, {\n        name: \"Lupine-free\",\n        apiName: \"lupine-free\",\n        description: \"does not contain lupine or derivatives\"\n      }, {\n        name: \"Mustard-free\",\n        apiName: \"mustard-free\",\n        description: \"does not contain mustard or derivatives\"\n      }, {\n        name: \"n/a\",\n        apiName: \"low-fat-abs\",\n        description: \"Less than 3g of fat per serving\"\n      }, {\n        name: \"No oil added\",\n        apiName: \"No-oil-added\",\n        description: \"No oil added except to what is contained in the basic ingredients\"\n      }, {\n        name: \"No-sugar\",\n        apiName: \"low-sugar\",\n        description: \"No simple sugars – glucose, dextrose, galactose, fructose, sucrose, lactose, maltose\"\n      }, {\n        name: \"Paleo\",\n        apiName: \"paleo\",\n        description: \"Excludes what are perceived to be agricultural products; grains, legumes, dairy products, potatoes, refined salt, refined sugar, and processed oils\"\n      }, {\n        name: \"Peanuts\",\n        apiName: \"peanut-free\",\n        description: \"No peanuts or products containing peanuts\"\n      }, {\n        name: \"Pescatarian\",\n        apiName: \"pecatarian\",\n        description: \"Does not contain meat or meat based products, can contain dairy and fish\"\n      }, {\n        name: \"Pork-free\",\n        apiName: \"pork-free\",\n        description: \"does not contain pork or derivatives\"\n      }, {\n        name: \"Red meat-free\",\n        apiName: \"red-meat-free\",\n        description: \"does not contain beef, lamb, pork, duck, goose, game, horse, and other types of red meat or products containing red meat.\"\n      }, {\n        name: \"Sesame-free\",\n        apiName: \"sesame-free\",\n        description: \"does not contain sesame seed or derivatives\"\n      }, {\n        name: \"Shellfish\",\n        apiName: \"shellfish-free\",\n        description: \"No shellfish or shellfish derivatives\"\n      }, {\n        name: \"Soy\",\n        apiName: \"soy-free\",\n        description: \"No soy or products containing soy\"\n      }, {\n        name: \"Sugar-conscious\",\n        apiName: \"sugar-conscious\",\n        description: \"Less than 4g of sugar per serving\"\n      }, {\n        name: \"Tree Nuts\",\n        apiName: \"tree-nut-free\",\n        description: \"No tree nuts or products containing tree nuts\"\n      }, {\n        name: \"Vegan\",\n        apiName: \"vegan\",\n        description: \"No meat, poultry, fish, dairy, eggs or honey\"\n      }, {\n        name: \"Vegetarian\",\n        apiName: \"vegetarian\",\n        description: \"No meat, poultry, or fish\"\n      }, {\n        name: \"Wheat-free\",\n        apiName: \"wheat-free\",\n        description: \"No wheat, can have gluten though\"\n      }]\n    } // || validation using yup\n    ,\n    validationSchema: validationSchema,\n    onSubmit: (data, {\n      setSubmitting,\n      resetForm\n    }) => {\n      setSubmitting(true); // *make async call\n\n      console.log(\"Submit: \", data);\n      setSubmitting(false);\n      resetForm(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }, ({\n    values,\n    errors,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit\n  }) => /*#__PURE__*/React.createElement(Form, {\n    style: {\n      margin: \"10px\",\n      marginLeft: \"7%\",\n      marginRight: \"7%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: \"70%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 15\n    }\n  }, \"Search: \"), /*#__PURE__*/React.createElement(TextField, {\n    variant: \"outlined\",\n    id: \"search\",\n    label: \"Search\",\n    type: \"search\",\n    placeholder: \"Chicken\",\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 13\n    }\n  }, \"Items per Page: \"), /*#__PURE__*/React.createElement(Slider, {\n    defaultValue: 10,\n    getAriaValueText: valuetext,\n    \"aria-labelledby\": \"discrete-slider\",\n    valueLabelDisplay: \"auto\",\n    step: 5,\n    marks: true,\n    min: 10,\n    max: 50,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(VolumeUp, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Slider, {\n    value: typeof value === \"number\" ? value : 0,\n    onChange: handleSliderChange,\n    \"aria-labelledby\": \"input-slider\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    className: classes.input,\n    value: value,\n    margin: \"dense\",\n    onChange: handleInputChange,\n    onBlur: handleBlur,\n    inputProps: {\n      step: 10,\n      min: 0,\n      max: 100,\n      type: \"number\",\n      \"aria-labelledby\": \"input-slider\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 381,\n      columnNumber: 17\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 400,\n      columnNumber: 13\n    }\n  }, \"Dish Type: \"), /*#__PURE__*/React.createElement(FieldArray, {\n    name: \"Dish Type\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 13\n    }\n  }, arrayHelpers => values.dishTypes.map(dishType => {\n    return /*#__PURE__*/React.createElement(MyCheckBox, {\n      name: \"dishType\",\n      type: \"checkbox\",\n      value: dishType,\n      as: Checkbox,\n      label: dishType,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 21\n      }\n    });\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 421,\n      columnNumber: 13\n    }\n  }, \"Diet: \"), /*#__PURE__*/React.createElement(FieldArray, {\n    name: \"Diet\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 13\n    }\n  }, arrayHelpers => values.dietLabels.map(dietLabel => {\n    return /*#__PURE__*/React.createElement(MyRadio, {\n      name: \"dietLabel\",\n      type: \"radio\",\n      value: dietLabel.name,\n      as: Radio,\n      label: dietLabel.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 21\n      }\n    });\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 442,\n      columnNumber: 13\n    }\n  }, \"Meal Type: \"), /*#__PURE__*/React.createElement(Field, {\n    placeholder: \"Meal Type\",\n    name: \"mealType\",\n    type: \"select\",\n    as: Select,\n    displayEmpty: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 444,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 451,\n      columnNumber: 15\n    }\n  }, \"Meal Type\"), /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"breakfast\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 454,\n      columnNumber: 15\n    }\n  }, \"Breakfast\"), /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"lunch\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 455,\n      columnNumber: 15\n    }\n  }, \"Lunch\"), /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"dinner\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 456,\n      columnNumber: 15\n    }\n  }, \"Dinner\"), /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"snack\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 457,\n      columnNumber: 15\n    }\n  }, \"Snack\")), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 461,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    disabled: isSubmitting,\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 462,\n      columnNumber: 15\n    }\n  }, \"Submit\")), /*#__PURE__*/React.createElement(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 466,\n      columnNumber: 13\n    }\n  }, JSON.stringify(values, null, 2)), /*#__PURE__*/React.createElement(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 467,\n      columnNumber: 13\n    }\n  }, JSON.stringify(errors, null, 2)))));\n};\n\nexport default FormikForm;","map":{"version":3,"sources":["/Users/yeungj12/Projects/FrontEnd/ReactJS/frontend014_recipe/src/FormikForm.js"],"names":["React","Formik","Field","Form","useField","FieldArray","TextField","Button","Checkbox","Radio","FormControlLabel","Select","MenuItem","InputLabel","RadioGroup","Slider","yup","style","makeStyles","MyRadio","label","props","field","meta","MyCheckBox","MyTextField","id","placeholder","errorText","error","touched","validationSchema","object","search","string","required","max","pets","array","of","name","useStyles","theme","root","typography","button","backgroundColor","palette","background","paper","padding","spacing","fontSize","valuetext","value","FormikForm","classes","setValue","useState","handleSliderChange","event","newValue","handleInputChange","target","Number","handleBlur","dishTypes","dietLabels","apiName","description","cuisineTypes","healthLabels","data","setSubmitting","resetForm","console","log","values","errors","isSubmitting","handleChange","handleSubmit","margin","marginLeft","marginRight","width","input","step","min","type","arrayHelpers","map","dishType","dietLabel","JSON","stringify"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"typeface-roboto\";\nimport { Formik, Field, Form, useField, FieldArray } from \"formik\";\nimport {\n  TextField,\n  Button,\n  Checkbox,\n  Radio,\n  FormControlLabel,\n  Select,\n  MenuItem,\n  InputLabel,\n  RadioGroup,\n  Slider,\n} from \"@material-ui/core\";\nimport * as yup from \"yup\";\nimport style from \"./Modal.module.css\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst MyRadio = ({ label, ...props }) => {\n  const [field, meta] = useField(props);\n  return <FormControlLabel {...field} control={<Radio />} label={label} />;\n};\n\nconst MyCheckBox = ({ label, ...props }) => {\n  const [field, meta] = useField(props);\n  return <FormControlLabel {...field} control={<Checkbox />} label={label} />;\n};\n\nconst MyTextField = ({ id, label, placeholder, ...props }) => {\n  const [field, meta] = useField(props);\n  const errorText = meta.error && meta.touched ? meta.error : \"\";\n  return (\n    <TextField\n      {...field}\n      placeholder={placeholder}\n      helperText={errorText}\n      error={!!errorText}\n      id=\"error\"\n      label={label}\n      type=\"search\"\n      variant=\"outlined\"\n      fullWidth\n    />\n    // ! error={!!errorText} casting to boolean, if this string is empty--> false\n  );\n};\n\nconst validationSchema = yup.object({\n  // || passing validation to search using yup\n  search: yup.string().required().max(10),\n  pets: yup.array().of(\n    yup.object({\n      name: yup.string().required(),\n    })\n  ),\n});\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    ...theme.typography.button,\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(1),\n    fontSize: \"1.5em\",\n  },\n}));\n\nfunction valuetext(value) {\n  return `${value}`;\n}\n\nconst FormikForm = () => {\n  const classes = useStyles();\n\n  const [value, setValue] = React.useState(30);\n\n  const handleSliderChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  const handleInputChange = (event) => {\n    setValue(event.target.value === \"\" ? \"\" : Number(event.target.value));\n  };\n\n  const handleBlur = () => {\n    if (value < 0) {\n      setValue(0);\n    } else if (value > 100) {\n      setValue(100);\n    }\n  };\n  return (\n    <div>\n      <Formik\n        initialValues={{\n          search: \"\",\n          dishTypes: [\n            \"Bread\",\n            \"Cereals\",\n            \"Condiments and sauces\",\n            \"Drinks\",\n            \"Desserts\",\n            \"Main course\",\n            \"Pancake\",\n            \"Preps\",\n            \"Preserve\",\n            \"Salad\",\n            \"Sandwiches\",\n            \"Side dish\",\n            \"Soup\",\n            \"Starter\",\n            \"Sweets\",\n          ],\n          dietLabels: [\n            {\n              name: \"Balanced\",\n              apiName: \"balanced\",\n              description: \"Protein/Fat/Carb values in 15/35/50 ratio\",\n            },\n            {\n              name: \"High-Fiber\",\n              apiName: \"high-fiber\",\n              description: \"More than 5g fiber per serving\",\n            },\n            {\n              name: \"High-Protein\",\n              apiName: \"high-protein\",\n              description: \"More than 50% of total calories from proteins\",\n            },\n            {\n              name: \"Low-Carb\",\n              apiName: \"low-carb\",\n              description: \"Less than 20% of total calories from carbs\",\n            },\n            {\n              name: \"Low-Fat\",\n              apiName: \"low-fat\",\n              description: \"Less than 15% of total calories from fat\",\n            },\n            {\n              name: \"Low-Sodium\",\n              apiName: \"low-sodium\",\n              description: \"Less than 140mg Na per serving\",\n            },\n          ],\n          cuisineTypes: [\n            \"American\",\n            \"Asian\",\n            \"British\",\n            \"Caribbean\",\n            \"Central Europe\",\n            \"Chinese\",\n            \"Eastern Europe\",\n            \"French\",\n            \"Indian\",\n            \"Italian\",\n            \"Japanese\",\n            \"Kosher\",\n            \"Mediterranean\",\n            \"Mexican\",\n            \"Middle Eastern\",\n            \"Nordic\",\n            \"South American\",\n            \"South East Asian\",\n          ],\n          healthLabels: [\n            {\n              name: \"Alcohol-free\",\n              apiName: \"alcohol-free\",\n              description: \"No alcohol used or contained\",\n            },\n            {\n              name: \"Celery-free\",\n              apiName: \"celery-free\",\n              description: \"does not contain celery or derivatives\",\n            },\n            {\n              name: \"Crustacean-free\",\n              apiName: \"crustacean-free\",\n              description:\n                \"does not contain crustaceans (shrimp, lobster etc.) or derivatives\",\n            },\n            {\n              name: \"Dairy\",\n              apiName: \"dairy-free\",\n              description: \"No dairy; no lactose\",\n            },\n            {\n              name: \"Eggs\",\n              apiName: \"egg-free\",\n              description: \"No eggs or products containing eggs\",\n            },\n            {\n              name: \"Fish\",\n              apiName: \"fish-free\",\n              description: \"No fish or fish derivatives\",\n            },\n            {\n              name: \"FODMAP free\",\n              apiName: \"fodmap-free\",\n              description: \"Does not contain FODMAP foods\",\n            },\n            {\n              name: \"Gluten\",\n              apiName: \"gluten-free\",\n              description: \"No ingredients containing gluten\",\n            },\n            {\n              name: \"Keto\",\n              apiName: \"keto-friendly\",\n              description: \"Maximum 7 grams of net carbs per serving\",\n            },\n            {\n              name: \"Kidney friendly\",\n              apiName: \"kidney-friendly\",\n              description:\n                \"per serving – phosphorus less than 250 mg AND potassium less than 500 mg AND sodium: less than 500 mg\",\n            },\n            {\n              name: \"Kosher\",\n              apiName: \"kosher\",\n              description:\n                \"contains only ingredients allowed by the kosher diet. However it does not guarantee kosher preparation of the ingredients themselves\",\n            },\n            {\n              name: \"Low potassium\",\n              apiName: \"low-potassium\",\n              description: \"Less than 150mg per serving\",\n            },\n            {\n              name: \"Lupine-free\",\n              apiName: \"lupine-free\",\n              description: \"does not contain lupine or derivatives\",\n            },\n            {\n              name: \"Mustard-free\",\n              apiName: \"mustard-free\",\n              description: \"does not contain mustard or derivatives\",\n            },\n            {\n              name: \"n/a\",\n              apiName: \"low-fat-abs\",\n              description: \"Less than 3g of fat per serving\",\n            },\n            {\n              name: \"No oil added\",\n              apiName: \"No-oil-added\",\n              description:\n                \"No oil added except to what is contained in the basic ingredients\",\n            },\n            {\n              name: \"No-sugar\",\n              apiName: \"low-sugar\",\n              description:\n                \"No simple sugars – glucose, dextrose, galactose, fructose, sucrose, lactose, maltose\",\n            },\n            {\n              name: \"Paleo\",\n              apiName: \"paleo\",\n              description:\n                \"Excludes what are perceived to be agricultural products; grains, legumes, dairy products, potatoes, refined salt, refined sugar, and processed oils\",\n            },\n            {\n              name: \"Peanuts\",\n              apiName: \"peanut-free\",\n              description: \"No peanuts or products containing peanuts\",\n            },\n            {\n              name: \"Pescatarian\",\n              apiName: \"pecatarian\",\n              description:\n                \"Does not contain meat or meat based products, can contain dairy and fish\",\n            },\n            {\n              name: \"Pork-free\",\n              apiName: \"pork-free\",\n              description: \"does not contain pork or derivatives\",\n            },\n            {\n              name: \"Red meat-free\",\n              apiName: \"red-meat-free\",\n              description:\n                \"does not contain beef, lamb, pork, duck, goose, game, horse, and other types of red meat or products containing red meat.\",\n            },\n            {\n              name: \"Sesame-free\",\n              apiName: \"sesame-free\",\n              description: \"does not contain sesame seed or derivatives\",\n            },\n            {\n              name: \"Shellfish\",\n              apiName: \"shellfish-free\",\n              description: \"No shellfish or shellfish derivatives\",\n            },\n            {\n              name: \"Soy\",\n              apiName: \"soy-free\",\n              description: \"No soy or products containing soy\",\n            },\n            {\n              name: \"Sugar-conscious\",\n              apiName: \"sugar-conscious\",\n              description: \"Less than 4g of sugar per serving\",\n            },\n            {\n              name: \"Tree Nuts\",\n              apiName: \"tree-nut-free\",\n              description: \"No tree nuts or products containing tree nuts\",\n            },\n            {\n              name: \"Vegan\",\n              apiName: \"vegan\",\n              description: \"No meat, poultry, fish, dairy, eggs or honey\",\n            },\n            {\n              name: \"Vegetarian\",\n              apiName: \"vegetarian\",\n              description: \"No meat, poultry, or fish\",\n            },\n            {\n              name: \"Wheat-free\",\n              apiName: \"wheat-free\",\n              description: \"No wheat, can have gluten though\",\n            },\n          ],\n        }}\n        // || validation using yup\n        validationSchema={validationSchema}\n        onSubmit={(data, { setSubmitting, resetForm }) => {\n          setSubmitting(true);\n          // *make async call\n          console.log(\"Submit: \", data);\n          setSubmitting(false);\n          resetForm(true);\n        }}\n      >\n        {({\n          values,\n          errors,\n          isSubmitting,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n        }) => (\n          <Form style={{ margin: \"10px\", marginLeft: \"7%\", marginRight: \"7%\" }}>\n            <div style={{ width: \"70%\" }}>\n              <div className={classes.root}>{\"Search: \"}</div>\n              <TextField\n                variant=\"outlined\"\n                id=\"search\"\n                label=\"Search\"\n                type=\"search\"\n                placeholder=\"Chicken\"\n                fullWidth\n              />\n            </div>\n\n            <div className={classes.root}>{\"Items per Page: \"}</div>\n            <Slider\n              defaultValue={10}\n              getAriaValueText={valuetext}\n              aria-labelledby=\"discrete-slider\"\n              valueLabelDisplay=\"auto\"\n              step={5}\n              marks\n              min={10}\n              max={50}\n            />\n            <Grid container spacing={2} alignItems=\"center\">\n              <Grid item>\n                <VolumeUp />\n              </Grid>\n              <Grid item xs>\n                <Slider\n                  value={typeof value === \"number\" ? value : 0}\n                  onChange={handleSliderChange}\n                  aria-labelledby=\"input-slider\"\n                />\n              </Grid>\n              <Grid item>\n                <Input\n                  className={classes.input}\n                  value={value}\n                  margin=\"dense\"\n                  onChange={handleInputChange}\n                  onBlur={handleBlur}\n                  inputProps={{\n                    step: 10,\n                    min: 0,\n                    max: 100,\n                    type: \"number\",\n                    \"aria-labelledby\": \"input-slider\",\n                  }}\n                />\n              </Grid>\n            </Grid>\n\n            {/* multiple checkboxes starts here */}\n\n            <div className={classes.root}>{\"Dish Type: \"}</div>\n\n            <FieldArray name=\"Dish Type\">\n              {(arrayHelpers) =>\n                values.dishTypes.map((dishType) => {\n                  return (\n                    <MyCheckBox\n                      name=\"dishType\"\n                      type=\"checkbox\"\n                      value={dishType}\n                      as={Checkbox}\n                      label={dishType}\n                    />\n                  );\n                })\n              }\n            </FieldArray>\n\n            {/* multiple checkboxes ends here */}\n            {/* Radio Button starts here */}\n\n            <div className={classes.root}>{\"Diet: \"}</div>\n\n            <FieldArray name=\"Diet\">\n              {(arrayHelpers) =>\n                values.dietLabels.map((dietLabel) => {\n                  return (\n                    <MyRadio\n                      name=\"dietLabel\"\n                      type=\"radio\"\n                      value={dietLabel.name}\n                      as={Radio}\n                      label={dietLabel.name}\n                    />\n                  );\n                })\n              }\n            </FieldArray>\n\n            {/* Radio Buttons ends here */}\n            {/* // || lines up with pets.name */}\n\n            <div className={classes.root}>{\"Meal Type: \"}</div>\n\n            <Field\n              placeholder=\"Meal Type\"\n              name={\"mealType\"}\n              type=\"select\"\n              as={Select}\n              displayEmpty\n            >\n              <InputLabel>Meal Type</InputLabel>\n\n              {/* <Select native> */}\n              <MenuItem value=\"breakfast\">Breakfast</MenuItem>\n              <MenuItem value=\"lunch\">Lunch</MenuItem>\n              <MenuItem value=\"dinner\">Dinner</MenuItem>\n              <MenuItem value=\"snack\">Snack</MenuItem>\n              {/* </Select> */}\n            </Field>\n            {/* Button */}\n            <div>\n              <Button disabled={isSubmitting} type=\"submit\">\n                Submit\n              </Button>\n            </div>\n            <pre>{JSON.stringify(values, null, 2)}</pre>\n            <pre>{JSON.stringify(errors, null, 2)}</pre>\n          </Form>\n        )}\n      </Formik>\n    </div>\n  );\n};\n\nexport default FormikForm;\n"]},"metadata":{},"sourceType":"module"}