{"ast":null,"code":"var _jsxFileName = \"E:\\\\Projects\\\\FrontEnd\\\\ReactJS\\\\frontend014-recipe\\\\src\\\\App.js\";\nimport React, { useEffect, useState } from \"react\";\nimport Recipe from \"./Recipe\";\nimport Nav from \"./Nav\";\nimport PaginationFooter from \"./Pagination\";\nimport Modal from \"react-modal\";\nimport PopoverStickOnHover from \"./PopOver\";\nimport FormikForm from \"./FormikForm\";\nimport { Form } from \"react-bootstrap\";\nimport { TextField, Button, Checkbox, Radio, FormControlLabel, Select, MenuItem } from \"@material-ui/core\";\nimport \"./App.css\";\nimport style from \"./Modal.module.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSearch } from \"@fortawesome/free-solid-svg-icons\";\nModal.setAppElement(\"#root\");\n\nconst App = () => {\n  const APP_ID = \"65eff37b\";\n  const APP_KEY = \"013e642e140af7db99a3663be34125e2\";\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [query, setQuery] = useState(\"chicken\");\n  const [isHovered, setIsHovered] = useState(false);\n  const [cards, setCards] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [cardsPerPage, setCardsPerPage] = useState(10);\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n  let indexOfFirstCard = 0;\n  let indexOfLastCard = 10;\n  let inputClass = \"search-bar\";\n  let buttonClass = \"search-button\";\n  const dishTypes = [\"Bread\", \"Cereals\", \"Condiments and sauces\", \"Drinks\", \"Desserts\", \"Main course\", \"Pancake\", \"Preps\", \"Preserve\", \"Salad\", \"Sandwiches\", \"Side dish\", \"Soup\", \"Starter\", \"Sweets\"];\n  const cuisineTypes = [\"American\", \"Asian\", \"British\", \"Caribbean\", \"Central Europe\", \"Chinese\", \"Eastern Europe\", \"French\", \"Indian\", \"Italian\", \"Japanese\", \"Kosher\", \"Mediterranean\", \"Mexican\", \"Middle Eastern\", \"Nordic\", \"South American\", \"South East Asian\"];\n  const dietLabels = [{\n    name: \"Balanced\",\n    apiName: \"balanced\",\n    description: \"Protein/Fat/Carb values in 15/35/50 ratio\"\n  }, {\n    name: \"High-Fiber\",\n    apiName: \"high-fiber\",\n    description: \"More than 5g fiber per serving\"\n  }, {\n    name: \"High-Protein\",\n    apiName: \"high-protein\",\n    description: \"More than 50% of total calories from proteins\"\n  }, {\n    name: \"Low-Carb\",\n    apiName: \"low-carb\",\n    description: \"Less than 20% of total calories from carbs\"\n  }, {\n    name: \"Low-Fat\",\n    apiName: \"low-fat\",\n    description: \"Less than 15% of total calories from fat\"\n  }, {\n    name: \"Low-Sodium\",\n    apiName: \"low-sodium\",\n    description: \"Less than 140mg Na per serving\"\n  }];\n  const healthLabels = [{\n    name: \"Alcohol-free\",\n    apiName: \"alcohol-free\",\n    description: \"No alcohol used or contained\"\n  }, {\n    name: \"Celery-free\",\n    apiName: \"celery-free\",\n    description: \"does not contain celery or derivatives\"\n  }, {\n    name: \"Crustacean-free\",\n    apiName: \"crustacean-free\",\n    description: \"does not contain crustaceans (shrimp, lobster etc.) or derivatives\"\n  }, {\n    name: \"Dairy\",\n    apiName: \"dairy-free\",\n    description: \"No dairy; no lactose\"\n  }, {\n    name: \"Eggs\",\n    apiName: \"egg-free\",\n    description: \"No eggs or products containing eggs\"\n  }, {\n    name: \"Fish\",\n    apiName: \"fish-free\",\n    description: \"No fish or fish derivatives\"\n  }, {\n    name: \"FODMAP free\",\n    apiName: \"fodmap-free\",\n    description: \"Does not contain FODMAP foods\"\n  }, {\n    name: \"Gluten\",\n    apiName: \"gluten-free\",\n    description: \"No ingredients containing gluten\"\n  }, {\n    name: \"Keto\",\n    apiName: \"keto-friendly\",\n    description: \"Maximum 7 grams of net carbs per serving\"\n  }, {\n    name: \"Kidney friendly\",\n    apiName: \"kidney-friendly\",\n    description: \"per serving – phosphorus less than 250 mg AND potassium less than 500 mg AND sodium: less than 500 mg\"\n  }, {\n    name: \"Kosher\",\n    apiName: \"kosher\",\n    description: \"contains only ingredients allowed by the kosher diet. However it does not guarantee kosher preparation of the ingredients themselves\"\n  }, {\n    name: \"Low potassium\",\n    apiName: \"low-potassium\",\n    description: \"Less than 150mg per serving\"\n  }, {\n    name: \"Lupine-free\",\n    apiName: \"lupine-free\",\n    description: \"does not contain lupine or derivatives\"\n  }, {\n    name: \"Mustard-free\",\n    apiName: \"mustard-free\",\n    description: \"does not contain mustard or derivatives\"\n  }, {\n    name: \"n/a\",\n    apiName: \"low-fat-abs\",\n    description: \"Less than 3g of fat per serving\"\n  }, {\n    name: \"No oil added\",\n    apiName: \"No-oil-added\",\n    description: \"No oil added except to what is contained in the basic ingredients\"\n  }, {\n    name: \"No-sugar\",\n    apiName: \"low-sugar\",\n    description: \"No simple sugars – glucose, dextrose, galactose, fructose, sucrose, lactose, maltose\"\n  }, {\n    name: \"Paleo\",\n    apiName: \"paleo\",\n    description: \"Excludes what are perceived to be agricultural products; grains, legumes, dairy products, potatoes, refined salt, refined sugar, and processed oils\"\n  }, {\n    name: \"Peanuts\",\n    apiName: \"peanut-free\",\n    description: \"No peanuts or products containing peanuts\"\n  }, {\n    name: \"Pescatarian\",\n    apiName: \"pecatarian\",\n    description: \"Does not contain meat or meat based products, can contain dairy and fish\"\n  }, {\n    name: \"Pork-free\",\n    apiName: \"pork-free\",\n    description: \"does not contain pork or derivatives\"\n  }, {\n    name: \"Red meat-free\",\n    apiName: \"red-meat-free\",\n    description: \"does not contain beef, lamb, pork, duck, goose, game, horse, and other types of red meat or products containing red meat.\"\n  }, {\n    name: \"Sesame-free\",\n    apiName: \"sesame-free\",\n    description: \"does not contain sesame seed or derivatives\"\n  }, {\n    name: \"Shellfish\",\n    apiName: \"shellfish-free\",\n    description: \"No shellfish or shellfish derivatives\"\n  }, {\n    name: \"Soy\",\n    apiName: \"soy-free\",\n    description: \"No soy or products containing soy\"\n  }, {\n    name: \"Sugar-conscious\",\n    apiName: \"sugar-conscious\",\n    description: \"Less than 4g of sugar per serving\"\n  }, {\n    name: \"Tree Nuts\",\n    apiName: \"tree-nut-free\",\n    description: \"No tree nuts or products containing tree nuts\"\n  }, {\n    name: \"Vegan\",\n    apiName: \"vegan\",\n    description: \"No meat, poultry, fish, dairy, eggs or honey\"\n  }, {\n    name: \"Vegetarian\",\n    apiName: \"vegetarian\",\n    description: \"No meat, poultry, or fish\"\n  }, {\n    name: \"Wheat-free\",\n    apiName: \"wheat-free\",\n    description: \"No wheat, can have gluten though\"\n  }];\n  const [searchRange, setSearchRange] = useState(\"&from=0&to=10\");\n  useEffect(() => {\n    async function getRecipes() {\n      // get current posts\n      setLoading(true); // || use await for data that doesn't come back instantly\n\n      const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}${searchRange}`);\n      const data = await response.json();\n      setRecipes(data.hits);\n      setCards(data);\n      console.log(data);\n      setLoading(false);\n    }\n\n    getRecipes();\n  }, [query, searchRange]);\n  console.log(cards);\n  const totalCards = 100;\n  console.log(totalCards); //change page\n\n  const paginate = pageNumber => {\n    console.log(pageNumber);\n    setCurrentPage(pageNumber);\n    console.log(currentPage);\n    indexOfLastCard = pageNumber * cardsPerPage;\n    indexOfFirstCard = indexOfLastCard - cardsPerPage;\n    console.log(indexOfLastCard);\n    console.log(indexOfFirstCard);\n    setSearchRange(`&from=${indexOfFirstCard}&to=${indexOfLastCard}`);\n  };\n\n  const updateSearch = e => {\n    setSearch(e.target.value);\n  };\n\n  const getSearch = e => {\n    // || prevent page refresh\n    e.preventDefault();\n\n    if (!(search === \"\" || search === \" \")) {\n      setQuery(search);\n      setSearch(\"\");\n    }\n  };\n\n  const getAdvancedSearch = e => {\n    e.preventDefault();\n\n    if (!(search === \"\" || search === \" \")) {\n      setQuery(search);\n      setSearch(\"\");\n    }\n\n    setCardsPerPage();\n  };\n\n  if (isHovered) {\n    inputClass = \"search-bar-expand search-bar\";\n    buttonClass = \"search-button search-button-expand\";\n  } else {\n    inputClass = \"search-bar\";\n    buttonClass = \"search-button\";\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Nav, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"search-box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 9\n    }\n  }, \"Showing Results for:\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 11\n    }\n  }, query)), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: getSearch,\n    className: \"search-form\",\n    onMouseEnter: () => setIsHovered(true),\n    onMouseLeave: () => setIsHovered(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    className: inputClass,\n    value: search,\n    onChange: updateSearch,\n    placeholder: \"Type to search\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: buttonClass,\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faSearch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setModalIsOpen(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 9\n    }\n  }, \"Advanced Search\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"recipes\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 7\n    }\n  }, recipes.map(recipe => /*#__PURE__*/React.createElement(Recipe, {\n    key: recipe.recipe.label + recipe.recipe.calories,\n    title: recipe.recipe.label,\n    calories: recipe.recipe.calories,\n    image: recipe.recipe.image,\n    ingredients: recipe.recipe.ingredients,\n    loading: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 381,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(\"footer\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 391,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(PaginationFooter, {\n    cardsPerPage: cardsPerPage,\n    totalCards: totalCards,\n    paginate: paginate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 392,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Modal, {\n    isOpen: modalIsOpen,\n    onRequestClose: () => setModalIsOpen(false),\n    style: {\n      overlay: {\n        backgroundColor: \"rgba(0,0,0,0.7)\"\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 399,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ModalHeader\",\n    style: {\n      display: \"flex\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 405,\n      columnNumber: 11\n    }\n  }, \"Advanced Search\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ModalContent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 407,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FormikForm, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 408,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Form, {\n    onSubmit: getAdvancedSearch,\n    className: \"advanced-search-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 410,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Form.Group, {\n    controlId: \"Search\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 412,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 413,\n      columnNumber: 15\n    }\n  }, \"Search: \"), /*#__PURE__*/React.createElement(Form.Control, {\n    type: \"text\",\n    placeholder: \"Chicken\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 414,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(Form.Group, {\n    controlId: \"NoOfItems\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 418,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 419,\n      columnNumber: 15\n    }\n  }, \"Number of Items Per Page\"), /*#__PURE__*/React.createElement(Form.Control, {\n    as: \"select\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 421,\n      columnNumber: 17\n    }\n  }, \"10\"), /*#__PURE__*/React.createElement(\"option\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 422,\n      columnNumber: 17\n    }\n  }, \"15\"), /*#__PURE__*/React.createElement(\"option\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 17\n    }\n  }, \"20\"), /*#__PURE__*/React.createElement(\"option\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 424,\n      columnNumber: 17\n    }\n  }, \"25\"), /*#__PURE__*/React.createElement(\"option\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 425,\n      columnNumber: 17\n    }\n  }, \"30\"))), /*#__PURE__*/React.createElement(Form.Group, {\n    controlId: \"MealType\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 430,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 431,\n      columnNumber: 15\n    }\n  }, \"Meal Type: \"), /*#__PURE__*/React.createElement(Form.Control, {\n    as: \"select\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 432,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 433,\n      columnNumber: 17\n    }\n  }, \"Breakfast\"), /*#__PURE__*/React.createElement(\"option\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 434,\n      columnNumber: 17\n    }\n  }, \"Lunch\"), /*#__PURE__*/React.createElement(\"option\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 435,\n      columnNumber: 17\n    }\n  }, \"Dinner\"), /*#__PURE__*/React.createElement(\"option\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 436,\n      columnNumber: 17\n    }\n  }, \"Snack\"))), /*#__PURE__*/React.createElement(Form.Group, {\n    controlId: \"DishType\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 439,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 440,\n      columnNumber: 15\n    }\n  }, \"Dish Type\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 441,\n      columnNumber: 15\n    }\n  }, dishTypes.map((dishType, index) => /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"inline-flex\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 443,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(Form.Check, {\n    inline: true,\n    label: `${dishType} `,\n    type: \"checkbox\",\n    id: `inline-${dishType}-${index}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 444,\n      columnNumber: 21\n    }\n  }))))), /*#__PURE__*/React.createElement(Form.Group, {\n    controlId: \"CuisineType\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 456,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 457,\n      columnNumber: 15\n    }\n  }, \"Cuisine Types\"), /*#__PURE__*/React.createElement(Form.Control, {\n    as: \"select\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 458,\n      columnNumber: 15\n    }\n  }, cuisineTypes.map(cuisineType => /*#__PURE__*/React.createElement(\"option\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 460,\n      columnNumber: 19\n    }\n  }, cuisineType)))), /*#__PURE__*/React.createElement(\"fieldset\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 466,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form.Group, {\n    controlId: \"Diet\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 467,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 468,\n      columnNumber: 17\n    }\n  }, \"Diet\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 469,\n      columnNumber: 17\n    }\n  }, dietLabels.map((dietLabel, index) => /*#__PURE__*/React.createElement(PopoverStickOnHover, {\n    component: /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 472,\n        columnNumber: 34\n      }\n    }, `${dietLabel.description}`),\n    placement: \"top\",\n    onMouseEnter: () => {},\n    delay: 200,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 471,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"inline-flex\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 477,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(Form.Check, {\n    inline: true,\n    label: `${dietLabel.name} `,\n    type: \"radio\",\n    name: \"formHorizontalRadios\",\n    id: `inline-${dietLabel.name}-${index}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 478,\n      columnNumber: 25\n    }\n  }))))))), /*#__PURE__*/React.createElement(Form.Group, {\n    controlId: \"HealthLabel\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 493,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 494,\n      columnNumber: 15\n    }\n  }, \"Health Labels\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 495,\n      columnNumber: 15\n    }\n  }, healthLabels.map((healthLabel, index) => /*#__PURE__*/React.createElement(PopoverStickOnHover, {\n    component: /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 498,\n        columnNumber: 32\n      }\n    }, `${healthLabel.description}`),\n    placement: \"top\",\n    onMouseEnter: () => {},\n    delay: 200,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 497,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"inline-flex\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 503,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Form.Check, {\n    inline: true,\n    label: `${healthLabel.name} `,\n    type: \"checkbox\",\n    id: `inline-${healthLabel.name}-${index}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 504,\n      columnNumber: 23\n    }\n  })))))), /*#__PURE__*/React.createElement(Button, {\n    variant: \"success\",\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 516,\n      columnNumber: 13\n    }\n  }, \"Submit\"))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 522,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setModalIsOpen(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 523,\n      columnNumber: 11\n    }\n  }, \"Close\"))));\n};\n\nexport default App;","map":{"version":3,"sources":["E:/Projects/FrontEnd/ReactJS/frontend014-recipe/src/App.js"],"names":["React","useEffect","useState","Recipe","Nav","PaginationFooter","Modal","PopoverStickOnHover","FormikForm","Form","TextField","Button","Checkbox","Radio","FormControlLabel","Select","MenuItem","style","FontAwesomeIcon","faSearch","setAppElement","App","APP_ID","APP_KEY","recipes","setRecipes","search","setSearch","query","setQuery","isHovered","setIsHovered","cards","setCards","loading","setLoading","currentPage","setCurrentPage","cardsPerPage","setCardsPerPage","modalIsOpen","setModalIsOpen","indexOfFirstCard","indexOfLastCard","inputClass","buttonClass","dishTypes","cuisineTypes","dietLabels","name","apiName","description","healthLabels","searchRange","setSearchRange","getRecipes","response","fetch","data","json","hits","console","log","totalCards","paginate","pageNumber","updateSearch","e","target","value","getSearch","preventDefault","getAdvancedSearch","map","recipe","label","calories","image","ingredients","overlay","backgroundColor","display","dishType","index","cuisineType","dietLabel","healthLabel"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nimport Recipe from \"./Recipe\";\r\nimport Nav from \"./Nav\";\r\nimport PaginationFooter from \"./Pagination\";\r\nimport Modal from \"react-modal\";\r\nimport PopoverStickOnHover from \"./PopOver\";\r\nimport FormikForm from \"./FormikForm\";\r\n\r\nimport { Form } from \"react-bootstrap\";\r\nimport {\r\n  TextField,\r\n  Button,\r\n  Checkbox,\r\n  Radio,\r\n  FormControlLabel,\r\n  Select,\r\n  MenuItem,\r\n} from \"@material-ui/core\";\r\n\r\nimport \"./App.css\";\r\nimport style from \"./Modal.module.css\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSearch } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nModal.setAppElement(\"#root\");\r\n\r\nconst App = () => {\r\n  const APP_ID = \"65eff37b\";\r\n  const APP_KEY = \"013e642e140af7db99a3663be34125e2\";\r\n\r\n  const [recipes, setRecipes] = useState([]);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [query, setQuery] = useState(\"chicken\");\r\n  const [isHovered, setIsHovered] = useState(false);\r\n  const [cards, setCards] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [cardsPerPage, setCardsPerPage] = useState(10);\r\n  const [modalIsOpen, setModalIsOpen] = useState(false);\r\n\r\n  let indexOfFirstCard = 0;\r\n  let indexOfLastCard = 10;\r\n  let inputClass = \"search-bar\";\r\n  let buttonClass = \"search-button\";\r\n\r\n  const dishTypes = [\r\n    \"Bread\",\r\n    \"Cereals\",\r\n    \"Condiments and sauces\",\r\n    \"Drinks\",\r\n    \"Desserts\",\r\n    \"Main course\",\r\n    \"Pancake\",\r\n    \"Preps\",\r\n    \"Preserve\",\r\n    \"Salad\",\r\n    \"Sandwiches\",\r\n    \"Side dish\",\r\n    \"Soup\",\r\n    \"Starter\",\r\n    \"Sweets\",\r\n  ];\r\n\r\n  const cuisineTypes = [\r\n    \"American\",\r\n    \"Asian\",\r\n    \"British\",\r\n    \"Caribbean\",\r\n    \"Central Europe\",\r\n    \"Chinese\",\r\n    \"Eastern Europe\",\r\n    \"French\",\r\n    \"Indian\",\r\n    \"Italian\",\r\n    \"Japanese\",\r\n    \"Kosher\",\r\n    \"Mediterranean\",\r\n    \"Mexican\",\r\n    \"Middle Eastern\",\r\n    \"Nordic\",\r\n    \"South American\",\r\n    \"South East Asian\",\r\n  ];\r\n\r\n  const dietLabels = [\r\n    {\r\n      name: \"Balanced\",\r\n      apiName: \"balanced\",\r\n      description: \"Protein/Fat/Carb values in 15/35/50 ratio\",\r\n    },\r\n    {\r\n      name: \"High-Fiber\",\r\n      apiName: \"high-fiber\",\r\n      description: \"More than 5g fiber per serving\",\r\n    },\r\n    {\r\n      name: \"High-Protein\",\r\n      apiName: \"high-protein\",\r\n      description: \"More than 50% of total calories from proteins\",\r\n    },\r\n    {\r\n      name: \"Low-Carb\",\r\n      apiName: \"low-carb\",\r\n      description: \"Less than 20% of total calories from carbs\",\r\n    },\r\n    {\r\n      name: \"Low-Fat\",\r\n      apiName: \"low-fat\",\r\n      description: \"Less than 15% of total calories from fat\",\r\n    },\r\n    {\r\n      name: \"Low-Sodium\",\r\n      apiName: \"low-sodium\",\r\n      description: \"Less than 140mg Na per serving\",\r\n    },\r\n  ];\r\n\r\n  const healthLabels = [\r\n    {\r\n      name: \"Alcohol-free\",\r\n      apiName: \"alcohol-free\",\r\n      description: \"No alcohol used or contained\",\r\n    },\r\n    {\r\n      name: \"Celery-free\",\r\n      apiName: \"celery-free\",\r\n      description: \"does not contain celery or derivatives\",\r\n    },\r\n    {\r\n      name: \"Crustacean-free\",\r\n      apiName: \"crustacean-free\",\r\n      description:\r\n        \"does not contain crustaceans (shrimp, lobster etc.) or derivatives\",\r\n    },\r\n    {\r\n      name: \"Dairy\",\r\n      apiName: \"dairy-free\",\r\n      description: \"No dairy; no lactose\",\r\n    },\r\n    {\r\n      name: \"Eggs\",\r\n      apiName: \"egg-free\",\r\n      description: \"No eggs or products containing eggs\",\r\n    },\r\n    {\r\n      name: \"Fish\",\r\n      apiName: \"fish-free\",\r\n      description: \"No fish or fish derivatives\",\r\n    },\r\n    {\r\n      name: \"FODMAP free\",\r\n      apiName: \"fodmap-free\",\r\n      description: \"Does not contain FODMAP foods\",\r\n    },\r\n    {\r\n      name: \"Gluten\",\r\n      apiName: \"gluten-free\",\r\n      description: \"No ingredients containing gluten\",\r\n    },\r\n    {\r\n      name: \"Keto\",\r\n      apiName: \"keto-friendly\",\r\n      description: \"Maximum 7 grams of net carbs per serving\",\r\n    },\r\n    {\r\n      name: \"Kidney friendly\",\r\n      apiName: \"kidney-friendly\",\r\n      description:\r\n        \"per serving – phosphorus less than 250 mg AND potassium less than 500 mg AND sodium: less than 500 mg\",\r\n    },\r\n    {\r\n      name: \"Kosher\",\r\n      apiName: \"kosher\",\r\n      description:\r\n        \"contains only ingredients allowed by the kosher diet. However it does not guarantee kosher preparation of the ingredients themselves\",\r\n    },\r\n    {\r\n      name: \"Low potassium\",\r\n      apiName: \"low-potassium\",\r\n      description: \"Less than 150mg per serving\",\r\n    },\r\n    {\r\n      name: \"Lupine-free\",\r\n      apiName: \"lupine-free\",\r\n      description: \"does not contain lupine or derivatives\",\r\n    },\r\n    {\r\n      name: \"Mustard-free\",\r\n      apiName: \"mustard-free\",\r\n      description: \"does not contain mustard or derivatives\",\r\n    },\r\n    {\r\n      name: \"n/a\",\r\n      apiName: \"low-fat-abs\",\r\n      description: \"Less than 3g of fat per serving\",\r\n    },\r\n    {\r\n      name: \"No oil added\",\r\n      apiName: \"No-oil-added\",\r\n      description:\r\n        \"No oil added except to what is contained in the basic ingredients\",\r\n    },\r\n    {\r\n      name: \"No-sugar\",\r\n      apiName: \"low-sugar\",\r\n      description:\r\n        \"No simple sugars – glucose, dextrose, galactose, fructose, sucrose, lactose, maltose\",\r\n    },\r\n    {\r\n      name: \"Paleo\",\r\n      apiName: \"paleo\",\r\n      description:\r\n        \"Excludes what are perceived to be agricultural products; grains, legumes, dairy products, potatoes, refined salt, refined sugar, and processed oils\",\r\n    },\r\n    {\r\n      name: \"Peanuts\",\r\n      apiName: \"peanut-free\",\r\n      description: \"No peanuts or products containing peanuts\",\r\n    },\r\n    {\r\n      name: \"Pescatarian\",\r\n      apiName: \"pecatarian\",\r\n      description:\r\n        \"Does not contain meat or meat based products, can contain dairy and fish\",\r\n    },\r\n    {\r\n      name: \"Pork-free\",\r\n      apiName: \"pork-free\",\r\n      description: \"does not contain pork or derivatives\",\r\n    },\r\n    {\r\n      name: \"Red meat-free\",\r\n      apiName: \"red-meat-free\",\r\n      description:\r\n        \"does not contain beef, lamb, pork, duck, goose, game, horse, and other types of red meat or products containing red meat.\",\r\n    },\r\n    {\r\n      name: \"Sesame-free\",\r\n      apiName: \"sesame-free\",\r\n      description: \"does not contain sesame seed or derivatives\",\r\n    },\r\n    {\r\n      name: \"Shellfish\",\r\n      apiName: \"shellfish-free\",\r\n      description: \"No shellfish or shellfish derivatives\",\r\n    },\r\n    {\r\n      name: \"Soy\",\r\n      apiName: \"soy-free\",\r\n      description: \"No soy or products containing soy\",\r\n    },\r\n    {\r\n      name: \"Sugar-conscious\",\r\n      apiName: \"sugar-conscious\",\r\n      description: \"Less than 4g of sugar per serving\",\r\n    },\r\n    {\r\n      name: \"Tree Nuts\",\r\n      apiName: \"tree-nut-free\",\r\n      description: \"No tree nuts or products containing tree nuts\",\r\n    },\r\n    {\r\n      name: \"Vegan\",\r\n      apiName: \"vegan\",\r\n      description: \"No meat, poultry, fish, dairy, eggs or honey\",\r\n    },\r\n    {\r\n      name: \"Vegetarian\",\r\n      apiName: \"vegetarian\",\r\n      description: \"No meat, poultry, or fish\",\r\n    },\r\n    {\r\n      name: \"Wheat-free\",\r\n      apiName: \"wheat-free\",\r\n      description: \"No wheat, can have gluten though\",\r\n    },\r\n  ];\r\n  const [searchRange, setSearchRange] = useState(\"&from=0&to=10\");\r\n\r\n  useEffect(() => {\r\n    async function getRecipes() {\r\n      // get current posts\r\n      setLoading(true);\r\n      // || use await for data that doesn't come back instantly\r\n      const response = await fetch(\r\n        `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}${searchRange}`\r\n      );\r\n      const data = await response.json();\r\n      setRecipes(data.hits);\r\n      setCards(data);\r\n      console.log(data);\r\n      setLoading(false);\r\n    }\r\n    getRecipes();\r\n  }, [query, searchRange]);\r\n\r\n  console.log(cards);\r\n\r\n  const totalCards = 100;\r\n  console.log(totalCards);\r\n\r\n  //change page\r\n  const paginate = (pageNumber) => {\r\n    console.log(pageNumber);\r\n    setCurrentPage(pageNumber);\r\n\r\n    console.log(currentPage);\r\n    indexOfLastCard = pageNumber * cardsPerPage;\r\n    indexOfFirstCard = indexOfLastCard - cardsPerPage;\r\n\r\n    console.log(indexOfLastCard);\r\n\r\n    console.log(indexOfFirstCard);\r\n    setSearchRange(`&from=${indexOfFirstCard}&to=${indexOfLastCard}`);\r\n  };\r\n\r\n  const updateSearch = (e) => {\r\n    setSearch(e.target.value);\r\n  };\r\n\r\n  const getSearch = (e) => {\r\n    // || prevent page refresh\r\n    e.preventDefault();\r\n    if (!(search === \"\" || search === \" \")) {\r\n      setQuery(search);\r\n      setSearch(\"\");\r\n    }\r\n  };\r\n\r\n  const getAdvancedSearch = (e) => {\r\n    e.preventDefault();\r\n    if (!(search === \"\" || search === \" \")) {\r\n      setQuery(search);\r\n      setSearch(\"\");\r\n    }\r\n    setCardsPerPage();\r\n  };\r\n\r\n  if (isHovered) {\r\n    inputClass = \"search-bar-expand search-bar\";\r\n    buttonClass = \"search-button search-button-expand\";\r\n  } else {\r\n    inputClass = \"search-bar\";\r\n    buttonClass = \"search-button\";\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Nav />\r\n      <div className=\"search-box\">\r\n        <p>\r\n          Showing Results for:\r\n          <br />\r\n          <h4>{query}</h4>\r\n        </p>\r\n        <form\r\n          onSubmit={getSearch}\r\n          className=\"search-form\"\r\n          onMouseEnter={() => setIsHovered(true)}\r\n          onMouseLeave={() => setIsHovered(false)}\r\n        >\r\n          <input\r\n            type=\"text\"\r\n            className={inputClass}\r\n            value={search}\r\n            onChange={updateSearch}\r\n            placeholder=\"Type to search\"\r\n          />\r\n          <button className={buttonClass} type=\"submit\">\r\n            <FontAwesomeIcon icon={faSearch} />\r\n          </button>\r\n        </form>\r\n        <button onClick={() => setModalIsOpen(true)}>Advanced Search</button>\r\n      </div>\r\n\r\n      <div className=\"recipes\">\r\n        {/* // || .map function used for looping arrays */}\r\n        {recipes.map((recipe) => (\r\n          <Recipe\r\n            key={recipe.recipe.label + recipe.recipe.calories}\r\n            title={recipe.recipe.label}\r\n            calories={recipe.recipe.calories}\r\n            image={recipe.recipe.image}\r\n            ingredients={recipe.recipe.ingredients}\r\n            loading={loading}\r\n          />\r\n        ))}\r\n      </div>\r\n      <footer>\r\n        <PaginationFooter\r\n          cardsPerPage={cardsPerPage}\r\n          totalCards={totalCards}\r\n          paginate={paginate}\r\n        />\r\n      </footer>\r\n\r\n      <Modal\r\n        isOpen={modalIsOpen}\r\n        onRequestClose={() => setModalIsOpen(false)}\r\n        style={{ overlay: { backgroundColor: \"rgba(0,0,0,0.7)\" } }}\r\n      >\r\n        <div className=\"ModalHeader\" style={{ display: \"flex\" }}>\r\n          <h2>Advanced Search</h2>\r\n        </div>\r\n        <div className=\"ModalContent\">\r\n          <FormikForm />\r\n\r\n          <Form onSubmit={getAdvancedSearch} className=\"advanced-search-form\">\r\n            {/* Search Starts Here */}\r\n            <Form.Group controlId=\"Search\">\r\n              <Form.Label>Search: </Form.Label>\r\n              <Form.Control type=\"text\" placeholder=\"Chicken\" />\r\n            </Form.Group>\r\n            {/* Search Ends Here */}\r\n            {/* No. of Items Starts Here */}\r\n            <Form.Group controlId=\"NoOfItems\">\r\n              <Form.Label>Number of Items Per Page</Form.Label>\r\n              <Form.Control as=\"select\">\r\n                <option>10</option>\r\n                <option>15</option>\r\n                <option>20</option>\r\n                <option>25</option>\r\n                <option>30</option>\r\n              </Form.Control>\r\n            </Form.Group>\r\n            {/* No. of Items Ends Here */}\r\n            {/* Meal Type Starts Here */}\r\n            <Form.Group controlId=\"MealType\">\r\n              <Form.Label>Meal Type: </Form.Label>\r\n              <Form.Control as=\"select\">\r\n                <option>Breakfast</option>\r\n                <option>Lunch</option>\r\n                <option>Dinner</option>\r\n                <option>Snack</option>\r\n              </Form.Control>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"DishType\">\r\n              <Form.Label>Dish Type</Form.Label>\r\n              <div className=\"mb-3\">\r\n                {dishTypes.map((dishType, index) => (\r\n                  <div style={{ display: \"inline-flex\" }}>\r\n                    <Form.Check\r\n                      inline\r\n                      label={`${dishType} `}\r\n                      type=\"checkbox\"\r\n                      id={`inline-${dishType}-${index}`}\r\n                    />\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </Form.Group>\r\n            {/* Meal Type Ends Here */}\r\n            {/* Cuisine Type Starts Here */}\r\n            <Form.Group controlId=\"CuisineType\">\r\n              <Form.Label>Cuisine Types</Form.Label>\r\n              <Form.Control as=\"select\">\r\n                {cuisineTypes.map((cuisineType) => (\r\n                  <option>{cuisineType}</option>\r\n                ))}\r\n              </Form.Control>\r\n            </Form.Group>\r\n            {/* CuisineType Ends Here */}\r\n            {/* Diet Starts Here */}\r\n            <fieldset>\r\n              <Form.Group controlId=\"Diet\">\r\n                <Form.Label>Diet</Form.Label>\r\n                <div className=\"mb-3\">\r\n                  {dietLabels.map((dietLabel, index) => (\r\n                    <PopoverStickOnHover\r\n                      component={<div>{`${dietLabel.description}`}</div>}\r\n                      placement=\"top\"\r\n                      onMouseEnter={() => {}}\r\n                      delay={200}\r\n                    >\r\n                      <div style={{ display: \"inline-flex\" }}>\r\n                        <Form.Check\r\n                          inline\r\n                          label={`${dietLabel.name} `}\r\n                          type=\"radio\"\r\n                          name=\"formHorizontalRadios\"\r\n                          id={`inline-${dietLabel.name}-${index}`}\r\n                        />\r\n                      </div>\r\n                    </PopoverStickOnHover>\r\n                  ))}\r\n                </div>\r\n              </Form.Group>\r\n            </fieldset>\r\n            {/* Diet Ends Here */}\r\n            {/* Health Labels Starts Here */}\r\n            <Form.Group controlId=\"HealthLabel\">\r\n              <Form.Label>Health Labels</Form.Label>\r\n              <div className=\"mb-3\">\r\n                {healthLabels.map((healthLabel, index) => (\r\n                  <PopoverStickOnHover\r\n                    component={<div>{`${healthLabel.description}`}</div>}\r\n                    placement=\"top\"\r\n                    onMouseEnter={() => {}}\r\n                    delay={200}\r\n                  >\r\n                    <div style={{ display: \"inline-flex\" }}>\r\n                      <Form.Check\r\n                        inline\r\n                        label={`${healthLabel.name} `}\r\n                        type=\"checkbox\"\r\n                        id={`inline-${healthLabel.name}-${index}`}\r\n                      />\r\n                    </div>\r\n                  </PopoverStickOnHover>\r\n                ))}\r\n              </div>\r\n            </Form.Group>\r\n            {/* Health Label Ends here */}\r\n            <Button variant=\"success\" type=\"submit\">\r\n              Submit\r\n            </Button>\r\n          </Form>\r\n        </div>\r\n\r\n        <div>\r\n          <button onClick={() => setModalIsOpen(false)}>Close</button>\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}