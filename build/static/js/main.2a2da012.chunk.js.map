{"version":3,"sources":["Nav.module.css","Recipe.module.css","Card.js","Recipe.js","Nav.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","styled","div","Recipe","title","calories","image","ingredients","className","style","recipe","card","flipOnHover","flipOnClick","flipDirection","front","elementType","frontContent","src","alt","back","recipeContent","map","ingredient","i","key","text","Nav","useState","isOpened","setIsOpened","navLinks","document","querySelectorAll","logo","navActive","href","burger","onClick","e","preventDefault","console","log","forEach","link","index","line1","line2","line3","App","APP_KEY","recipes","setRecipes","search","setSearch","query","setQuery","isHovered","setIsHovered","inputClass","buttonClass","useEffect","a","fetch","response","json","data","hits","getRecipes","onMouseEnter","onMouseLeave","onSubmit","type","value","onChange","target","placeholder","icon","faSearch","label","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2a2da012.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"logo\":\"Nav_logo__1Xgvm\",\"navLinks\":\"Nav_navLinks__1AAEJ\",\"burger\":\"Nav_burger__1yjeN\",\"navActive\":\"Nav_navActive__IyCbo\",\"navLinkFade\":\"Nav_navLinkFade__1ZCkG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"Recipe_recipe__n3x7X\",\"card\":\"Recipe_card__1k454\",\"front\":\"Recipe_front__2KU_s\",\"back\":\"Recipe_back__1gchb\",\"frontContent\":\"Recipe_frontContent__3DX7v\",\"recipeContent\":\"Recipe_recipeContent__UK4id\"};","import styled from \"styled-components\";\n\nexport const Card = styled.div`\n  height: 100%;\n  width: 100%;\n\n  border-radius: 10px;\n\n  background-color: #e7ffe6;\n\n  box-shadow: 0px 5px 20px rgb(71, 71, 71);\n\n  align-items: center;\n  position: relative;\n  display: inline-block;\n\n  curser: pointer;\n  transition: transform 300ms ease-in-out;\n`;\n\nexport default Card;\n","import React from \"react\";\nimport style from \"./Recipe.module.css\";\nimport Card from \"./Card\";\n\nimport Flippy, { FrontSide, BackSide } from \"react-flippy\";\n\nconst Recipe = ({ title, calories, image, ingredients }) => {\n  return (\n    <div className={style.recipe}>\n      <Flippy\n        className={style.card}\n        flipOnHover={true} // default false\n        flipOnClick={false} // default false\n        flipDirection=\"horizontal\" // horizontal or vertical\n        // ref={(r) => (this.flippy = r)} // to use toggle method like this.flippy.toggle()\n        // if you pass isFlipped prop component will be controlled component.\n        // and other props, which will go to div\n        /// these are optional style, it is not necessary\n      >\n        <FrontSide className={style.front} elementType={Card}>\n          <div className={style.frontContent}>\n            <h1>{title}</h1>\n            <img src={image} alt={title} />\n          </div>\n        </FrontSide>\n\n        <BackSide className={style.back + \" \" + style.card}>\n          <div className={style.recipeContent}>\n            <h3>Ingredients</h3>\n            <ol>\n              {ingredients.map((ingredient, i) => {\n                return <li key={[i, \"=\", ingredient]}>{ingredient.text}</li>;\n              })}\n            </ol>\n            <p>\n              Calories: <strong>{calories}</strong> cal\n            </p>\n          </div>\n        </BackSide>\n      </Flippy>\n    </div>\n  );\n};\n\nexport default Recipe;\n","import React, { useState } from \"react\";\nimport style from \"./Nav.module.css\";\n\nconst Nav = () => {\n  const [isOpened, setIsOpened] = useState(false);\n  const navLinks = document.querySelectorAll(`${style.navLinks} li`);\n\n  function navSlide(e) {\n    e.preventDefault();\n\n    console.log(navLinks);\n\n    if (isOpened) {\n      setIsOpened(false);\n      navLinks.forEach((link, index) => {\n        console.log(index);\n      });\n    } else {\n      setIsOpened(true);\n    }\n  }\n\n  return (\n    <nav>\n      <div className={style.logo}>\n        <h4>Ingredients</h4>\n      </div>\n\n      <ul\n        className={\n          isOpened === true\n            ? `${style.navLinks} ${style.navActive}`\n            : style.navLinks\n        }\n      >\n        <li>\n          <a href=\"#\">Home</a>\n        </li>\n        <li>\n          <a href=\"#\">About</a>\n        </li>\n        <li>\n          <a href=\"#\">Work</a>\n        </li>\n        <li>\n          <a href=\"#\">Projects</a>\n        </li>\n      </ul>\n\n      <div className={style.burger} onClick={navSlide}>\n        <div className={style.line1}></div>\n        <div className={style.line2}></div>\n        <div className={style.line3}></div>\n      </div>\n    </nav>\n  );\n};\n\nexport default Nav;\n","import React, { useEffect, useState } from \"react\";\n\nimport Recipe from \"./Recipe\";\nimport Nav from \"./Nav\";\n\nimport \"./App.css\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSearch } from \"@fortawesome/free-solid-svg-icons\";\n\nconst App = () => {\n  const APP_ID = \"65eff37b\";\n  const APP_KEY = \"013e642e140af7db99a3663be34125e2\";\n\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [query, setQuery] = useState(\"chicken\");\n  const [isHovered, setIsHovered] = useState(false);\n\n  let inputClass = \"search-bar\";\n  let buttonClass = \"search-button\";\n\n  useEffect(() => {\n    async function getRecipes() {\n      // || use await for data that doesn't come back instantly\n      const response = await fetch(\n        `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`\n      );\n      const data = await response.json();\n      setRecipes(data.hits);\n      console.log(data);\n    }\n    getRecipes();\n  }, [query]);\n\n  const updateSearch = (e) => {\n    setSearch(e.target.value);\n  };\n\n  const getSearch = (e) => {\n    // || prevent page refresh\n    e.preventDefault();\n    setQuery(search);\n    setSearch(\"\");\n  };\n\n  if (isHovered) {\n    inputClass = \"search-bar-expand search-bar\";\n    buttonClass = \"search-button search-button-expand\";\n  } else {\n    inputClass = \"search-bar\";\n    buttonClass = \"search-button\";\n  }\n\n  return (\n    <div className=\"App\">\n      <Nav />\n      <div\n        className=\"search-box\"\n        onMouseEnter={() => setIsHovered(true)}\n        onMouseLeave={() => setIsHovered(false)}\n      >\n        <form onSubmit={getSearch} className=\"search-form\">\n          <input\n            type=\"text\"\n            className={inputClass}\n            value={search}\n            onChange={updateSearch}\n            placeholder=\"Type to search\"\n          />\n          <button className={buttonClass} type=\"submit\">\n            <FontAwesomeIcon icon={faSearch} />\n          </button>\n        </form>\n      </div>\n\n      <div className=\"recipes\">\n        {/* // || .map function used for looping arrays */}\n        {recipes.map((recipe) => (\n          <Recipe\n            key={recipe.recipe.label}\n            title={recipe.recipe.label}\n            calories={recipe.recipe.calories}\n            image={recipe.recipe.image}\n            ingredients={recipe.recipe.ingredients}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}